<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage {{className}} - QuizAI</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        /* Reset and Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f8fafc;
            color: #334155;
            line-height: 1.6;
        }

        /* Layout Structure */
        .layout {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar Styles */
        .sidebar {
            width: 280px;
            background: white;
            box-shadow: 2px 0 4px rgba(0, 0, 0, 0.05);
            position: fixed;
            height: 100vh;
            overflow-y: auto;
            z-index: 100;
        }

        .class-info {
            padding: 2rem 1.5rem;
            border-bottom: 1px solid #e2e8f0;
            background: linear-gradient(135deg, #3b82f6, #8b5cf6);
            color: white;
        }

        .class-title {
            font-size: 1.25rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .class-subject {
            font-size: 0.9rem;
            opacity: 0.9;
            margin-bottom: 1rem;
        }

        .class-quick-stats {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 0.75rem;
        }

        .quick-stat {
            text-align: center;
            background: rgba(255, 255, 255, 0.1);
            padding: 0.5rem;
            border-radius: 6px;
        }

        .quick-stat-value {
            font-size: 1.1rem;
            font-weight: bold;
            display: block;
        }

        .quick-stat-label {
            font-size: 0.7rem;
            opacity: 0.8;
        }

        /* Navigation Menu */
        .nav-menu {
            padding: 1rem 0;
        }

        .nav-link {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 0.75rem 1.5rem;
            color: #64748b;
            text-decoration: none;
            transition: all 0.2s ease;
            border-right: 3px solid transparent;
            cursor: pointer;
        }

        .nav-link:hover {
            background: #f8fafc;
            color: #3b82f6;
        }

        .nav-link.active {
            background: #eff6ff;
            color: #3b82f6;
            border-right-color: #3b82f6;
            font-weight: 600;
        }

        .nav-icon {
            font-size: 1.1rem;
            width: 20px;
            text-align: center;
        }

        /* Breadcrumb */
        .breadcrumb {
            padding: 1rem 1.5rem;
            background: white;
            border-bottom: 1px solid #e2e8f0;
            color: #64748b;
            font-size: 0.9rem;
        }

        .breadcrumb a {
            color: #3b82f6;
            text-decoration: none;
        }

        .breadcrumb a:hover {
            text-decoration: underline;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            margin-left: 280px;
            background: #f8fafc;
        }

        .content-wrapper {
            padding: 2rem;
        }

        .content-section {
            display: none;
        }

        .content-section.active {
            display: block;
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .section-title {
            font-size: 1.75rem;
            font-weight: bold;
            color: #1e293b;
        }

        .section-subtitle {
            color: #64748b;
            margin-top: 0.25rem;
            font-size: 0.9rem;
        }

        /* Cards and Containers */
        .card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            margin-bottom: 1.5rem;
        }

        .card-title {
            font-size: 1.1rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 1rem;
        }

        /* Grid Layouts */
        .grid-2 {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1.5rem;
        }

        .grid-3 {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1.5rem;
        }

        .grid-4 {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 1rem;
        }

        /* Stats Cards */
        .stat-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            text-align: center;
            transition: transform 0.2s ease;
        }

        .stat-card:hover {
            transform: translateY(-2px);
        }

        .stat-card.blue { border-left: 4px solid #3b82f6; }
        .stat-card.green { border-left: 4px solid #10b981; }
        .stat-card.purple { border-left: 4px solid #8b5cf6; }
        .stat-card.orange { border-left: 4px solid #f59e0b; }

        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .stat-card.blue .stat-value { color: #3b82f6; }
        .stat-card.green .stat-value { color: #10b981; }
        .stat-card.purple .stat-value { color: #8b5cf6; }
        .stat-card.orange .stat-value { color: #f59e0b; }

        .stat-label {
            color: #64748b;
            font-size: 0.9rem;
            font-weight: 500;
        }

        /* Forms */
        .form-group {
            margin-bottom: 1rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #374151;
        }

        .form-input,
        .form-textarea,
        .form-select {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.2s ease;
        }

        .form-input:focus,
        .form-textarea:focus,
        .form-select:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        /* Buttons */
        .btn {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 0.9rem;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .btn:hover {
            background: #2563eb;
            transform: translateY(-1px);
        }

        .btn-success {
            background: #10b981;
        }

        .btn-success:hover {
            background: #059669;
        }

        .btn-warning {
            background: #f59e0b;
        }

        .btn-warning:hover {
            background: #d97706;
        }

        .btn-danger {
            background: #ef4444;
        }

        .btn-danger:hover {
            background: #dc2626;
        }

        .btn-secondary {
            background: #64748b;
        }

        .btn-secondary:hover {
            background: #475569;
        }

        /* Tables */
        .table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }

        .table th,
        .table td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }

        .table th {
            background: #f8fafc;
            font-weight: 600;
            color: #1e293b;
        }

        .table tr:hover {
            background: #f8fafc;
        }

        /* Charts */
        .chart-container {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            margin-bottom: 1.5rem;
        }

        .chart-wrapper {
            position: relative;
            height: 300px;
        }

        /* Loading States */
        .loading {
            text-align: center;
            padding: 3rem;
            color: #64748b;
        }

        .loading-spinner {
            border: 4px solid #e2e8f0;
            border-top: 4px solid #3b82f6;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Empty States */
        .empty-state {
            text-align: center;
            padding: 3rem;
            color: #64748b;
        }

        .empty-state h3 {
            font-size: 1.25rem;
            margin-bottom: 0.5rem;
            color: #1e293b;
        }

        /* Alerts */
        .alert {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
        }

        .alert-success {
            background-color: #dcfce7;
            color: #16a34a;
            border: 1px solid #86efac;
        }

        .alert-error {
            background-color: #fee2e2;
            color: #dc2626;
            border: 1px solid #fca5a5;
        }

        .alert-warning {
            background-color: #fef3c7;
            color: #d97706;
            border: 1px solid #fcd34d;
        }

        /* Quiz Item Styles */
        .quiz-item {
            background: white;
            border-radius: 8px;
            padding: 1.5rem;
            border: 1px solid #e2e8f0;
            margin-bottom: 1rem;
            transition: all 0.2s ease;
        }

        .quiz-item:hover {
            border-color: #3b82f6;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .quiz-title {
            font-size: 1.1rem;
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 0.5rem;
        }

        .quiz-meta {
            color: #64748b;
            font-size: 0.85rem;
            margin-bottom: 1rem;
        }

        .quiz-stats {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .quiz-stat {
            font-size: 0.8rem;
            color: #64748b;
        }

        .quiz-actions {
            display: flex;
            gap: 0.5rem;
        }

        /* Student Item Styles */
        .student-item {
            background: white;
            border-radius: 8px;
            padding: 1rem;
            border: 1px solid #e2e8f0;
            margin-bottom: 0.75rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .student-info {
            flex: 1;
        }

        .student-name {
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 0.25rem;
        }

        .student-meta {
            font-size: 0.8rem;
            color: #64748b;
        }

        .student-stats {
            display: flex;
            gap: 1rem;
            margin-right: 1rem;
        }

        .student-stat {
            text-align: center;
        }

        .student-stat-value {
            font-weight: bold;
            color: #3b82f6;
            font-size: 0.9rem;
        }

        .student-stat-label {
            font-size: 0.7rem;
            color: #64748b;
        }

        /* Mobile Responsiveness */
        @media (max-width: 1024px) {
            .sidebar {
                transform: translateX(-100%);
                transition: transform 0.3s ease;
            }

            .sidebar.open {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
            }

            .mobile-menu-btn {
                display: block;
                position: fixed;
                top: 1rem;
                left: 1rem;
                z-index: 200;
                background: #3b82f6;
                color: white;
                border: none;
                padding: 0.5rem;
                border-radius: 8px;
                cursor: pointer;
            }
        }

        @media (max-width: 768px) {
            .content-wrapper {
                padding: 1rem;
            }

            .grid-2,
            .grid-3,
            .grid-4 {
                grid-template-columns: 1fr;
            }

            .class-quick-stats {
                grid-template-columns: 1fr;
            }

            .quiz-stats {
                flex-direction: column;
                gap: 0.25rem;
            }

            .student-item {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.75rem;
            }

            .student-stats {
                margin-right: 0;
            }
        }
    </style>
</head>
<body>
    <!-- Mobile Menu Button -->
    <button class="mobile-menu-btn" onclick="toggleSidebar()" style="display: none;">☰</button>

    <div class="layout">
        <!-- Sidebar -->
        <aside class="sidebar" id="sidebar">
            <!-- Class Info Header -->
            <div class="class-info">
                <h1 class="class-title" id="classTitle">{{className}}</h1>
                <p class="class-subject" id="classSubject">{{classSubject}}</p>
                <div class="class-quick-stats">
                    <div class="quick-stat">
                        <span class="quick-stat-value" id="quickStudents">-</span>
                        <span class="quick-stat-label">Students</span>
                    </div>
                    <div class="quick-stat">
                        <span class="quick-stat-value" id="quickLectures">-</span>
                        <span class="quick-stat-label">Lectures</span>
                    </div>
                    <div class="quick-stat">
                        <span class="quick-stat-value" id="quickQuizzes">-</span>
                        <span class="quick-stat-label">Quizzes</span>
                    </div>
                </div>
            </div>

            <!-- Navigation Menu -->
            <nav class="nav-menu">
                <a class="nav-link active" onclick="showSection('overview')">
                    <span class="nav-icon">📊</span>
                    <span>Overview</span>
                </a>
                <a class="nav-link" onclick="showSection('quizzes')">
                    <span class="nav-icon">🎯</span>
                    <span>Quizzes</span>
                </a>
                <a class="nav-link" onclick="showSection('students')">
                    <span class="nav-icon">👥</span>
                    <span>Students</span>
                </a>
                <a class="nav-link" onclick="showSection('analytics')">
                    <span class="nav-icon">📈</span>
                    <span>Analytics</span>
                </a>
                <a class="nav-link" onclick="showSection('settings')">
                    <span class="nav-icon">⚙️</span>
                    <span>Settings</span>
                </a>
            </nav>
        </aside>

        <!-- Main Content -->
        <main class="main-content">
            <!-- Breadcrumb -->
            <div class="breadcrumb">
                <a href="/homeTeacher">Dashboard</a> > <a href="/homeTeacher">My Classes</a> > <span id="breadcrumbClass">{{className}}</span>
            </div>

            <div class="content-wrapper">
                <!-- Overview Section -->
                <section id="overviewSection" class="content-section active">
                    <div class="section-header">
                        <div>
                            <h2 class="section-title">📊 Class Overview</h2>
                            <p class="section-subtitle">Summary of class performance and activity</p>
                        </div>
                    </div>

                    <!-- Stats Grid -->
                    <div class="grid-4" id="overviewStats">
                        <div class="stat-card blue">
                            <div class="stat-value" id="totalStudents">-</div>
                            <div class="stat-label">Total Students</div>
                        </div>
                        <div class="stat-card green">
                            <div class="stat-value" id="classAverage">-%</div>
                            <div class="stat-label">Class Average</div>
                        </div>
                        <div class="stat-card purple">
                            <div class="stat-value" id="totalQuizzes">-</div>
                            <div class="stat-label">Total Quizzes</div>
                        </div>
                        <div class="stat-card orange">
                            <div class="stat-value" id="totalLectures">-</div>
                            <div class="stat-label">Total Lectures</div>
                        </div>
                    </div>

                    <!-- Charts and Recent Activity -->
                    <div class="grid-2">
                        <!-- Performance Chart -->
                        <div class="chart-container">
                            <h3 class="card-title">📈 Class Performance Trend</h3>
                            <div class="chart-wrapper">
                                <canvas id="performanceChart"></canvas>
                            </div>
                        </div>

                        <!-- Top Performers -->
                        <div class="card">
                            <h3 class="card-title">🏆 Top Performers</h3>
                            <div id="topPerformersContainer">
                                <div class="loading">Loading top performers...</div>
                            </div>
                        </div>
                    </div>

                    <!-- Recent Activity -->
                    <div class="card">
                        <h3 class="card-title">📋 Recent Quiz Activity</h3>
                        <div id="recentActivityContainer">
                            <div class="loading">Loading recent activity...</div>
                        </div>
                    </div>
                </section>

                <!-- Quizzes Section -->
                <section id="quizzesSection" class="content-section">
                    <div class="section-header">
                        <div>
                            <h2 class="section-title">🎯 Quiz Management</h2>
                            <p class="section-subtitle">Create and manage quizzes for this class</p>
                        </div>
                    </div>

                    <!-- Create Quiz Form -->
                    <div class="card">
                        <h3 class="card-title">➕ Create New Quiz</h3>
                        <form id="createQuizForm">
                            <div class="form-group">
                                <label class="form-label">Upload Lecture File</label>
                                <input type="file" id="lectureFile" class="form-input" accept=".pdf,.ppt,.pptx,.doc,.docx" required>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Lecture Title</label>
                                <input type="text" id="lectureTitle" class="form-input" placeholder="e.g., Chapter 1: Introduction to Physics" required>
                            </div>
                            <button type="submit" class="btn btn-success">📤 Upload & Generate Quiz</button>
                        </form>
                    </div>

                    <!-- Existing Quizzes -->
                    <div class="card">
                        <h3 class="card-title">📝 Class Quizzes</h3>
                        <div id="quizzesContainer">
                            <div class="loading">Loading quizzes...</div>
                        </div>
                    </div>
                </section>

                <!-- Students Section -->
                <section id="studentsSection" class="content-section">
                    <div class="section-header">
                        <div>
                            <h2 class="section-title">👥 Student Management</h2>
                            <p class="section-subtitle">Manage students enrolled in this class</p>
                        </div>
                    </div>

                    <!-- Add Student Form -->
                    <div class="card">
                        <h3 class="card-title">➕ Add Student</h3>
                        <form id="addStudentForm">
                            <div class="form-group">
                                <label class="form-label">Student Enrollment Number</label>
                                <input type="text" id="enrollmentNumber" class="form-input" placeholder="Enter student enrollment number" required>
                            </div>
                            <button type="submit" class="btn btn-success">👥 Add Student</button>
                        </form>
                    </div>

                    <!-- Student List -->
                    <div class="card">
                        <h3 class="card-title">📋 Enrolled Students</h3>
                        <div id="studentsContainer">
                            <div class="loading">Loading students...</div>
                        </div>
                    </div>
                </section>

                <!-- Analytics Section -->
                <section id="analyticsSection" class="content-section">
                    <div class="section-header">
                        <div>
                            <h2 class="section-title">📈 Class Analytics</h2>
                            <p class="section-subtitle">Detailed performance insights and trends</p>
                        </div>
                    </div>

                    <div id="analyticsContainer">
                        <div class="loading">Loading analytics...</div>
                    </div>
                </section>

                <!-- Settings Section -->
                <section id="settingsSection" class="content-section">
                    <div class="section-header">
                        <div>
                            <h2 class="section-title">⚙️ Class Settings</h2>
                            <p class="section-subtitle">Update class information and preferences</p>
                        </div>
                    </div>

                    <!-- Edit Class Form -->
                    <div class="card">
                        <h3 class="card-title">✏️ Edit Class Information</h3>
                        <form id="editClassForm">
                            <div class="form-group">
                                <label class="form-label">Class Name</label>
                                <input type="text" id="editClassName" class="form-input" required>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Subject</label>
                                <input type="text" id="editClassSubject" class="form-input" required>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Description</label>
                                <textarea id="editClassDescription" class="form-textarea" rows="3"></textarea>
                            </div>
                            <button type="submit" class="btn btn-warning">💾 Update Class</button>
                        </form>
                    </div>

                    <!-- Danger Zone -->
                    <div class="card" style="border-color: #ef4444;">
                        <h3 class="card-title" style="color: #ef4444;">⚠️ Danger Zone</h3>
                        <p style="color: #64748b; margin-bottom: 1rem;">These actions cannot be undone. Please proceed with caution.</p>
                        <button class="btn btn-danger" onclick="archiveClass()">🗄️ Archive Class</button>
                    </div>
                </section>
            </div>
        </main>
    </div>

    <script>

        // Add this at the top of your class management page JavaScript
        document.addEventListener('DOMContentLoaded', async function() {
            // Check if user is actually a teacher
            try {
                const sessionCheck = await fetch('/api/debug/session-check');
                const sessionData = await sessionCheck.json();
                
                console.log('👤 Current session:', sessionData);
                
                if (!sessionData.sessionData.userType || sessionData.sessionData.userType !== 'teacher') {
                    console.error('❌ Invalid user type for class management:', sessionData.sessionData.userType);
                    alert('Access denied. Only teachers can access class management.');
                    window.location.href = '/login';
                    return;
                }
                
                console.log('✅ Teacher session verified');
                
                // Continue with your existing initialization...
                loadClassData();
                loadQuizzes();
                loadStudents();
                
            } catch (error) {
                console.error('❌ Session check failed:', error);
                alert('Session error. Please login again.');
                window.location.href = '/login';
            }
        });

        // 🆕 INITIALIZE GLOBAL VARIABLES
        const classId = '{{classId}}';
        const className = '{{className}}';
        const classSubject = '{{classSubject}}';
        let classData = {};

        console.log('🚀 Class Management initializing for:', {
            classId: classId,
            className: className,
            classSubject: classSubject
        });

        // Initialize when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🔄 DOM loaded, starting initialization...');
            
            // Set initial values
            document.getElementById('classTitle').textContent = className || 'Loading...';
            document.getElementById('classSubject').textContent = classSubject || 'Loading...';
            document.getElementById('breadcrumbClass').textContent = className || 'Loading...';
            
            // 🆕 CHECK URL PARAMETERS FOR TAB REDIRECT
            const urlParams = new URLSearchParams(window.location.search);
            const targetTab = urlParams.get('tab');
            
            if (targetTab) {
                console.log('🎯 Redirecting to tab:', targetTab);
                // Small delay to ensure page is fully loaded
                setTimeout(() => {
                    showSectionByName(targetTab);
                }, 100);
            }
            
            // Load all data
            loadClassData();
            loadQuizzes();
            loadStudents();
        });

        // 🔄 NAVIGATION FUNCTIONS
        function showSection(sectionName) {
            console.log('📍 Switching to section:', sectionName);
            
            // Update active navigation link
            document.querySelectorAll('.nav-link').forEach(link => {
                link.classList.remove('active');
            });
            event.target.closest('.nav-link').classList.add('active');

            // Update content sections
            document.querySelectorAll('.content-section').forEach(section => {
                section.classList.remove('active');
            });
            document.getElementById(sectionName + 'Section').classList.add('active');

            // Load section-specific data
            switch(sectionName) {
                case 'analytics':
                    loadAnalytics();
                    break;
                case 'quizzes':
                    loadQuizzes();
                    break;
                case 'students':
                    loadStudents();
                    break;
            }
        }

        // 🆕 PROGRAMMATIC TAB SWITCHING (for URL parameters)
        function showSectionByName(sectionName) {
            console.log('🎯 Programmatically switching to section:', sectionName);
            
            // Update active navigation link
            document.querySelectorAll('.nav-link').forEach(link => {
                link.classList.remove('active');
                // Check if this link is for the target section
                const linkText = link.textContent.toLowerCase();
                if (linkText.includes(sectionName.toLowerCase())) {
                    link.classList.add('active');
                }
            });

            // Update content sections
            document.querySelectorAll('.content-section').forEach(section => {
                section.classList.remove('active');
            });
            
            const targetSection = document.getElementById(sectionName + 'Section');
            if (targetSection) {
                targetSection.classList.add('active');
                
                // Load section-specific data
                switch(sectionName) {
                    case 'analytics':
                        loadAnalytics();
                        break;
                    case 'quizzes':
                        loadQuizzes();
                        break;
                    case 'students':
                        loadStudents();
                        break;
                    case 'overview':
                        loadClassData();
                        break;
                }
            } else {
                console.warn('⚠️ Section not found:', sectionName);
                // Default to overview
                document.getElementById('overviewSection').classList.add('active');
                document.querySelector('.nav-link').classList.add('active');
            }
        }

        // 🆕 LOAD CLASS DATA
        async function loadClassData() {
            try {
                console.log('📊 Loading class overview data...');
                const response = await fetch(`/api/classes/${classId}/overview`);
                const data = await response.json();
                
                if (data.success) {
                    classData = data.classData;
                    updateClassInfo();
                    updateOverviewSection(data);
                    console.log('✅ Class data loaded successfully');
                } else {
                    console.error('❌ Failed to load class data:', data.message);
                    showError('Failed to load class data: ' + data.message);
                }
            } catch (error) {
                console.error('❌ Error loading class data:', error);
                showError('Network error while loading class data.');
            }
        }

        // 🆕 UPDATE CLASS INFO IN SIDEBAR
        function updateClassInfo() {
            if (classData) {
                document.getElementById('quickStudents').textContent = classData.studentCount || 0;
                document.getElementById('quickLectures').textContent = classData.lectureCount || 0;
                document.getElementById('quickQuizzes').textContent = classData.quizCount || 0;
            }
        }

        // 🆕 UPDATE OVERVIEW SECTION
        function updateOverviewSection(data) {
            if (data && data.classData) {
                document.getElementById('totalStudents').textContent = data.classData.studentCount || 0;
                document.getElementById('classAverage').textContent = (data.classData.averageScore || 0) + '%';
                document.getElementById('totalQuizzes').textContent = data.classData.quizCount || 0;
                document.getElementById('totalLectures').textContent = data.classData.lectureCount || 0;
            }

            // Update top performers
            if (data.topPerformers) {
                displayTopPerformers(data.topPerformers);
            }

            // Update recent activity
            if (data.recentActivity) {
                displayRecentActivity(data.recentActivity);
            }
        }

        // 🆕 DISPLAY TOP PERFORMERS
        function displayTopPerformers(performers) {
            const container = document.getElementById('topPerformersContainer');
            
            if (!performers || performers.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #64748b;">No performance data yet.</p>';
                return;
            }

            const performersHTML = performers.map((performer, index) => `
                <div style="display: flex; justify-content: space-between; align-items: center; padding: 0.75rem 0; border-bottom: 1px solid #e2e8f0;">
                    <div>
                        <span style="font-weight: 600;">#${index + 1} ${performer.studentName}</span>
                        <div style="font-size: 0.8rem; color: #64748b;">${performer.totalQuizzes} quizzes</div>
                    </div>
                    <div style="font-weight: bold; color: #10b981;">${performer.averageScore}%</div>
                </div>
            `).join('');

            container.innerHTML = performersHTML;
        }

        // 🆕 DISPLAY RECENT ACTIVITY
        function displayRecentActivity(activities) {
            const container = document.getElementById('recentActivityContainer');
            
            if (!activities || activities.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #64748b;">No recent activity.</p>';
                return;
            }

            const activitiesHTML = activities.map(activity => `
                <div style="display: flex; justify-content: space-between; align-items: center; padding: 0.5rem 0; border-bottom: 1px solid #e2e8f0;">
                    <div>
                        <span style="font-weight: 500;">${activity.studentName}</span>
                        <div style="font-size: 0.8rem; color: #64748b;">${activity.submissionDate}</div>
                    </div>
                    <div style="font-weight: bold; color: #3b82f6;">${activity.score}%</div>
                </div>
            `).join('');

            container.innerHTML = activitiesHTML;
        }

        // 🆕 LOAD QUIZZES
        async function loadQuizzes() {
            console.log('📝 Loading quizzes for class:', classId);
            
            try {
                const response = await fetch(`/api/teacher/class/${classId}/quizzes`);
                const data = await response.json();
                
                if (data.success) {
                    console.log('✅ Quizzes loaded:', data.quizzes.length);
                    displayQuizzes(data.quizzes);
                } else {
                    console.error('❌ Failed to load quizzes:', data.message);
                    showError('Failed to load quizzes: ' + data.message);
                }
            } catch (error) {
                console.error('❌ Error loading quizzes:', error);
                showError('Network error while loading quizzes.');
            }
        }

        // 🆕 DISPLAY QUIZZES
        function displayQuizzes(quizzes) {
            const container = document.getElementById('quizzesContainer');
            
            if (quizzes.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <h3>📝 No Quizzes Yet</h3>
                        <p>Upload a lecture to create your first quiz!</p>
                    </div>
                `;
                return;
            }

            const quizzesHTML = quizzes.map(quiz => `
                <div class="quiz-item">
                    <div class="quiz-title">${quiz.lectureTitle}</div>
                    <div class="quiz-meta">
                        📝 ${quiz.totalQuestions} questions • 
                        📅 Created ${new Date(quiz.generatedDate).toLocaleDateString()} •
                        🆔 Quiz ID: ${quiz._id.toString().slice(-6)}
                    </div>
                    <div class="quiz-stats">
                        <span class="quiz-stat">📊 Avg: ${quiz.averageScore || 0}%</span>
                        <span class="quiz-stat">🎯 High: ${quiz.highestScore || 0}%</span>
                        <span class="quiz-stat">👥 ${quiz.totalAttempts || 0} attempts</span>
                        <span class="quiz-stat">
                            ${quiz.isActive ? '🟢 Active' : '🔴 Inactive'}
                        </span>
                    </div>
                    <div class="quiz-actions">
                        <a href="/lecture_results/${quiz.lectureId}" class="btn btn-secondary" 
                           style="font-size: 0.8rem; padding: 0.5rem 1rem;">
                            📊 View Results
                        </a>
                    </div>
                </div>
            `).join('');

            container.innerHTML = quizzesHTML;
        }

        // 🆕 LOAD STUDENTS
        async function loadStudents() {
            console.log('👥 Loading students for class:', classId);
            
            try {
                const response = await fetch(`/api/classes/${classId}/students`);
                const data = await response.json();
                
                if (data.success) {
                    console.log('✅ Students loaded:', data.students.length);
                    displayStudents(data.students);
                } else {
                    console.error('❌ Failed to load students:', data.message);
                    showError('Failed to load students: ' + data.message);
                }
            } catch (error) {
                console.error('❌ Error loading students:', error);
                showError('Network error while loading students.');
            }
        }

        // 🆕 DISPLAY STUDENTS
        function displayStudents(students) {
            const container = document.getElementById('studentsContainer');
            
            if (students.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <h3>👥 No Students Enrolled</h3>
                        <p>Add students using their enrollment numbers.</p>
                    </div>
                `;
                return;
            }

            const studentsHTML = students.map(student => `
                <div class="student-item">
                    <div class="student-info">
                        <div class="student-name">${student.studentName}</div>
                        <div class="student-meta">Enrollment: ${student.studentEnrollment} • Joined: ${new Date(student.enrolledAt).toLocaleDateString()}</div>
                    </div>
                    <div class="student-stats">
                        <div class="student-stat">
                            <div class="student-stat-value">${student.totalQuizzes}</div>
                            <div class="student-stat-label">Quizzes</div>
                        </div>
                        <div class="student-stat">
                            <div class="student-stat-value">${student.averageScore}%</div>
                            <div class="student-stat-label">Average</div>
                        </div>
                    </div>
                    <button class="btn btn-danger" onclick="removeStudent('${student.studentId}')" 
                            style="font-size: 0.8rem; padding: 0.5rem 1rem;">
                        Remove
                    </button>
                </div>
            `).join('');

            container.innerHTML = studentsHTML;
        }

        // 🆕 LOAD ANALYTICS
        async function loadAnalytics() {
            console.log('📈 Loading analytics for class:', classId);
            
            try {
                const response = await fetch(`/api/classes/${classId}/analytics`);
                const data = await response.json();
                
                if (data.success) {
                    console.log('✅ Analytics loaded');
                    displayAnalytics(data.analytics);
                } else {
                    console.error('❌ Failed to load analytics:', data.message);
                    showError('Failed to load analytics: ' + data.message);
                }
            } catch (error) {
                console.error('❌ Error loading analytics:', error);
                showError('Network error while loading analytics.');
            }
        }

        // 🆕 DISPLAY ANALYTICS
        function displayAnalytics(analytics) {
            const container = document.getElementById('analyticsContainer');
            
            if (!analytics) {
                container.innerHTML = '<p style="text-align: center; color: #64748b;">No analytics data available yet.</p>';
                return;
            }

            const analyticsHTML = `
                <div class="card">
                    <h3 class="card-title">📊 Class Statistics</h3>
                    <div class="grid-3">
                        <div style="text-align: center; padding: 1rem; background: #f8fafc; border-radius: 8px;">
                            <div style="font-size: 1.5rem; font-weight: bold; color: #3b82f6;">${analytics.totalParticipants}</div>
                            <div style="color: #64748b;">Total Participants</div>
                        </div>
                        <div style="text-align: center; padding: 1rem; background: #f8fafc; border-radius: 8px;">
                            <div style="font-size: 1.5rem; font-weight: bold; color: #10b981;">${analytics.classAverage}%</div>
                            <div style="color: #64748b;">Class Average</div>
                        </div>
                        <div style="text-align: center; padding: 1rem; background: #f8fafc; border-radius: 8px;">
                            <div style="font-size: 1.5rem; font-weight: bold; color: #f59e0b;">${analytics.totalQuizAttempts}</div>
                            <div style="color: #64748b;">Total Quiz Attempts</div>
                        </div>
                    </div>
                </div>
            `;

            container.innerHTML = analyticsHTML;
        }

        // 🔄 FORM HANDLERS
        document.getElementById('createQuizForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData();
            formData.append('lectureFile', document.getElementById('lectureFile').files[0]);
            formData.append('title', document.getElementById('lectureTitle').value);
            formData.append('classId', classId);

            const submitButton = this.querySelector('button[type="submit"]');
            const originalText = submitButton.textContent;
            
            try {
                submitButton.textContent = '📤 Uploading...';
                submitButton.disabled = true;

                console.log('📤 Uploading lecture for class:', classId);
                
                const response = await fetch('/upload_lecture', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    showSuccess('Lecture uploaded successfully! Starting quiz generation...');
                    document.getElementById('createQuizForm').reset();
                    
                    submitButton.textContent = '🤖 Generating Quiz...';
                    
                    setTimeout(async () => {
                        await generateQuizFromLecture(result.lectureId);
                    }, 1000);
                    
                } else {
                    throw new Error(result.message || 'Upload failed');
                }
            } catch (error) {
                console.error('❌ Upload error:', error);
                showError('Failed to upload lecture: ' + error.message);
                
                submitButton.textContent = originalText;
                submitButton.disabled = false;
            }
        });

        document.getElementById('addStudentForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const enrollmentNumber = document.getElementById('enrollmentNumber').value.trim();
            const submitButton = this.querySelector('button[type="submit"]');
            const originalText = submitButton.textContent;
            
            console.log('📝 Adding student:', {
                enrollmentNumber,
                classId
            });
            
            try {
                submitButton.textContent = '⏳ Adding...';
                submitButton.disabled = true;

                const response = await fetch(`/api/classes/${classId}/students`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ enrollmentNumber })
                });

                console.log('📡 Response status:', response.status);
                
                const result = await response.json();
                console.log('📡 Response data:', result);

                if (result.success) {
                    showSuccess(`Student ${result.student.studentName} added successfully!`);
                    document.getElementById('addStudentForm').reset();
                    loadStudents();
                    loadClassData();
                } else {
                    console.error('❌ Failed to add student:', result);
                    showError('Failed to add student: ' + result.message);
                    
                    // Show debug info if available
                    if (result.debug) {
                        console.error('🔍 Debug info:', result.debug);
                    }
                }
            } catch (error) {
                console.error('❌ Add student error:', error);
                showError('Network error while adding student.');
            } finally {
                submitButton.textContent = originalText;
                submitButton.disabled = false;
            }
        });

        // 🆕 GENERATE QUIZ FROM LECTURE
        async function generateQuizFromLecture(lectureId) {
            const submitButton = document.querySelector('#createQuizForm button[type="submit"]');
            
            try {
                console.log('🤖 Starting quiz generation for lecture:', lectureId);
                
                const response = await fetch(`/generate_quiz/${lectureId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                const result = await response.json();

                if (result.success) {
                    console.log('✅ Quiz generated successfully:', result);
                    
                    showSuccess(`🎉 Quiz generated successfully! ${result.totalQuestions} questions created with detailed explanations.`);
                    
                    loadQuizzes();
                    loadClassData();
                    
                } else {
                    console.error('❌ Quiz generation failed:', result.message);
                    showError('Quiz generation failed: ' + result.message);
                }
            } catch (error) {
                console.error('❌ Quiz generation error:', error);
                showError('Failed to generate quiz: ' + error.message);
            } finally {
                submitButton.textContent = '📤 Upload & Generate Quiz';
                submitButton.disabled = false;
            }
        }

        // 🆕 REMOVE STUDENT
        async function removeStudent(studentId) {
            if (!confirm('Are you sure you want to remove this student from the class?')) {
                return;
            }

            try {
                const response = await fetch(`/api/classes/${classId}/students/${studentId}`, {
                    method: 'DELETE'
                });

                const result = await response.json();

                if (result.success) {
                    showSuccess('Student removed successfully!');
                    loadStudents();
                    loadClassData();
                } else {
                    showError('Failed to remove student: ' + result.message);
                }
            } catch (error) {
                console.error('❌ Remove student error:', error);
                showError('Network error while removing student.');
            }
        }

        // 🆕 ARCHIVE CLASS
        async function archiveClass() {
            if (!confirm(`Are you sure you want to archive the class "${className}"? This action cannot be undone.`)) {
                return;
            }

            try {
                const response = await fetch(`/api/classes/${classId}`, {
                    method: 'DELETE'
                });

                const result = await response.json();

                if (result.success) {
                    showSuccess('Class archived successfully! Redirecting to dashboard...');
                    setTimeout(() => {
                        window.location.href = '/homeTeacher';
                    }, 2000);
                } else {
                    showError('Failed to archive class: ' + result.message);
                }
            } catch (error) {
                console.error('❌ Archive class error:', error);
                showError('Network error while archiving class.');
            }
        }

        // 🆕 UTILITY FUNCTIONS
        function showSuccess(message) {
            console.log('✅', message);
            
            document.querySelectorAll('.alert').forEach(alert => alert.remove());
            
            const messageHTML = `
                <div class="alert alert-success" style="position: fixed; top: 20px; right: 20px; z-index: 1000; max-width: 400px;">
                    <strong>Success!</strong> ${message}
                    <button onclick="this.parentElement.remove()" style="float: right; background: none; border: none; font-size: 18px; cursor: pointer;">&times;</button>
                </div>
            `;
            document.body.insertAdjacentHTML('afterbegin', messageHTML);
            
            setTimeout(() => {
                const alert = document.querySelector('.alert-success');
                if (alert) alert.remove();
            }, 8000);
        }

        function showError(message) {
            console.error('❌', message);
            
            document.querySelectorAll('.alert').forEach(alert => alert.remove());
            
            const messageHTML = `
                <div class="alert alert-error" style="position: fixed; top: 20px; right: 20px; z-index: 1000; max-width: 400px;">
                    <strong>Error!</strong> ${message}
                    <button onclick="this.parentElement.remove()" style="float: right; background: none; border: none; font-size: 18px; cursor: pointer;">&times;</button>
                </div>
            `;
            document.body.insertAdjacentHTML('afterbegin', messageHTML);
            
            setTimeout(() => {
                const alert = document.querySelector('.alert-error');
                if (alert) alert.remove();
            }, 10000);
        }

        function toggleSidebar() {
            document.getElementById('sidebar').classList.toggle('open');
        }
    </script>
</body>
</html>