<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Professor Dashboard - QuizAI</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        /* Reset and Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f8fafc;
            color: #334155;
            line-height: 1.6;
        }

        /* Header Styles */
        .header {
            background: white;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            padding: 1rem 0;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 1.75rem;
            font-weight: bold;
            color: #3b82f6;
        }

        .nav-links {
            display: flex;
            gap: 2rem;
            list-style: none;
        }

        .nav-links a {
            text-decoration: none;
            color: #64748b;
            font-weight: 500;
            transition: color 0.3s ease;
            cursor: pointer;
        }

        .nav-links a:hover, .nav-links a.active {
            color: #3b82f6;
        }

        .profile-section {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .profile-avatar {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, #3b82f6, #8b5cf6);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 1rem;
        }

        .profile-info h3 {
            font-size: 0.9rem;
            font-weight: 600;
            color: #1e293b;
        }

        .profile-info p {
            font-size: 0.75rem;
            color: #64748b;
        }

        .logout-btn {
            background-color: #ef4444;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s ease, transform 0.1s ease;
            font-size: 0.85rem;
            text-decoration: none;
            margin-left: 1rem;
        }

        .logout-btn:hover {
            background-color: #dc2626;
            transform: translateY(-1px);
        }

        /* Main Content */
        .main-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem 1rem;
        }

        .dashboard-title {
            font-size: 2rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 2rem;
        }

        /* Stats Section */
        .stats-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 3rem;
        }

        .stat-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }

        .stat-card.blue { border-left: 4px solid #3b82f6; }
        .stat-card.green { border-left: 4px solid #10b981; }
        .stat-card.purple { border-left: 4px solid #8b5cf6; }
        .stat-card.orange { border-left: 4px solid #f59e0b; }

        .stat-value {
            font-size: 2.25rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .stat-card.blue .stat-value { color: #3b82f6; }
        .stat-card.green .stat-value { color: #10b981; }
        .stat-card.purple .stat-value { color: #8b5cf6; }
        .stat-card.orange .stat-value { color: #f59e0b; }

        .stat-label {
            color: #64748b;
            font-size: 0.9rem;
            font-weight: 500;
        }

        /* Tab Navigation */
        .tab-navigation {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
            border-bottom: 1px solid #e2e8f0;
        }

        .tab-button {
            background: none;
            border: none;
            padding: 0.75rem 1.5rem;
            color: #64748b;
            font-weight: 500;
            cursor: pointer;
            border-bottom: 2px solid transparent;
            transition: all 0.2s ease;
        }

        .tab-button.active {
            color: #3b82f6;
            border-bottom-color: #3b82f6;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        /* Section Styles */
        .section {
            margin-bottom: 3rem;
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 1.5rem;
        }

        /* 🆕 UPDATED: Section Header with Right-Aligned Button */
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .section-header h2 {
            font-size: 1.5rem;
            font-weight: bold;
            color: #1e293b;
            margin: 0;
        }

        /* 🆕 NEW: Create Class Button (Similar to Claude's New Project Button) */
        .create-class-btn {
            background: #10b981;
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 0.9rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .create-class-btn:hover {
            background: #059669;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
        }

        .create-class-btn .icon {
            font-size: 1rem;
        }

        /* General Button Styles */
        .btn {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s ease, transform 0.1s ease;
            font-size: 0.9rem;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .btn:hover {
            background: #2563eb;
            transform: translateY(-1px);
        }

        .btn-success {
            background: #10b981;
        }

        .btn-success:hover {
            background: #059669;
        }

        .btn-lg {
            padding: 1rem 2rem;
            font-size: 1rem;
        }

        /* 🆕 CLASS CARDS */
        .classes-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 1.5rem;
        }

        .class-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            border-left: 4px solid #3b82f6;
        }

        .class-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }

        .class-header {
            margin-bottom: 1rem;
        }

        .class-name {
            font-size: 1.25rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 0.25rem;
        }

        .class-subject {
            font-size: 0.9rem;
            color: #3b82f6;
            font-weight: 500;
            margin-bottom: 0.5rem;
        }

        .class-description {
            font-size: 0.85rem;
            color: #64748b;
            line-height: 1.4;
        }

        /* 🆕 CLASS QUICK STATS */
        .class-stats {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 0.75rem;
            margin: 1rem 0;
            padding: 1rem;
            background: #f8fafc;
            border-radius: 8px;
        }

        .class-stat {
            text-align: center;
        }

        .class-stat-value {
            font-size: 1.1rem;
            font-weight: bold;
            color: #3b82f6;
            display: block;
        }

        .class-stat-label {
            font-size: 0.75rem;
            color: #64748b;
            margin-top: 0.25rem;
        }

        /* 🆕 CLASS ACTIONS */
        .class-actions {
            display: flex;
            gap: 0.75rem;
            margin-top: 1rem;
        }

        .action-button {
            flex: 1;
            background: #3b82f6;
            color: white;
            border: none;
            padding: 0.75rem 1rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s ease, transform 0.1s ease;
            font-size: 0.85rem;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .action-button:hover {
            transform: translateY(-1px);
        }

        .action-button.quiz-btn {
            background: #f59e0b;
        }
        .action-button.quiz-btn:hover {
            background: #d97706;
        }

        .action-button.manage-btn {
            background: #8b5cf6;
        }
        .action-button.manage-btn:hover {
            background: #7c3aed;
        }

        /* 🆕 MODAL STYLES */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(4px);
        }

        .modal.show {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            animation: modalSlideIn 0.3s ease;
        }

        @keyframes modalSlideIn {
            from {
                opacity: 0;
                transform: translateY(-30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .modal-title {
            font-size: 1.25rem;
            font-weight: bold;
            color: #1e293b;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #64748b;
            padding: 0.25rem;
            border-radius: 4px;
            transition: background-color 0.2s ease;
        }

        .close-btn:hover {
            background: #f1f5f9;
        }

        /* 🆕 FORM STYLES */
        .form-group {
            margin-bottom: 1rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #374151;
        }

        .form-input,
        .form-textarea,
        .form-select {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.2s ease;
        }

        .form-input:focus,
        .form-textarea:focus,
        .form-select:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .form-textarea {
            min-height: 80px;
            resize: vertical;
        }

        /* Enhanced Analytics Section */
        .analytics-section {
            margin-top: 2rem;
            padding: 2rem;
            background: #f8fafc;
            border-radius: 12px;
        }

        .refresh-btn {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .refresh-btn:hover {
            background: #2563eb;
            transform: translateY(-1px);
        }

        /* Enhanced Charts Grid */
        .charts-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .chart-container {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            border: 1px solid #e5e7eb;
        }

        .chart-wrapper {
            position: relative;
            height: 400px;
            width: 100%;
        }

        /* Insights Panel */
        .insights-panel {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            border: 1px solid #e5e7eb;
        }

        .insights-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }

        .insight-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            border: 1px solid #e5e7eb;
        }

        .insight-card h3 {
            margin: 0 0 1rem 0;
            color: #1f2937;
            font-size: 1.1rem;
            font-weight: 600;
        }

        .metrics {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

        .metric {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem;
            background: #f9fafb;
            border-radius: 6px;
        }

        .metric .label {
            font-weight: 500;
            color: #374151;
        }

        .metric .value {
            font-weight: 600;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
        }

        .value.excellent { background: #dcfce7; color: #16a34a; }
        .value.good { background: #dbeafe; color: #2563eb; }
        .value.average { background: #fef3c7; color: #d97706; }
        .value.needs-help { background: #fee2e2; color: #dc2626; }

        .alert {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
        }

        .alert-warning {
            background: #fef3c7;
            border: 1px solid #f59e0b;
            color: #92400e;
        }

        .alert-success {
            background: #dcfce7;
            border: 1px solid #16a34a;
            color: #15803d;
        }

        .alert-error {
            background-color: #fee2e2;
            color: #dc2626;
            border: 1px solid #fca5a5;
        }

        .student-list {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .student-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem;
            background: #f9fafb;
            border-radius: 6px;
            border-left: 3px solid #e5e7eb;
        }

        .student-item.top-performer {
            border-left-color: #10b981;
            background: #f0fdf4;
        }

        .student-item .rank {
            font-weight: bold;
            color: #10b981;
            margin-right: 0.5rem;
        }

        .student-item .name {
            font-weight: 500;
            color: #374151;
            flex: 1;
        }

        .student-item .stats {
            font-size: 0.875rem;
            color: #6b7280;
        }

        .no-issues {
            text-align: center;
            color: #16a34a;
            font-weight: 500;
            padding: 2rem;
        }

        /* Analytics Tables */
        .analytics-table {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
            overflow-x: auto;
        }

        .table {
            width: 100%;
            border-collapse: collapse;
        }

        .table th,
        .table td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }

        .table th {
            background: #f8fafc;
            font-weight: 600;
            color: #1e293b;
        }

        .table tr:hover {
            background: #f8fafc;
        }

        .rank-badge {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: bold;
            min-width: 30px;
            text-align: center;
        }

        .rank-1 { background: #ffd700; color: #1e293b; }
        .rank-2 { background: #c0c0c0; color: #1e293b; }
        .rank-3 { background: #cd7f32; color: white; }
        .rank-other { background: #e2e8f0; color: #64748b; }

        .view-student-btn {
            background: #8b5cf6;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-size: 0.8rem;
            cursor: pointer;
            text-decoration: none;
        }

        .view-student-btn:hover {
            background: #7c3aed;
        }

        /* Loading States */
        .loading {
            text-align: center;
            padding: 2rem;
            color: #64748b;
        }

        .loading-spinner {
            border: 4px solid #e2e8f0;
            border-top: 4px solid #3b82f6;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        .error-message {
            text-align: center;
            padding: 2rem;
            color: #dc2626;
        }

        .retry-btn {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            cursor: pointer;
            margin-top: 1rem;
        }

        .retry-btn:hover {
            background: #2563eb;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 3rem;
            color: #64748b;
        }

        .empty-state h3 {
            font-size: 1.25rem;
            margin-bottom: 0.5rem;
            color: #1e293b;
        }

        .empty-state p {
            margin-bottom: 1.5rem;
        }

        /* Mobile Responsiveness */
        @media (max-width: 1024px) {
            .charts-grid {
                grid-template-columns: 1fr;
                gap: 1.5rem;
            }
            
            .chart-wrapper {
                height: 350px;
            }
        }

        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                gap: 1rem;
            }

            .nav-links {
                gap: 1rem;
            }

            .dashboard-title {
                font-size: 1.5rem;
            }

            .stats-section {
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 1rem;
            }

            .classes-grid {
                grid-template-columns: 1fr;
            }

            .class-actions {
                flex-direction: column;
                gap: 0.5rem;
            }

            .action-button {
                width: 100%;
            }

            .charts-grid {
                grid-template-columns: 1fr;
            }

            .tab-navigation {
                overflow-x: auto;
                white-space: nowrap;
            }

            .analytics-section {
                padding: 1rem;
            }
            
            .section-header {
                flex-direction: column;
                gap: 1rem;
                align-items: flex-start;
            }
            
            .chart-container {
                padding: 1rem;
            }
            
            .chart-wrapper {
                height: 300px;
            }

            .insights-grid {
                grid-template-columns: 1fr;
            }
            
            .student-item {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.25rem;
            }

            .class-stats {
                grid-template-columns: 1fr;
            }

            .modal-content {
                width: 95%;
                padding: 1.5rem;
            }

            /* 🆕 Mobile specific for create button */
            .create-class-btn {
                width: 100%;
                justify-content: center;
            }
        }

        @media (max-width: 480px) {
            .main-content {
                padding: 1rem 0.5rem;
            }

            .stat-card,
            .class-card,
            .chart-container {
                padding: 1rem;
            }

            .refresh-btn {
                width: 100%;
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="header-content">
            <div class="logo">QuizAI</div>
            <nav>
                <ul class="nav-links">
                    <li><a onclick="showTab('classes')" class="active">My Classes</a></li>
                    <li><a onclick="showTab('analytics')">Analytics</a></li>
                    <li><a onclick="showTab('students')">Student Rankings</a></li>
                </ul>
            </nav>
            <div class="profile-section">
                <div class="profile-avatar" id="profileAvatar"></div>
                <div class="profile-info">
                    <h3>{{{userName}}}</h3>
                    <p>Professor</p>
                </div>
                <a href="/logout" class="logout-btn">Logout</a>
            </div>
        </div>
    </header>

    <main class="main-content">
        <h1 class="dashboard-title" id="dashboardTitle"></h1>

        {{#if classCreated}}
            <div class="alert alert-success">
                ✅ Class "{{createdClassName}}" created successfully!
            </div>
        {{/if}}

        {{#if uploadError}}
            <div class="alert alert-error">
                ❌ {{message}}
            </div>
        {{/if}}

        <!-- 🔄 UPDATED: Class-focused Stats Section -->
        <section class="stats-section">
            <div class="stat-card blue">
                <div class="stat-value" id="totalClassesCount">{{totalClasses}}</div>
                <div class="stat-label">Total Classes</div>
            </div>
            <div class="stat-card green">
                <div class="stat-value" id="totalStudentsCount">{{totalStudents}}</div>
                <div class="stat-label">Total Students</div>
            </div>
            <div class="stat-card purple">
                <div class="stat-value" id="totalLecturesCount">{{totalLectures}}</div>
                <div class="stat-label">Total Lectures</div>
            </div>
            <div class="stat-card orange">
                <div class="stat-value" id="totalQuizzesCount">{{totalQuizzes}}</div>
                <div class="stat-label">Total Quizzes</div>
            </div>
        </section>

        <!-- 🔄 UPDATED: Tab Navigation -->
        <div class="tab-navigation">
            <button class="tab-button active" onclick="showTab('classes')">My Classes</button>
            <button class="tab-button" onclick="showTab('analytics')">Analytics</button>
            <button class="tab-button" onclick="showTab('students')">Student Rankings</button>
        </div>

        <!-- 🆕 UPDATED: Classes Tab with New Header Style -->
        <div id="classesTab" class="tab-content active">
            <!-- 🔄 UPDATED: My Classes Section with Right-Aligned Button -->
            <section class="section">
                <div class="section-header">
                    <h2>📚 My Classes</h2>
                    <button class="create-class-btn" onclick="showCreateClassModal()">
                        <span class="icon">➕</span>
                        New Class
                    </button>
                </div>
                <div id="classesContainer">
                    {{#if classes}}
                        <div class="classes-grid">
                            {{#each classes}}
                                <div class="class-card">
                                    <div class="class-header">
                                        <h3 class="class-name">{{this.name}}</h3>
                                        <p class="class-subject">📖 {{this.subject}}</p>
                                        {{#if this.description}}
                                            <p class="class-description">{{this.description}}</p>
                                        {{/if}}
                                    </div>
                                    
                                    <!-- 🆕 Quick Stats -->
                                    <div class="class-stats">
                                        <div class="class-stat">
                                            <span class="class-stat-value">{{this.studentCount}}</span>
                                            <span class="class-stat-label">Students</span>
                                        </div>
                                        <div class="class-stat">
                                            <span class="class-stat-value">{{this.lectureCount}}</span>
                                            <span class="class-stat-label">Lectures</span>
                                        </div>
                                        <div class="class-stat">
                                            <span class="class-stat-value">{{this.averageScore}}%</span>
                                            <span class="class-stat-label">Avg Score</span>
                                        </div>
                                    </div>
                                    
                                    <!-- 🆕 Class Actions -->
                                    <div class="class-actions">
                                        <a href="/class/manage/{{this.id}}" class="action-button manage-btn">
                                            ⚙️ Manage Class
                                        </a>
                                        <button class="action-button quiz-btn" onclick="redirectToCreateQuiz('{{this.id}}')">
                                            🎯 Create Quiz
                                        </button>
                                    </div>
                                </div>
                            {{/each}}
                        </div>
                    {{else}}
                        <div class="empty-state">
                            <h3>🏫 No Classes Yet</h3>
                            <p>Create your first class to start organizing your lectures and students!</p>
                            <button class="btn btn-success" onclick="showCreateClassModal()">
                                ➕ Create Your First Class
                            </button>
                        </div>
                    {{/if}}
                </div>
            </section>
        </div>

        <!-- Analytics Tab (Unchanged) -->
        <div id="analyticsTab" class="tab-content">
            <div class="analytics-section">
                <div class="section-header">
                    <h2>📊 Enhanced Class Analytics</h2>
                    <button onclick="refreshAnalytics()" class="refresh-btn">
                        🔄 Refresh Data
                    </button>
                </div>

                <!-- Enhanced Charts Grid -->
                <div class="charts-grid">
                    <!-- Chart 1: Performance Distribution -->
                    <div class="chart-container">
                        <div class="chart-wrapper">
                            <canvas id="performanceChart"></canvas>
                        </div>
                    </div>

                    <!-- Chart 2: Student Engagement -->
                    <div class="chart-container">
                        <div class="chart-wrapper">
                            <canvas id="engagementChart"></canvas>
                        </div>
                    </div>
                </div>

                <!-- Insights Panel -->
                <div id="insightsPanel" class="insights-panel">
                    <div class="loading">
                        <div class="loading-spinner"></div>
                        <p>📊 Loading analytics insights...</p>
                    </div>
                </div>

                <!-- Traditional Analytics Tables -->
                <div class="analytics-table">
                    <h3>📋 Recent Quiz Activity</h3>
                    <div id="recentActivityTable">
                        <div class="loading">
                            <div class="loading-spinner"></div>
                            <p>Loading recent activity...</p>
                        </div>
                    </div>
                </div>

                <div class="analytics-table">
                    <h3>🎯 Quiz Performance Breakdown</h3>
                    <div id="quizPerformanceTable">
                        <div class="loading">
                            <div class="loading-spinner"></div>
                            <p>Loading quiz performance...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Students Tab (Unchanged) -->
        <div id="studentsTab" class="tab-content">
            <section class="section">
                <div class="analytics-table">
                    <h3>🏆 Student Rankings (Last 15 Days)</h3>
                    <div id="studentsContainer">
                        <div class="loading">
                            <div class="loading-spinner"></div>
                            <p>🔄 Loading student rankings...</p>
                        </div>
                    </div>
                </div>
            </section>
        </div>
    </main>

    <!-- 🆕 NEW: Create Class Modal -->
    <div id="createClassModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">🏫 Create New Class</h2>
                <button class="close-btn" onclick="hideCreateClassModal()">&times;</button>
            </div>
            <form id="createClassForm">
                <div class="form-group">
                    <label class="form-label">Class Name *</label>
                    <input type="text" id="className" class="form-input" 
                           placeholder="e.g., Physics 101" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Subject *</label>
                    <input type="text" id="classSubject" class="form-input" 
                           placeholder="e.g., Physics" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Description</label>
                    <textarea id="classDescription" class="form-textarea" 
                              placeholder="Brief description of the class (optional)"></textarea>
                </div>
                <div style="display: flex; gap: 1rem; margin-top: 1.5rem;">
                    <button type="button" class="btn" style="background: #64748b;" onclick="hideCreateClassModal()">
                        Cancel
                    </button>
                    <button type="submit" class="btn btn-success" style="flex: 1;">
                        ✅ Create Class
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Global variables
        const professorName = '{{{userName}}}';
        let analyticsData = null;
        let charts = {};

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Enhanced Teacher dashboard initializing...');
            initializeDashboard();
            loadClasses();
        });

        // Initialize dashboard UI
        function initializeDashboard() {
            // Set dynamic greeting
            const hour = new Date().getHours();
            let greeting = 'Good evening';
            if (hour < 12) greeting = 'Good morning';
            else if (hour < 18) greeting = 'Good afternoon';
            
            document.getElementById('dashboardTitle').textContent = `${greeting}, Professor ${professorName}!`;
            
            // Update avatar initials
            const avatar = document.getElementById('profileAvatar');
            const initials = professorName.split(' ').map(name => name.charAt(0)).join('').toUpperCase();
            avatar.textContent = initials;
        }

        // 🆕 NEW: Load classes
        async function loadClasses() {
            try {
                console.log('📚 Loading classes...');
                
                const response = await fetch('/api/classes');
                const result = await response.json();
                
                if (result.success) {
                    console.log('✅ Classes loaded:', result.classes.length);
                    displayClasses(result.classes);
                    updateDashboardStats(result.classes);
                } else {
                    console.error('❌ Failed to load classes:', result.message);
                    showError('Failed to load classes: ' + result.message);
                }
            } catch (error) {
                console.error('❌ Error loading classes:', error);
                showError('Network error while loading classes.');
            }
        }

        // 🆕 NEW: Display classes
        function displayClasses(classes) {
            const container = document.getElementById('classesContainer');
            
            if (classes.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <h3>🏫 No Classes Yet</h3>
                        <p>Create your first class to start organizing your lectures and students!</p>
                        <button class="btn btn-success" onclick="showCreateClassModal()">
                            ➕ Create Your First Class
                        </button>
                    </div>
                `;
                return;
            }

            const classesHTML = classes.map(classItem => `
                <div class="class-card">
                    <div class="class-header">
                        <h3 class="class-name">${classItem.name}</h3>
                        <p class="class-subject">📖 ${classItem.subject}</p>
                        ${classItem.description ? `<p class="class-description">${classItem.description}</p>` : ''}
                    </div>
                    
                    <div class="class-stats">
                        <div class="class-stat">
                            <span class="class-stat-value">${classItem.studentCount}</span>
                            <span class="class-stat-label">Students</span>
                        </div>
                        <div class="class-stat">
                            <span class="class-stat-value">${classItem.lectureCount}</span>
                            <span class="class-stat-label">Lectures</span>
                        </div>
                        <div class="class-stat">
                            <span class="class-stat-value">${classItem.averageScore}%</span>
                            <span class="class-stat-label">Avg Score</span>
                        </div>
                    </div>
                    
                    <div class="class-actions">
                        <a href="/class/manage/${classItem.id}" class="action-button manage-btn">
                            ⚙️ Manage Class
                        </a>
                        <button class="action-button quiz-btn" onclick="redirectToCreateQuiz('${classItem.id}')">
                            🎯 Create Quiz
                        </button>
                    </div>
                </div>
            `).join('');

            container.innerHTML = `<div class="classes-grid">${classesHTML}</div>`;
        }

        // 🆕 NEW: Update dashboard stats
        function updateDashboardStats(classes) {
            const totalClasses = classes.length;
            const totalStudents = classes.reduce((sum, cls) => sum + cls.studentCount, 0);
            const totalLectures = classes.reduce((sum, cls) => sum + cls.lectureCount, 0);
            const totalQuizzes = classes.reduce((sum, cls) => sum + cls.quizCount, 0);

            document.getElementById('totalClassesCount').textContent = totalClasses;
            document.getElementById('totalStudentsCount').textContent = totalStudents;
            document.getElementById('totalLecturesCount').textContent = totalLectures;
            document.getElementById('totalQuizzesCount').textContent = totalQuizzes;
        }

        // 🆕 NEW: Modal functions
        function showCreateClassModal() {
            document.getElementById('createClassModal').classList.add('show');
            document.getElementById('className').focus();
        }

        function hideCreateClassModal() {
            document.getElementById('createClassModal').classList.remove('show');
            document.getElementById('createClassForm').reset();
        }

        // 🆕 NEW: Create class form handler
        document.getElementById('createClassForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = {
                name: document.getElementById('className').value.trim(),
                subject: document.getElementById('classSubject').value.trim(),
                description: document.getElementById('classDescription').value.trim()
            };

            if (!formData.name || !formData.subject) {
                showError('Class name and subject are required.');
                return;
            }

            const submitButton = this.querySelector('button[type="submit"]');
            const originalText = submitButton.textContent;
            
            try {
                submitButton.textContent = '⏳ Creating...';
                submitButton.disabled = true;

                const response = await fetch('/api/classes', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData)
                });

                const result = await response.json();

                if (result.success) {
                    showSuccess(`Class "${result.class.name}" created successfully!`);
                    hideCreateClassModal();
                    loadClasses(); // Refresh the classes list
                } else {
                    showError('Failed to create class: ' + result.message);
                }
            } catch (error) {
                console.error('❌ Error creating class:', error);
                showError('Network error while creating class.');
            } finally {
                submitButton.textContent = originalText;
                submitButton.disabled = false;
            }
        });

        // 🆕 NEW: Redirect to create quiz
        function redirectToCreateQuiz(classId) {
            window.location.href = `/class/manage/${classId}?tab=quizzes`;
        }

        // 🔄 UPDATED: Tab navigation
        function showTab(tabName) {
            // Update navigation
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            document.querySelectorAll('.nav-links a').forEach(link => link.classList.remove('active'));
            event.target.classList.add('active');

            // Update content
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            document.getElementById(tabName + 'Tab').classList.add('active');

            // Load data if needed
            if (tabName === 'analytics' && !analyticsData) {
                loadEnhancedAnalytics();
            }
        }

        // 🆕 NEW: Success/Error message functions
        function showSuccess(message) {
            // Remove existing alerts
            document.querySelectorAll('.alert').forEach(alert => alert.remove());
            
            const messageHTML = `
                <div class="alert alert-success" style="position: fixed; top: 20px; right: 20px; z-index: 1000; max-width: 400px;">
                    <strong>Success!</strong> ${message}
                    <button onclick="this.parentElement.remove()" style="float: right; background: none; border: none; font-size: 18px; cursor: pointer;">&times;</button>
                </div>
            `;
            document.body.insertAdjacentHTML('afterbegin', messageHTML);
            
            setTimeout(() => {
                const alert = document.querySelector('.alert-success');
                if (alert) alert.remove();
            }, 5000);
        }

        function showError(message) {
            // Remove existing alerts
            document.querySelectorAll('.alert').forEach(alert => alert.remove());
            
            const messageHTML = `
                <div class="alert alert-error" style="position: fixed; top: 20px; right: 20px; z-index: 1000; max-width: 400px;">
                    <strong>Error!</strong> ${message}
                    <button onclick="this.parentElement.remove()" style="float: right; background: none; border: none; font-size: 18px; cursor: pointer;">&times;</button>
                </div>
            `;
            document.body.insertAdjacentHTML('afterbegin', messageHTML);
            
            setTimeout(() => {
                const alert = document.querySelector('.alert-error');
                if (alert) alert.remove();
            }, 8000);
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('createClassModal');
            if (event.target === modal) {
                hideCreateClassModal();
            }
        }

        // Close modal with Escape key
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                hideCreateClassModal();
            }
        });

        // ============= ANALYTICS FUNCTIONS (UNCHANGED) =============

        // Load enhanced analytics data
        async function loadEnhancedAnalytics() {
            try {
                console.log('📊 Loading enhanced analytics data...');
                
                // Show loading state
                showLoadingState();
                
                const response = await fetch('/api/teacher/class-analytics');
                const result = await response.json();
                
                if (result.success) {
                    analyticsData = result.data;
                    console.log('✅ Enhanced analytics data loaded:', analyticsData);
                    
                    // Update all components
                    updateStatsCards();
                    createPerformanceDistributionChart();
                    createEngagementLevelsChart();
                    updateInsightsPanel();
                    updateRecentActivityTable();
                    updateQuizPerformanceTable();
                    updateStudentsContent();
                } else {
                    console.error('❌ Failed to load analytics:', result.message);
                    showAnalyticsError('Failed to load analytics data');
                }
            } catch (error) {
                console.error('❌ Error loading analytics:', error);
                showAnalyticsError('Network error while loading analytics');
            }
        }

        function showLoadingState() {
            const containers = ['performanceChart', 'engagementChart'];
            containers.forEach(id => {
                const container = document.getElementById(id);
                if (container) {
                    const canvas = container;
                    const ctx = canvas.getContext('2d');
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                    ctx.fillStyle = '#6b7280';
                    ctx.font = '16px sans-serif';
                    ctx.textAlign = 'center';
                    ctx.fillText('Loading chart...', canvas.width / 2, canvas.height / 2);
                }
            });
        }

        // Update stats cards with enhanced data
        function updateStatsCards() {
            if (!analyticsData) return;

            const stats = analyticsData.overallStats;
            
            document.getElementById('totalStudentsCount').textContent = stats.totalStudents;
        }

        // ENHANCED CHART 1: Performance Distribution (Stacked Bar Chart)
        function createPerformanceDistributionChart() {
            const ctx = document.getElementById('performanceChart');
            if (!ctx || !analyticsData.performanceDistribution) {
                console.log('⚠️ Performance chart container not found or no data');
                return;
            }

            const data = analyticsData.performanceDistribution;
            const metadata = analyticsData.chartMetadata.performanceChart;

            // Destroy existing chart if it exists
            if (charts.performanceChart) {
                charts.performanceChart.destroy();
            }

            charts.performanceChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: data.map(d => d.quizTitle),
                    datasets: [
                        {
                            label: 'Excellent (90-100%)',
                            data: data.map(d => d.excellent),
                            backgroundColor: metadata.colors.excellent,
                            borderColor: metadata.colors.excellent,
                            borderWidth: 1
                        },
                        {
                            label: 'Good (70-89%)',
                            data: data.map(d => d.good),
                            backgroundColor: metadata.colors.good,
                            borderColor: metadata.colors.good,
                            borderWidth: 1
                        },
                        {
                            label: 'Average (50-69%)',
                            data: data.map(d => d.average),
                            backgroundColor: metadata.colors.average,
                            borderColor: metadata.colors.average,
                            borderWidth: 1
                        },
                        {
                            label: 'Needs Help (<50%)',
                            data: data.map(d => d.needsHelp),
                            backgroundColor: metadata.colors.needsHelp,
                            borderColor: metadata.colors.needsHelp,
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: metadata.title,
                            font: { size: 16, weight: 'bold' }
                        },
                        subtitle: {
                            display: true,
                            text: metadata.subtitle,
                            font: { size: 12 },
                            color: '#666'
                        },
                        legend: {
                            position: 'bottom',
                            labels: {
                                padding: 20,
                                usePointStyle: true
                            }
                        },
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                            callbacks: {
                                title: function(context) {
                                    const dataIndex = context[0].dataIndex;
                                    return data[dataIndex].fullTitle;
                                },
                                afterTitle: function(context) {
                                    const dataIndex = context[0].dataIndex;
                                    const quiz = data[dataIndex];
                                    return `Average Score: ${quiz.averageScore}% | Participants: ${quiz.totalParticipants}`;
                                },
                                label: function(context) {
                                    const value = context.parsed.y;
                                    const total = data[context.dataIndex].totalParticipants;
                                    const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;
                                    return `${context.dataset.label}: ${value} students (${percentage}%)`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            stacked: true,
                            title: {
                                display: true,
                                text: 'Quizzes'
                            }
                        },
                        y: {
                            stacked: true,
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Number of Students'
                            },
                            ticks: {
                                stepSize: 1
                            }
                        }
                    },
                    interaction: {
                        mode: 'index',
                        intersect: false,
                    }
                }
            });

            console.log('✅ Performance distribution chart created');
        }

        // ENHANCED CHART 2: Student Engagement Levels (Donut Chart)
        function createEngagementLevelsChart() {
            const ctx = document.getElementById('engagementChart');
            if (!ctx || !analyticsData.engagementLevels) {
                console.log('⚠️ Engagement chart container not found or no data');
                return;
            }

            const data = analyticsData.engagementLevels;
            const metadata = analyticsData.chartMetadata.engagementChart;
            const total = data.highlyActive + data.moderatelyActive + data.lowActivity + data.inactive;

            // Destroy existing chart if it exists
            if (charts.engagementChart) {
                charts.engagementChart.destroy();
            }

            charts.engagementChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: [
                        'Highly Active (80%+)',
                        'Moderately Active (50-79%)', 
                        'Low Activity (20-49%)',
                        'Inactive (<20%)'
                    ],
                    datasets: [{
                        data: [
                            data.highlyActive,
                            data.moderatelyActive,
                            data.lowActivity,
                            data.inactive
                        ],
                        backgroundColor: [
                            metadata.colors.highlyActive,
                            metadata.colors.moderatelyActive,
                            metadata.colors.lowActivity,
                            metadata.colors.inactive
                        ],
                        borderColor: '#ffffff',
                        borderWidth: 2,
                        hoverBorderWidth: 3
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: metadata.title,
                            font: { size: 16, weight: 'bold' }
                        },
                        subtitle: {
                            display: true,
                            text: metadata.subtitle,
                            font: { size: 12 },
                            color: '#666'
                        },
                        legend: {
                            position: 'bottom',
                            labels: {
                                padding: 15,
                                usePointStyle: true,
                                generateLabels: function(chart) {
                                    const dataset = chart.data.datasets[0];
                                    return chart.data.labels.map((label, index) => {
                                        const value = dataset.data[index];
                                        const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;
                                        return {
                                            text: `${label}: ${value} (${percentage}%)`,
                                            fillStyle: dataset.backgroundColor[index],
                                            strokeStyle: dataset.backgroundColor[index],
                                            pointStyle: 'circle'
                                        };
                                    });
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const value = context.parsed;
                                    const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;
                                    return `${context.label}: ${value} students (${percentage}%)`;
                                }
                            }
                        }
                    },
                    cutout: '50%',
                    elements: {
                        arc: {
                            borderWidth: 0
                        }
                    }
                },
                plugins: [{
                    id: 'centerText',
                    beforeDatasetsDraw(chart, args, options) {
                        const { ctx, width, height } = chart;
                        ctx.save();
                        
                        const fontSize = Math.min(width, height) / 15;
                        ctx.font = `bold ${fontSize}px sans-serif`;
                        ctx.fillStyle = '#374151';
                        ctx.textAlign = 'center';
                        ctx.textBaseline = 'middle';
                        
                        const centerX = width / 2;
                        const centerY = height / 2;
                        
                        ctx.fillText(total.toString(), centerX, centerY - 10);
                        
                        ctx.font = `${fontSize * 0.6}px sans-serif`;
                        ctx.fillStyle = '#6B7280';
                        ctx.fillText('Total Students', centerX, centerY + 15);
                        
                        ctx.restore();
                    }
                }]
            });

            console.log('✅ Engagement levels chart created');
        }

        // Update insights panel with actionable information
        function updateInsightsPanel() {
            if (!analyticsData.insights) return;

            const insights = analyticsData.insights;
            const insightsContainer = document.getElementById('insightsPanel');
            
            if (!insightsContainer) {
                console.log('⚠️ Insights panel container not found');
                return;
            }

            const insightsHTML = `
                <div class="insights-grid">
                    <!-- Class Health Score -->
                    <div class="insight-card health-score">
                        <h3>📊 Class Health Score</h3>
                        <div class="metrics">
                            <div class="metric">
                                <span class="label">Engagement:</span>
                                <span class="value ${getHealthColor(insights.classHealthScore.engagement)}">${insights.classHealthScore.engagement}%</span>
                            </div>
                            <div class="metric">
                                <span class="label">Performance:</span>
                                <span class="value ${getHealthColor(insights.classHealthScore.performance)}">${insights.classHealthScore.performance}%</span>
                            </div>
                            <div class="metric">
                                <span class="label">Participation:</span>
                                <span class="value ${getHealthColor(insights.classHealthScore.participation)}">${insights.classHealthScore.participation}%</span>
                            </div>
                        </div>
                    </div>

                    <!-- Quiz Insights -->
                    <div class="insight-card quiz-insights">
                        <h3>🎯 Quiz Insights</h3>
                        ${insights.mostChallengingQuiz ? `
                            <div class="alert alert-warning">
                                <strong>⚠️ Needs Review:</strong><br>
                                "${insights.mostChallengingQuiz.fullTitle}"<br>
                                <small>Average: ${insights.mostChallengingQuiz.averageScore}% | ${insights.mostChallengingQuiz.needsHelp} students struggling</small>
                            </div>
                        ` : ''}
                        ${insights.bestPerformingQuiz ? `
                            <div class="alert alert-success">
                                <strong>✅ Top Performance:</strong><br>
                                "${insights.bestPerformingQuiz.fullTitle}"<br>
                                <small>Average: ${insights.bestPerformingQuiz.averageScore}% | ${insights.bestPerformingQuiz.excellent} students excelled</small>
                            </div>
                        ` : ''}
                    </div>

                    <!-- Students Needing Attention -->
                    <div class="insight-card student-attention">
                        <h3>👥 Students Needing Attention</h3>
                        ${insights.studentsNeedingAttention.length > 0 ? `
                            <div class="student-list">
                                ${insights.studentsNeedingAttention.map(student => `
                                    <div class="student-item">
                                        <span class="name">${student.studentName}</span>
                                        <span class="stats">
                                            ${student.participationRate}% participation | 
                                            Avg: ${student.averageScore}%
                                        </span>
                                    </div>
                                `).join('')}
                            </div>
                        ` : '<p class="no-issues">🎉 All students are actively engaged!</p>'}
                    </div>

                    <!-- Top Performers -->
                    <div class="insight-card top-performers">
                        <h3>🏆 Top Performers</h3>
                        <div class="student-list">
                            ${insights.topPerformers.map(student => `
                                <div class="student-item top-performer">
                                    <span class="rank">#${student.rank}</span>
                                    <span class="name">${student.studentName}</span>
                                    <span class="stats">${student.averageScore}% avg</span>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                </div>
            `;

            insightsContainer.innerHTML = insightsHTML;
            console.log('✅ Insights panel updated');
        }

        // Helper function to determine health color
        function getHealthColor(value) {
            const numValue = parseFloat(value);
            if (numValue >= 80) return 'excellent';
            if (numValue >= 60) return 'good'; 
            if (numValue >= 40) return 'average';
            return 'needs-help';
        }

        // Update recent activity table
        function updateRecentActivityTable() {
            const container = document.getElementById('recentActivityTable');
            if (!container || !analyticsData.recentActivity) return;

            const recentActivity = analyticsData.recentActivity;
            
            if (recentActivity.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #64748b; padding: 2rem;">No recent quiz activity.</p>';
                return;
            }

            const tableRows = recentActivity.map(activity => `
                <tr>
                    <td>${activity.studentName}</td>
                    <td>${activity.quizTitle}</td>
                    <td><strong>${activity.score}%</strong></td>
                    <td>${activity.submissionDate}</td>
                    <td>${activity.timeTaken}</td>
                </tr>
            `).join('');

            container.innerHTML = `
                <table class="table">
                    <thead>
                        <tr>
                            <th>Student</th>
                            <th>Quiz</th>
                            <th>Score</th>
                            <th>Date</th>
                            <th>Time Taken</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${tableRows}
                    </tbody>
                </table>
            `;
        }

        // Update quiz performance table
        function updateQuizPerformanceTable() {
            const container = document.getElementById('quizPerformanceTable');
            if (!container || !analyticsData.quizPerformance) return;

            const quizPerformance = analyticsData.quizPerformance;
            
            if (quizPerformance.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #64748b; padding: 2rem;">No quiz performance data available.</p>';
                return;
            }

            const tableRows = quizPerformance.map(quiz => `
                <tr>
                    <td>${quiz.quizTitle}</td>
                    <td>${quiz.participants}</td>
                    <td><strong>${quiz.averageScore}%</strong></td>
                    <td>${quiz.highestScore}%</td>
                    <td>${quiz.lowestScore}%</td>
                </tr>
            `).join('');

            container.innerHTML = `
                <table class="table">
                    <thead>
                        <tr>
                            <th>Quiz Title</th>
                            <th>Participants</th>
                            <th>Average Score</th>
                            <th>Highest Score</th>
                            <th>Lowest Score</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${tableRows}
                    </tbody>
                </table>
            `;
        }

        // Update students content
        function updateStudentsContent() {
            if (!analyticsData) return;

            const container = document.getElementById('studentsContainer');
            const rankedStudents = analyticsData.rankedStudents || [];
            
            if (rankedStudents.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #64748b; padding: 2rem;">No student data available.</p>';
                return;
            }

            const tableRows = rankedStudents.map(student => {
                const rankClass = student.rank <= 3 ? `rank-${student.rank}` : 'rank-other';
                return `
                    <tr>
                        <td>
                            <span class="rank-badge ${rankClass}">${student.rank}</span>
                        </td>
                        <td>${student.studentName}</td>
                        <td><strong>${student.averageScore}%</strong></td>
                        <td>${student.totalQuizzes}</td>
                        <td>${student.averageTime}</td>
                        <td>
                            <a href="/teacher/student-analytics/${student.studentId}" 
                               class="view-student-btn" target="_blank">
                                View Details
                            </a>
                        </td>
                    </tr>
                `;
            }).join('');

            container.innerHTML = `
                <table class="table">
                    <thead>
                        <tr>
                            <th>Rank</th>
                            <th>Student Name</th>
                            <th>Average Score</th>
                            <th>Quizzes Taken</th>
                            <th>Avg Time</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${tableRows}
                    </tbody>
                </table>
            `;
        }

        // Error handling
        function showAnalyticsError(message) {
            const containers = ['performanceChart', 'engagementChart', 'insightsPanel'];
            containers.forEach(id => {
                const container = document.getElementById(id);
                if (container) {
                    container.innerHTML = `
                        <div class="error-message">
                            <p>❌ ${message}</p>
                            <button onclick="loadEnhancedAnalytics()" class="retry-btn">🔄 Retry</button>
                        </div>
                    `;
                }
            });
        }

        // Refresh analytics data
        function refreshAnalytics() {
            console.log('🔄 Refreshing enhanced analytics...');
            loadEnhancedAnalytics();
        }

        // Auto-refresh analytics every 5 minutes
        setInterval(refreshAnalytics, 5 * 60 * 1000);
    </script>
</body>
</html>