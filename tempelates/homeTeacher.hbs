<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Professor Dashboard - QuizAI</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        /* Reset and Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f8fafc;
            color: #334155;
            line-height: 1.6;
        }

        /* Header Styles */
        .header {
            background: white;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            padding: 1rem 0;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 1.75rem;
            font-weight: bold;
            color: #3b82f6;
        }

        .nav-links {
            display: flex;
            gap: 2rem;
            list-style: none;
        }

        .nav-links a {
            text-decoration: none;
            color: #64748b;
            font-weight: 500;
            transition: color 0.3s ease;
            cursor: pointer;
        }

        .nav-links a:hover, .nav-links a.active {
            color: #3b82f6;
        }

        .profile-section {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .profile-avatar {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, #3b82f6, #8b5cf6);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 1rem;
        }

        .profile-info h3 {
            font-size: 0.9rem;
            font-weight: 600;
            color: #1e293b;
        }

        .profile-info p {
            font-size: 0.75rem;
            color: #64748b;
        }

        .logout-btn {
            background-color: #ef4444;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s ease, transform 0.1s ease;
            font-size: 0.85rem;
            text-decoration: none;
            margin-left: 1rem;
        }

        .logout-btn:hover {
            background-color: #dc2626;
            transform: translateY(-1px);
        }

        /* Main Content */
        .main-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem 1rem;
        }

        .dashboard-title {
            font-size: 2rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 2rem;
        }

        /* Stats Section */
        .stats-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 3rem;
        }

        .stat-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }

        .stat-card.blue { border-left: 4px solid #3b82f6; }
        .stat-card.green { border-left: 4px solid #10b981; }
        .stat-card.purple { border-left: 4px solid #8b5cf6; }
        .stat-card.orange { border-left: 4px solid #f59e0b; }

        .stat-value {
            font-size: 2.25rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .stat-card.blue .stat-value { color: #3b82f6; }
        .stat-card.green .stat-value { color: #10b981; }
        .stat-card.purple .stat-value { color: #8b5cf6; }
        .stat-card.orange .stat-value { color: #f59e0b; }

        .stat-label {
            color: #64748b;
            font-size: 0.9rem;
            font-weight: 500;
        }

        /* Tab Navigation */
        .tab-navigation {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
            border-bottom: 1px solid #e2e8f0;
        }

        .tab-button {
            background: none;
            border: none;
            padding: 0.75rem 1.5rem;
            color: #64748b;
            font-weight: 500;
            cursor: pointer;
            border-bottom: 2px solid transparent;
            transition: all 0.2s ease;
        }

        .tab-button.active {
            color: #3b82f6;
            border-bottom-color: #3b82f6;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        /* Section Styles */
        .section {
            margin-bottom: 3rem;
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 1.5rem;
        }

        /* General Button Styles */
        .btn {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s ease, transform 0.1s ease;
            font-size: 0.9rem;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .btn:hover {
            background: #2563eb;
            transform: translateY(-1px);
        }

        .btn-success {
            background: #10b981;
        }

        .btn-success:hover {
            background: #059669;
        }

        /* Upload Section */
        .upload-section {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            margin-bottom: 3rem;
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
        }

        .upload-section h2 {
            font-size: 1.5rem;
            color: #1e293b;
            margin-bottom: 1rem;
        }

        .upload-input-group {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            max-width: 500px;
            gap: 1rem;
        }

        .upload-input-group input[type="text"],
        .upload-input-group input[type="file"] {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 1px solid #cbd5e1;
            border-radius: 8px;
            font-size: 1rem;
            color: #334155;
        }

        .upload-input-group input[type="file"] {
            border: 2px dashed #cbd5e1;
            background-color: #f0f4f8;
            cursor: pointer;
            text-align: left;
        }

        .upload-input-group input[type="file"]::file-selector-button {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 0.75rem 1rem;
            border-radius: 6px;
            cursor: pointer;
            transition: background-color 0.2s ease;
            margin-right: 1rem;
        }

        .upload-input-group input[type="file"]::file-selector-button:hover {
            background: #2563eb;
        }

        /* Lecture Cards */
        .lectures-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 1.5rem;
        }

        .lecture-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .lecture-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }

        .lecture-title {
            font-size: 1.25rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 0.5rem;
        }

        .lecture-details {
            color: #64748b;
            font-size: 0.9rem;
            margin-bottom: 0.75rem;
        }

        .lecture-status {
            font-size: 0.85rem;
            font-weight: 500;
            margin-bottom: 1rem;
            color: #3b82f6;
        }

        .lecture-status.generated {
            color: #10b981;
        }

        .lecture-status.pending {
            color: #f59e0b;
        }

        .lecture-actions {
            display: flex;
            gap: 0.75rem;
            flex-wrap: wrap;
        }

        .action-button {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 0.75rem 1rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s ease, transform 0.1s ease;
            font-size: 0.85rem;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .action-button:hover {
            background: #2563eb;
            transform: translateY(-1px);
        }

        .action-button.generate-btn {
            background: #f59e0b;
        }
        .action-button.generate-btn:hover {
            background: #d97706;
        }
        .action-button.generate-btn:disabled {
            background: #94a3b8;
            cursor: not-allowed;
        }
        .action-button.view-btn {
            background: #10b981;
        }
        .action-button.view-btn:hover {
            background: #059669;
        }
        .action-button.delete-btn {
            background: #ef4444;
        }
        .action-button.delete-btn:hover {
            background: #dc2626;
        }

        /* Analytics Tables */
        .analytics-table {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
            overflow-x: auto;
        }

        .table {
            width: 100%;
            border-collapse: collapse;
        }

        .table th,
        .table td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }

        .table th {
            background: #f8fafc;
            font-weight: 600;
            color: #1e293b;
        }

        .table tr:hover {
            background: #f8fafc;
        }

        .rank-badge {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: bold;
            min-width: 30px;
            text-align: center;
        }

        .rank-1 { background: #ffd700; color: #1e293b; }
        .rank-2 { background: #c0c0c0; color: #1e293b; }
        .rank-3 { background: #cd7f32; color: white; }
        .rank-other { background: #e2e8f0; color: #64748b; }

        .view-student-btn {
            background: #8b5cf6;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-size: 0.8rem;
            cursor: pointer;
            text-decoration: none;
        }

        .view-student-btn:hover {
            background: #7c3aed;
        }

        /* Charts */
        .charts-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .chart-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .chart-title {
            font-size: 1.1rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 1rem;
        }

        .chart-container {
            position: relative;
            height: 300px;
        }

        /* Success and Error Messages */
        .alert {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            text-align: center;
        }

        .alert-success {
            background-color: #dcfce7;
            color: #16a34a;
            border: 1px solid #86efac;
        }

        .alert-error {
            background-color: #fee2e2;
            color: #dc2626;
            border: 1px solid #fca5a5;
        }

        /* Loading States */
        .loading {
            text-align: center;
            padding: 2rem;
            color: #64748b;
        }

        .loading-spinner {
            border: 4px solid #e2e8f0;
            border-top: 4px solid #3b82f6;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Mobile Responsiveness */
        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                gap: 1rem;
            }

            .nav-links {
                gap: 1rem;
            }

            .dashboard-title {
                font-size: 1.5rem;
            }

            .stats-section {
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 1rem;
            }

            .lectures-grid {
                grid-template-columns: 1fr;
            }

            .lecture-actions {
                flex-direction: column;
                gap: 0.5rem;
            }

            .action-button {
                width: 100%;
            }

            .charts-grid {
                grid-template-columns: 1fr;
            }

            .tab-navigation {
                overflow-x: auto;
                white-space: nowrap;
            }
        }

        @media (max-width: 480px) {
            .main-content {
                padding: 1rem 0.5rem;
            }

            .stat-card,
            .lecture-card,
            .upload-section,
            .chart-card {
                padding: 1rem;
            }

            .chart-container {
                height: 250px;
            }
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="header-content">
            <div class="logo">QuizAI</div>
            <nav>
                <ul class="nav-links">
                    <li><a onclick="showTab('lectures')" class="active">My Lectures</a></li>
                    <li><a onclick="showTab('analytics')">Class Analytics</a></li>
                    <li><a onclick="showTab('students')">Student Rankings</a></li>
                </ul>
            </nav>
            <div class="profile-section">
                <div class="profile-avatar" id="profileAvatar"></div>
                <div class="profile-info">
                    <h3>{{{userName}}}</h3>
                    <p>Professor</p>
                </div>
                <a href="/logout" class="logout-btn">Logout</a>
            </div>
        </div>
    </header>

    <main class="main-content">
        <h1 class="dashboard-title" id="dashboardTitle"></h1>

        {{#if uploadSuccess}}
            <div class="alert alert-success">
                ✅ Lecture "{{uploadedTitle}}" uploaded successfully!
            </div>
        {{/if}}

        {{#if uploadError}}
            <div class="alert alert-error">
                ❌ {{message}}
            </div>
        {{/if}}

        <!-- Enhanced Stats Section with Real Data -->
        <section class="stats-section">
            <div class="stat-card blue">
                <div class="stat-value" id="totalLecturesCount">{{totalLectures}}</div>
                <div class="stat-label">Total Lectures</div>
            </div>
            <div class="stat-card green">
                <div class="stat-value" id="quizzesGeneratedCount">{{quizzesGenerated}}</div>
                <div class="stat-label">Quizzes Generated</div>
            </div>
            <div class="stat-card purple">
                <div class="stat-value" id="totalStudentsCount">-</div>
                <div class="stat-label">Active Students</div>
            </div>
            <div class="stat-card orange">
                <div class="stat-value" id="classAverageScore">-%</div>
                <div class="stat-label">Class Average</div>
            </div>
        </section>

        <!-- Tab Navigation -->
        <div class="tab-navigation">
            <button class="tab-button active" onclick="showTab('lectures')">My Lectures</button>
            <button class="tab-button" onclick="showTab('analytics')">Class Analytics</button>
            <button class="tab-button" onclick="showTab('students')">Student Rankings</button>
        </div>

        <!-- Lectures Tab -->
        <div id="lecturesTab" class="tab-content active">
            <section class="section upload-section">
                <h2 class="section-title">Upload New Lecture for Quiz Generation</h2>
                <form action="/upload_lecture" method="POST" enctype="multipart/form-data" class="upload-input-group">
                    <input type="text" name="title" placeholder="Lecture Title (e.g., 'Introduction to Algorithms')" required>
                    <input type="hidden" name="userName" value="{{{userName}}}">
                    <input type="file" name="lectureFile" accept=".pdf,.ppt,.pptx,.doc,.docx" required>
                    <button type="submit" class="btn btn-success">Upload Lecture & Prepare for Quiz</button>
                </form>
                <p style="margin-top: 1rem; font-size: 0.9rem; color: #64748b;">
                    Supported formats: PDF, PPT, PPTX, DOC, DOCX. Our AI will process this to generate quiz questions.
                </p>
            </section>

            <section class="section">
                <h2 class="section-title">My Lectures</h2>
                {{#if lectures}}
                    <div class="lectures-grid">
                        {{#each lectures}}
                            <div class="lecture-card">
                                <h3 class="lecture-title">{{this.title}}</h3>
                                <p class="lecture-details">Uploaded on: {{this.uploadDate}}</p>
                                <p class="lecture-status {{#if this.quizGenerated}}generated{{else}}pending{{/if}}">
                                    Status: {{#if this.quizGenerated}}Quiz Generated{{else}}Quiz Pending{{/if}}
                                </p>
                                <div class="lecture-actions">
                                    <a href="/lectures/{{this.id}}/view" target="_blank" class="action-button view-btn">View Lecture</a>
                                    {{#unless this.quizGenerated}}
                                        <button class="action-button generate-btn" onclick="generateQuiz('{{this.id}}', event)">Generate Quiz</button>
                                    {{else}}
                                        <a href="/lectures/{{this.id}}/quizzes" class="action-button">View Quizzes</a>
                                    {{/unless}}
                                    <button class="action-button delete-btn" onclick="deleteLecture('{{this.id}}')">Delete</button>
                                </div>
                            </div>
                        {{/each}}
                    </div>
                {{else}}
                    <p>No lectures uploaded yet. Use the section above to upload your first lecture!</p>
                {{/if}}
            </section>
        </div>

        <!-- Analytics Tab -->
        <div id="analyticsTab" class="tab-content">
            <section class="section">
                <div id="analyticsContainer">
                    <div class="loading">
                        <div class="loading-spinner"></div>
                        <p>🔄 Loading class analytics...</p>
                    </div>
                </div>
            </section>
        </div>

        <!-- Students Tab -->
        <div id="studentsTab" class="tab-content">
            <section class="section">
                <div id="studentsContainer">
                    <div class="loading">
                        <div class="loading-spinner"></div>
                        <p>🔄 Loading student rankings...</p>
                    </div>
                </div>
            </section>
        </div>
    </main>

    <script>
        // Global variables
        const professorName = '{{{userName}}}';
        let analyticsData = null;
        let charts = {};

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Teacher dashboard initializing...');
            initializeDashboard();
            loadAnalyticsData();
        });

        // Initialize dashboard UI
        function initializeDashboard() {
            // Set dynamic greeting
            const hour = new Date().getHours();
            let greeting = 'Good evening';
            if (hour < 12) greeting = 'Good morning';
            else if (hour < 18) greeting = 'Good afternoon';
            
            document.getElementById('dashboardTitle').textContent = `${greeting}, Professor ${professorName}!`;
            
            // Update avatar initials
            const avatar = document.getElementById('profileAvatar');
            const initials = professorName.split(' ').map(name => name.charAt(0)).join('').toUpperCase();
            avatar.textContent = initials;
        }

        // Tab navigation
        function showTab(tabName) {
            // Update navigation
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            document.querySelectorAll('.nav-links a').forEach(link => link.classList.remove('active'));
            event.target.classList.add('active');

            // Update content
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            document.getElementById(tabName + 'Tab').classList.add('active');

            // Load data if needed
            if (tabName === 'analytics' && !analyticsData) {
                loadAnalyticsData();
            }
        }

        // Load analytics data
        async function loadAnalyticsData() {
            try {
                console.log('📊 Loading analytics data...');
                const response = await fetch('/api/teacher/class-analytics');
                const data = await response.json();
                
                if (data.success) {
                    analyticsData = data.data;
                    updateStatsCards();
                    updateAnalyticsContent();
                    updateStudentsContent();
                    console.log('✅ Analytics data loaded');
                } else {
                    console.error('❌ Failed to load analytics:', data.message);
                    showErrorState('analytics');
                }
            } catch (error) {
                console.error('❌ Error loading analytics:', error);
                showErrorState('analytics');
            }
        }

        // Update stats cards
        function updateStatsCards() {
            if (!analyticsData) return;

            const stats = analyticsData.overallStats;
            
            document.getElementById('totalStudentsCount').textContent = stats.totalStudents;
            document.getElementById('classAverageScore').textContent = stats.classAverage + '%';
        }

        // Update analytics content
        function updateAnalyticsContent() {
            if (!analyticsData) return;

            const container = document.getElementById('analyticsContainer');
            
            const analyticsHTML = `
                <div class="charts-grid">
                    <!-- Quiz Performance Chart -->
                    <div class="chart-card">
                        <h3 class="chart-title">📊 Quiz Performance Overview</h3>
                        <div class="chart-container">
                            <canvas id="quizPerformanceChart"></canvas>
                        </div>
                    </div>

                    <!-- Student Activity Chart -->
                    <div class="chart-card">
                        <h3 class="chart-title">👥 Student Activity</h3>
                        <div class="chart-container">
                            <canvas id="studentActivityChart"></canvas>
                        </div>
                    </div>
                </div>

                <!-- Recent Activity Table -->
                <div class="analytics-table">
                    <h3 class="chart-title">📋 Recent Quiz Activity</h3>
                    ${createRecentActivityTable()}
                </div>

                <!-- Quiz Performance Table -->
                <div class="analytics-table">
                    <h3 class="chart-title">🎯 Quiz Performance Breakdown</h3>
                    ${createQuizPerformanceTable()}
                </div>
            `;

            container.innerHTML = analyticsHTML;
            
            // Create charts after DOM update
            setTimeout(() => {
                createQuizPerformanceChart();
                createStudentActivityChart();
            }, 100);
        }

        // Update students content
        function updateStudentsContent() {
            if (!analyticsData) return;

            const container = document.getElementById('studentsContainer');
            
            const studentsHTML = `
                <div class="analytics-table">
                    <h3 class="chart-title">🏆 Student Rankings (Last 15 Days)</h3>
                    ${createStudentRankingsTable()}
                </div>
            `;

            container.innerHTML = studentsHTML;
        }

        // Create recent activity table
        function createRecentActivityTable() {
            const recentActivity = analyticsData.recentActivity || [];
            
            if (recentActivity.length === 0) {
                return '<p style="text-align: center; color: #64748b; padding: 2rem;">No recent quiz activity.</p>';
            }

            const tableRows = recentActivity.map(activity => `
                <tr>
                    <td>${activity.studentName}</td>
                    <td>${activity.quizTitle}</td>
                    <td><strong>${activity.score}%</strong></td>
                    <td>${activity.submissionDate}</td>
                    <td>${activity.timeTaken}</td>
                </tr>
            `).join('');

            return `
                <table class="table">
                    <thead>
                        <tr>
                            <th>Student</th>
                            <th>Quiz</th>
                            <th>Score</th>
                            <th>Date</th>
                            <th>Time Taken</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${tableRows}
                    </tbody>
                </table>
            `;
        }

        // Create quiz performance table
        function createQuizPerformanceTable() {
            const quizPerformance = analyticsData.quizPerformance || [];
            
            if (quizPerformance.length === 0) {
                return '<p style="text-align: center; color: #64748b; padding: 2rem;">No quiz performance data available.</p>';
            }

            const tableRows = quizPerformance.map(quiz => `
                <tr>
                    <td>${quiz.quizTitle}</td>
                    <td>${quiz.participants}</td>
                    <td><strong>${quiz.averageScore}%</strong></td>
                    <td>${quiz.highestScore}%</td>
                    <td>${quiz.lowestScore}%</td>
                </tr>
            `).join('');

            return `
                <table class="table">
                    <thead>
                        <tr>
                            <th>Quiz Title</th>
                            <th>Participants</th>
                            <th>Average Score</th>
                            <th>Highest Score</th>
                            <th>Lowest Score</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${tableRows}
                    </tbody>
                </table>
            `;
        }

        // Create student rankings table
        function createStudentRankingsTable() {
            const rankedStudents = analyticsData.rankedStudents || [];
            
            if (rankedStudents.length === 0) {
                return '<p style="text-align: center; color: #64748b; padding: 2rem;">No student data available.</p>';
            }

            const tableRows = rankedStudents.map(student => {
                const rankClass = student.rank <= 3 ? `rank-${student.rank}` : 'rank-other';
                return `
                    <tr>
                        <td>
                            <span class="rank-badge ${rankClass}">${student.rank}</span>
                        </td>
                        <td>${student.studentName}</td>
                        <td><strong>${student.averageScore}%</strong></td>
                        <td>${student.totalQuizzes}</td>
                        <td>${student.averageTime}</td>
                        <td>
                            <a href="/teacher/student-analytics/${student.studentId}" 
                               class="view-student-btn" target="_blank">
                                View Details
                            </a>
                        </td>
                    </tr>
                `;
            }).join('');

            return `
                <table class="table">
                    <thead>
                        <tr>
                            <th>Rank</th>
                            <th>Student Name</th>
                            <th>Average Score</th>
                            <th>Quizzes Taken</th>
                            <th>Avg Time</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${tableRows}
                    </tbody>
                </table>
            `;
        }

        // Create quiz performance chart
        function createQuizPerformanceChart() {
            const ctx = document.getElementById('quizPerformanceChart');
            if (!ctx || charts.quizPerformanceChart) return;

            const quizData = analyticsData.quizPerformance || [];
            
            charts.quizPerformanceChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: quizData.map(q => q.quizTitle.substring(0, 20) + '...'),
                    datasets: [{
                        label: 'Average Score',
                        data: quizData.map(q => parseFloat(q.averageScore)),
                        backgroundColor: 'rgba(59, 130, 246, 0.6)',
                        borderColor: '#3b82f6',
                        borderWidth: 1
                    }, {
                        label: 'Participants',
                        data: quizData.map(q => q.participants),
                        backgroundColor: 'rgba(16, 185, 129, 0.6)',
                        borderColor: '#10b981',
                        borderWidth: 1,
                        yAxisID: 'y1'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            title: {
                                display: true,
                                text: 'Average Score (%)'
                            }
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            title: {
                                display: true,
                                text: 'Participants'
                            },
                            grid: {
                                drawOnChartArea: false,
                            },
                        }
                    }
                }
            });
        }

        // Create student activity chart
        function createStudentActivityChart() {
            const ctx = document.getElementById('studentActivityChart');
            if (!ctx || charts.studentActivityChart) return;

            const studentsData = analyticsData.rankedStudents || [];
            const top5Students = studentsData.slice(0, 5);
            
            charts.studentActivityChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: top5Students.map(s => s.studentName),
                    datasets: [{
                        data: top5Students.map(s => s.totalQuizzes),
                        backgroundColor: [
                            '#3b82f6',
                            '#10b981',
                            '#f59e0b',
                            '#ef4444',
                            '#8b5cf6'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }

        // Existing functions for lecture management
        function generateQuiz(lectureId, event) {
            console.log(`Attempting to generate quiz for lecture: ${lectureId}`);
            
            if (!lectureId) {
                alert('❌ Error: Lecture ID is missing!');
                return;
            }
            
            if (confirm('Are you sure you want to generate a quiz for this lecture? This might take a moment.')) {
                const button = event.target;
                button.disabled = true;
                button.textContent = 'Generating...';
                
                fetch(`/generate_quiz/${lectureId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                .then(response => {
                    console.log('Response status:', response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Response data:', data);
                    if (data.success) {
                        alert(`✅ Quiz generated successfully!\n\n${data.message}\nQuiz ID: ${data.quizId}`);
                        window.location.reload();
                    } else {
                        alert('❌ Failed to generate quiz: ' + (data.message || 'Unknown error.'));
                        button.disabled = false;
                        button.textContent = 'Generate Quiz';
                    }
                })
                .catch(error => {
                    console.error('Error generating quiz:', error);
                    alert('❌ An error occurred during quiz generation: ' + error.message);
                    button.disabled = false;
                    button.textContent = 'Generate Quiz';
                });
            }
        }

        function deleteLecture(lectureId) {
            console.log(`Attempting to delete lecture: ${lectureId}`);
            
            if (!lectureId) {
                alert('❌ Error: Lecture ID is missing!');
                return;
            }
            
            if (confirm('Are you sure you want to delete this lecture and all associated quizzes? This action cannot be undone.')) {
                fetch(`/delete_lecture/${lectureId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        alert('✅ Lecture deleted successfully!');
                        window.location.reload();
                    } else {
                        alert('❌ Failed to delete lecture: ' + (data.message || 'Unknown error.'));
                    }
                })
                .catch(error => {
                    console.error('Error deleting lecture:', error);
                    alert('❌ An error occurred during lecture deletion: ' + error.message);
                });
            }
        }

        function showErrorState(type) {
            console.error(`❌ Error in ${type} section`);
        }

        // Auto-refresh analytics every 60 seconds
        setInterval(() => {
            if (analyticsData) {
                console.log('🔄 Auto-refreshing analytics...');
                loadAnalyticsData();
            }
        }, 60000);
    </script>
</body>
</html>