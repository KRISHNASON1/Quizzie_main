<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Dashboard - QuizAI</title>
    <style>
        /* Reset and Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f8fafc;
            color: #334155;
            line-height: 1.6;
        }

        /* Header Styles */
        .header {
            background: white;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            padding: 1rem 0;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 1.75rem;
            font-weight: bold;
            color: #3b82f6;
        }

        .nav-links {
            display: flex;
            gap: 2rem;
            list-style: none;
        }

        .nav-links a {
            text-decoration: none;
            color: #64748b;
            font-weight: 500;
            transition: color 0.3s ease;
            cursor: pointer;
        }

        .nav-links a:hover {
            color: #3b82f6;
        }

        .profile-section {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .profile-avatar {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, #3b82f6, #8b5cf6);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 1rem;
        }

        .profile-info h3 {
            font-size: 0.9rem;
            font-weight: 600;
            color: #1e293b;
        }

        .profile-info p {
            font-size: 0.75rem;
            color: #64748b;
        }

        .logout-btn {
            background-color: #ef4444;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s ease, transform 0.1s ease;
            font-size: 0.85rem;
            text-decoration: none;
            margin-left: 1rem;
        }

        .logout-btn:hover {
            background-color: #dc2626;
            transform: translateY(-1px);
        }

        /* Main Content */
        .main-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem 1rem;
        }

        .dashboard-title {
            font-size: 2rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 2rem;
        }

        /* Stats Section */
        .stats-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 3rem;
        }

        .stat-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }

        .stat-card.blue { border-left: 4px solid #3b82f6; }
        .stat-card.green { border-left: 4px solid #10b981; }
        .stat-card.purple { border-left: 4px solid #8b5cf6; }
        .stat-card.orange { border-left: 4px solid #f59e0b; }

        .stat-value {
            font-size: 2.25rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .stat-card.blue .stat-value { color: #3b82f6; }
        .stat-card.green .stat-value { color: #10b981; }
        .stat-card.purple .stat-value { color: #8b5cf6; }
        .stat-card.orange .stat-value { color: #f59e0b; }

        .stat-label {
            color: #64748b;
            font-size: 0.9rem;
            font-weight: 500;
        }

        /* Section Styles */
        .section {
            margin-bottom: 3rem;
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 1.5rem;
        }

        /* Quizzes Section */
        .quizzes-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
            gap: 1.5rem;
        }

        .quiz-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .quiz-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }

        .quiz-title {
            font-size: 1.1rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 0.5rem;
        }

        .quiz-details {
            color: #64748b;
            font-size: 0.85rem;
            margin-bottom: 1rem;
        }

        .btn {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s ease, transform 0.1s ease;
            font-size: 0.9rem;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .btn:hover {
            background: #2563eb;
            transform: translateY(-1px);
        }

        .btn-success {
            background: #10b981;
        }

        .btn-success:hover {
            background: #059669;
        }

        /* Loading and Empty States */
        .loading {
            text-align: center;
            padding: 2rem;
            color: #64748b;
        }

        .empty-state {
            text-align: center;
            padding: 3rem;
            color: #64748b;
        }

        .empty-state h3 {
            font-size: 1.25rem;
            margin-bottom: 0.5rem;
            color: #1e293b;
        }

        /* Mobile Responsiveness */
        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                gap: 1rem;
            }

            .nav-links {
                gap: 1rem;
            }

            .dashboard-title {
                font-size: 1.5rem;
            }

            .stats-section {
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 1rem;
            }

            .quizzes-grid {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 480px) {
            .main-content {
                padding: 1rem 0.5rem;
            }

            .stat-card,
            .quiz-card {
                padding: 1rem;
            }
        }
    </style>
</head>
<body>
    <!-- Header Section -->
    <header class="header">
        <div class="header-content">
            <div class="logo">QuizAI</div>
            <nav>
                <ul class="nav-links">
                    <li><a onclick="showSection('quizzes')">Available Quizzes</a></li>
                    <li><a onclick="showSection('performance')">My Performance</a></li>
                </ul>
            </nav>
            <div class="profile-section">
                <div class="profile-avatar" id="profileAvatar"></div>
                <div class="profile-info">
                    <h3>{{userName}}</h3>
                    <p>{{userType}}</p>
                </div>
                <a href="/logout" class="logout-btn">Logout</a>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="main-content">
        <h1 class="dashboard-title" id="dashboardTitle"></h1>

        <!-- Stats Section -->
        <section class="stats-section">
            <div class="stat-card blue">
                <div class="stat-value" id="availableQuizzesCount">-</div>
                <div class="stat-label">Available Quizzes</div>
            </div>
            <div class="stat-card green">
                <div class="stat-value" id="completedQuizzesCount">-</div>
                <div class="stat-label">Quizzes Completed</div>
            </div>
            <div class="stat-card purple">
                <div class="stat-value" id="averageScore">-</div>
                <div class="stat-label">Average Score</div>
            </div>
            <div class="stat-card orange">
                <div class="stat-value" id="bestRank">-</div>
                <div class="stat-label">Best Rank</div>
            </div>
        </section>

        <!-- Available Quizzes Section -->
        <section class="section">
            <h2 class="section-title">Available Quizzes</h2>
            <div id="quizzesContainer">
                <div class="loading">
                    <p>🔄 Loading available quizzes...</p>
                </div>
            </div>
        </section>

        <!-- Recent Performance Section -->
        <section class="section" id="performanceSection" style="display: none;">
            <h2 class="section-title">Recent Performance</h2>
            <div id="performanceContainer">
                <div class="loading">
                    <p>🔄 Loading your performance data...</p>
                </div>
            </div>
        </section>
    </main>

    <script>
        // Get student name from server-side rendered template
        const studentName = '{{{userName}}}';
        let availableQuizzes = [];
        let studentResults = [];
        
        // Navigation functionality
        function showSection(section) {
            console.log(`Navigating to ${section} section`);
            
            // Update navigation styles
            const navLinks = document.querySelectorAll('.nav-links a');
            navLinks.forEach(link => {
                link.style.color = '#64748b';
            });
            
            if (event && event.target) {
                event.target.style.color = '#3b82f6';
            }

            // Show/hide sections based on navigation
            if (section === 'performance') {
                document.getElementById('performanceSection').style.display = 'block';
                loadStudentPerformance();
            } else {
                document.getElementById('performanceSection').style.display = 'none';
            }
        }

        // Load available quizzes from backend
        async function loadAvailableQuizzes() {
            try {
                console.log('🔄 Loading available quizzes...');
                const response = await fetch('/api/student/available-quizzes');
                const data = await response.json();
                
                console.log('📊 Available quizzes response:', data);
                
                if (data.success && data.quizzes) {
                    availableQuizzes = data.quizzes;
                    displayQuizzes(data.quizzes);
                    updateQuizStats(data.quizzes.length);
                } else {
                    console.error('❌ Failed to load quizzes:', data.message);
                    showEmptyQuizzes();
                }
            } catch (error) {
                console.error('❌ Error loading quizzes:', error);
                showErrorQuizzes();
            }
        }

        // Display quizzes in the UI
        function displayQuizzes(quizzes) {
            const container = document.getElementById('quizzesContainer');
            
            if (quizzes.length === 0) {
                showEmptyQuizzes();
                return;
            }

            const quizzesHTML = quizzes.map(quiz => `
                <div class="quiz-card">
                    <h3 class="quiz-title">${quiz.lectureTitle}</h3>
                    <p class="quiz-details">
                        📝 ${quiz.totalQuestions} questions
                        <br>🆔 Quiz ID: ${quiz._id}
                    </p>
                    <button class="btn" onclick="takeQuiz('${quiz._id}', '${quiz.lectureTitle}')">
                        Take Quiz
                    </button>
                </div>
            `).join('');

            container.innerHTML = `
                <div class="quizzes-grid">
                    ${quizzesHTML}
                </div>
            `;
        }

        // Show empty state when no quizzes available
        function showEmptyQuizzes() {
            const container = document.getElementById('quizzesContainer');
            container.innerHTML = `
                <div class="empty-state">
                    <h3>📚 No Quizzes Available Yet</h3>
                    <p>Check back later when your teachers upload new lectures and generate quizzes!</p>
                </div>
            `;
        }

        // Show error state
        function showErrorQuizzes() {
            const container = document.getElementById('quizzesContainer');
            container.innerHTML = `
                <div class="empty-state">
                    <h3>❌ Error Loading Quizzes</h3>
                    <p>There was a problem loading the available quizzes. Please try refreshing the page.</p>
                    <button class="btn" onclick="loadAvailableQuizzes()" style="margin-top: 1rem;">
                        Try Again
                    </button>
                </div>
            `;
        }

        // Update quiz statistics
        function updateQuizStats(availableCount) {
            document.getElementById('availableQuizzesCount').textContent = availableCount;
            // TODO: Load actual student performance data
            document.getElementById('completedQuizzesCount').textContent = '0';
            document.getElementById('averageScore').textContent = '-';
            document.getElementById('bestRank').textContent = '-';
        }

        // Take quiz function
        function takeQuiz(quizId, quizTitle) {
            console.log(`🎯 Taking quiz: ${quizId} - ${quizTitle}`);
            
            if (confirm(`Are you ready to take the quiz: "${quizTitle}"?\n\nOnce started, the quiz timer will begin immediately.`)) {
                // Redirect to quiz taking page
                window.location.href = `/take_quiz/${quizId}`;
            }
        }

        // Load student performance (placeholder for now)
        function loadStudentPerformance() {
            const container = document.getElementById('performanceContainer');
            container.innerHTML = `
                <div class="empty-state">
                    <h3>📊 Performance Tracking</h3>
                    <p>Your quiz results and performance analytics will appear here after you complete some quizzes.</p>
                </div>
            `;
        }

        // Initialize dashboard when page loads
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Student dashboard initializing...');
            
            // Set dynamic greeting based on time
            const hour = new Date().getHours();
            let greeting = 'Good evening';
            if (hour < 12) greeting = 'Good morning';
            else if (hour < 18) greeting = 'Good afternoon';
            
            const title = document.getElementById('dashboardTitle');
            title.textContent = `${greeting}, ${studentName}!`;
            
            // Update avatar initials based on actual name
            const avatar = document.getElementById('profileAvatar');
            const initials = studentName.split(' ').map(name => name.charAt(0)).join('').toUpperCase();
            avatar.textContent = initials;
            
            // Load available quizzes
            loadAvailableQuizzes();
            
            // Add entrance animations for cards
            const cards = document.querySelectorAll('.stat-card, .quiz-card');
            cards.forEach((card, index) => {
                card.style.opacity = '0';
                card.style.transform = 'translateY(20px)';
                
                setTimeout(() => {
                    card.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                }, index * 100);
            });
        });

        // Refresh quizzes periodically (every 30 seconds)
        setInterval(() => {
            console.log('🔄 Auto-refreshing available quizzes...');
            loadAvailableQuizzes();
        }, 30000);
    </script>
</body>
</html>