<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Dashboard - QuizAI</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        /* Reset and Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f8fafc;
            color: #334155;
            line-height: 1.6;
        }

        /* Header Styles */
        .header {
            background: white;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            padding: 1rem 0;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 1.75rem;
            font-weight: bold;
            color: #3b82f6;
        }

        .nav-links {
            display: flex;
            gap: 2rem;
            list-style: none;
        }

        .nav-links a {
            text-decoration: none;
            color: #64748b;
            font-weight: 500;
            transition: color 0.3s ease;
            cursor: pointer;
        }

        .nav-links a:hover, .nav-links a.active {
            color: #3b82f6;
        }

        .profile-section {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .profile-avatar {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, #3b82f6, #8b5cf6);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 1rem;
        }

        .profile-info h3 {
            font-size: 0.9rem;
            font-weight: 600;
            color: #1e293b;
        }

        .profile-info p {
            font-size: 0.75rem;
            color: #64748b;
        }

        .logout-btn {
            background-color: #ef4444;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s ease, transform 0.1s ease;
            font-size: 0.85rem;
            text-decoration: none;
            margin-left: 1rem;
        }

        .logout-btn:hover {
            background-color: #dc2626;
            transform: translateY(-1px);
        }

        /* Main Content */
        .main-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem 1rem;
        }

        .dashboard-title {
            font-size: 2rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 2rem;
        }

        /* Stats Section */
        .stats-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 3rem;
        }

        .stat-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            position: relative;
        }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }

        .stat-card.blue { border-left: 4px solid #3b82f6; }
        .stat-card.green { border-left: 4px solid #10b981; }
        .stat-card.purple { border-left: 4px solid #8b5cf6; }
        .stat-card.orange { border-left: 4px solid #f59e0b; }

        .stat-value {
            font-size: 2.25rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .stat-card.blue .stat-value { color: #3b82f6; }
        .stat-card.green .stat-value { color: #10b981; }
        .stat-card.purple .stat-value { color: #8b5cf6; }
        .stat-card.orange .stat-value { color: #f59e0b; }

        .stat-label {
            color: #64748b;
            font-size: 0.9rem;
            font-weight: 500;
        }

        .trend-indicator {
            font-size: 1.5rem;
            margin-left: 0.5rem;
        }

        .comparison {
            font-size: 0.8rem;
            color: #64748b;
            margin-top: 0.25rem;
        }

        /* Section Styles */
        .section {
            margin-bottom: 3rem;
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 1.5rem;
        }

        /* Tab Navigation */
        .tab-navigation {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
            border-bottom: 1px solid #e2e8f0;
        }

        .tab-button {
            background: none;
            border: none;
            padding: 0.75rem 1.5rem;
            color: #64748b;
            font-weight: 500;
            cursor: pointer;
            border-bottom: 2px solid transparent;
            transition: all 0.2s ease;
        }

        .tab-button.active {
            color: #3b82f6;
            border-bottom-color: #3b82f6;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        /* 🆕 CLASS CARDS */
        .classes-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 1.5rem;
        }

        .class-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            border-left: 4px solid #3b82f6;
        }

        .class-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }

        .class-header {
            margin-bottom: 1rem;
        }

        .class-name {
            font-size: 1.25rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 0.25rem;
        }

        .class-subject {
            font-size: 0.9rem;
            color: #3b82f6;
            font-weight: 500;
            margin-bottom: 0.5rem;
        }

        .class-teacher {
            font-size: 0.85rem;
            color: #64748b;
        }

        /* 🆕 CLASS STATS */
        .class-stats {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 0.75rem;
            margin: 1rem 0;
            padding: 1rem;
            background: #f8fafc;
            border-radius: 8px;
        }

        .class-stat {
            text-align: center;
        }

        .class-stat-value {
            font-size: 1.1rem;
            font-weight: bold;
            color: #3b82f6;
            display: block;
        }

        .class-stat-label {
            font-size: 0.75rem;
            color: #64748b;
            margin-top: 0.25rem;
        }

        /* 🆕 QUIZ SECTION IN CLASS CARD */
        .class-quizzes {
            margin-top: 1rem;
        }

        .class-quizzes-title {
            font-size: 0.9rem;
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 0.75rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .quiz-list {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .quiz-item {
            display: flex;
            justify-content: between;
            align-items: center;
            padding: 0.75rem;
            background: white;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            transition: all 0.2s ease;
        }

        .quiz-item:hover {
            border-color: #3b82f6;
            background: #f8fafc;
        }

        .quiz-info {
            flex: 1;
        }

        .quiz-title {
            font-size: 0.9rem;
            font-weight: 500;
            color: #1e293b;
            margin-bottom: 0.25rem;
        }

        .quiz-meta {
            font-size: 0.75rem;
            color: #64748b;
        }

        .quiz-action {
            margin-left: 1rem;
        }

        .btn {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s ease, transform 0.1s ease;
            font-size: 0.8rem;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .btn:hover {
            background: #2563eb;
            transform: translateY(-1px);
        }

        .btn-sm {
            padding: 0.4rem 0.8rem;
            font-size: 0.75rem;
        }

        /* Charts Container */
        .charts-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .chart-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .chart-title {
            font-size: 1.1rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 1rem;
        }

        .chart-container {
            position: relative;
            height: 300px;
        }

        /* Tables */
        .data-table {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            overflow-x: auto;
        }

        .table {
            width: 100%;
            border-collapse: collapse;
        }

        .table th,
        .table td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }

        .table th {
            background: #f8fafc;
            font-weight: 600;
            color: #1e293b;
        }

        .table tr:hover {
            background: #f8fafc;
        }

        /* Top Performers */
        .top-performers {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .performer-item {
            display: flex;
            align-items: center;
            padding: 1rem 0;
            border-bottom: 1px solid #e2e8f0;
        }

        .performer-item:last-child {
            border-bottom: none;
        }

        .rank-badge {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            margin-right: 1rem;
        }

        .rank-1 { background: #ffd700; color: #1e293b; }
        .rank-2 { background: #c0c0c0; color: #1e293b; }
        .rank-3 { background: #cd7f32; color: white; }

        .performer-info {
            flex: 1;
        }

        .performer-name {
            font-weight: 600;
            color: #1e293b;
        }

        .performer-stats {
            font-size: 0.85rem;
            color: #64748b;
        }

        .performer-score {
            font-size: 1.1rem;
            font-weight: bold;
            color: #10b981;
        }

        /* Loading States */
        .loading {
            text-align: center;
            padding: 2rem;
            color: #64748b;
        }

        .loading-spinner {
            border: 4px solid #e2e8f0;
            border-top: 4px solid #3b82f6;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Empty States */
        .empty-state {
            text-align: center;
            padding: 3rem;
            color: #64748b;
        }

        .empty-state h3 {
            font-size: 1.25rem;
            margin-bottom: 0.5rem;
            color: #1e293b;
        }

        .no-quizzes {
            text-align: center;
            padding: 1rem;
            color: #64748b;
            font-size: 0.85rem;
            background: #f8fafc;
            border-radius: 6px;
            margin-top: 0.5rem;
        }

        /* Alerts */
        .alert {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
        }

        .alert-info {
            background-color: #dbeafe;
            color: #1e40af;
            border: 1px solid #93c5fd;
        }

        .alert-warning {
            background-color: #fef3c7;
            color: #92400e;
            border: 1px solid #fcd34d;
        }

        /* Mobile Responsiveness */
        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                gap: 1rem;
            }

            .nav-links {
                gap: 1rem;
            }

            .dashboard-title {
                font-size: 1.5rem;
            }

            .stats-section {
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 1rem;
            }

            .classes-grid {
                grid-template-columns: 1fr;
            }

            .charts-grid {
                grid-template-columns: 1fr;
            }

            .tab-navigation {
                overflow-x: auto;
                white-space: nowrap;
            }

            .class-stats {
                grid-template-columns: 1fr;
            }

            .quiz-item {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.5rem;
            }

            .quiz-action {
                margin-left: 0;
                width: 100%;
            }

            .btn {
                width: 100%;
            }
        }

        @media (max-width: 480px) {
            .main-content {
                padding: 1rem 0.5rem;
            }

            .stat-card,
            .class-card,
            .chart-card {
                padding: 1rem;
            }

            .chart-container {
                height: 250px;
            }
        }
    </style>
</head>
<body>
    <!-- Header Section -->
    <header class="header">
        <div class="header-content">
            <div class="logo">QuizAI</div>
            <nav>
                <ul class="nav-links">
                    <li><a onclick="showTab('classes')" class="active">My Classes</a></li>
                    <li><a onclick="showTab('performance')">Performance</a></li>
                    <li><a onclick="showTab('rankings')">Rankings</a></li>
                </ul>
            </nav>
            <div class="profile-section">
                <div class="profile-avatar" id="profileAvatar"></div>
                <div class="profile-info">
                    <h3>{{userName}}</h3>
                    <p>{{userType}}</p>
                </div>
                <a href="/logout" class="logout-btn">Logout</a>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="main-content">
        <h1 class="dashboard-title" id="dashboardTitle"></h1>

        <!-- Stats Section -->
        <section class="stats-section">
            <div class="stat-card blue">
                <div class="stat-value">
                    <span id="enrolledClassesCount">-</span>
                </div>
                <div class="stat-label">Enrolled Classes</div>
                <div class="comparison" id="enrollmentInfo">Your courses</div>
            </div>
            <div class="stat-card green">
                <div class="stat-value">
                    <span id="averageScore">-%</span>
                    <span class="trend-indicator" id="trendIndicator">→</span>
                </div>
                <div class="stat-label">Overall Average</div>
                <div class="comparison" id="scoreComparison">Last 15 days</div>
            </div>
            <div class="stat-card purple">
                <div class="stat-value" id="currentRank">-</div>
                <div class="stat-label">Your Rank</div>
                <div class="comparison" id="rankComparison">Out of - students</div>
            </div>
            <div class="stat-card orange">
                <div class="stat-value" id="availableQuizzesCount">-</div>
                <div class="stat-label">Available Quizzes</div>
                <div class="comparison">Ready to take</div>
            </div>
        </section>

        <!-- Tab Navigation -->
        <div class="tab-navigation">
            <button class="tab-button active" onclick="showTab('classes')">My Classes</button>
            <button class="tab-button" onclick="showTab('performance')">My Performance</button>
            <button class="tab-button" onclick="showTab('rankings')">Class Rankings</button>
        </div>

        <!-- 🆕 My Classes Tab -->
        <div id="classesTab" class="tab-content active">
            <section class="section">
                <div id="classesContainer">
                    <div class="loading">
                        <div class="loading-spinner"></div>
                        <p>🔄 Loading your enrolled classes...</p>
                    </div>
                </div>
            </section>
        </div>

        <!-- Performance Tab -->
        <div id="performanceTab" class="tab-content">
            <section class="section">
                <!-- Charts Grid -->
                <div class="charts-grid">
                    <!-- Score Trend Chart -->
                    <div class="chart-card">
                        <h3 class="chart-title">📈 Score Trends</h3>
                        <div class="chart-container">
                            <canvas id="scoreTrendChart"></canvas>
                        </div>
                    </div>

                    <!-- Performance Breakdown Pie Chart -->
                    <div class="chart-card">
                        <h3 class="chart-title">📊 Performance Breakdown</h3>
                        <div class="chart-container">
                            <canvas id="performanceBreakdownChart"></canvas>
                        </div>
                    </div>
                </div>

                <!-- Recent Quiz Results Table -->
                <div class="data-table">
                    <h3 class="chart-title">📋 Recent Quiz Results</h3>
                    <div id="recentResultsContainer">
                        <div class="loading">
                            <div class="loading-spinner"></div>
                            <p>Loading recent results...</p>
                        </div>
                    </div>
                </div>
            </section>
        </div>

        <!-- Rankings Tab -->
        <div id="rankingsTab" class="tab-content">
            <section class="section">
                <div class="top-performers">
                    <h3 class="chart-title">🏆 Top Performers (Last 15 Days)</h3>
                    <div id="topPerformersContainer">
                        <div class="loading">
                            <div class="loading-spinner"></div>
                            <p>Loading rankings...</p>
                        </div>
                    </div>
                </div>
            </section>
        </div>
    </main>

    <script>
        // Global variables
        const studentName = '{{{userName}}}';
        let performanceData = null;
        let enrolledClasses = [];
        let charts = {};

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Student dashboard initializing...');
            initializeDashboard();
            loadEnrolledClasses();
            loadPerformanceData();
        });

        // Initialize dashboard UI
        function initializeDashboard() {
            // Set dynamic greeting
            const hour = new Date().getHours();
            let greeting = 'Good evening';
            if (hour < 12) greeting = 'Good morning';
            else if (hour < 18) greeting = 'Good afternoon';
            
            document.getElementById('dashboardTitle').textContent = `${greeting}, ${studentName}!`;
            
            // Update avatar initials
            const avatar = document.getElementById('profileAvatar');
            const initials = studentName.split(' ').map(name => name.charAt(0)).join('').toUpperCase();
            avatar.textContent = initials;
        }

        // 🆕 NEW: Load enrolled classes
        async function loadEnrolledClasses() {
            try {
                console.log('🏫 Loading enrolled classes...');
                const response = await fetch('/api/student/enrolled-classes');
                const data = await response.json();
                
                if (data.success) {
                    enrolledClasses = data.classes;
                    displayEnrolledClasses(data.classes);
                    updateClassStats(data.classes);
                    console.log('✅ Enrolled classes loaded:', data.classes.length);
                } else {
                    console.error('❌ Failed to load enrolled classes:', data.message);
                    showEmptyClasses();
                }
            } catch (error) {
                console.error('❌ Error loading enrolled classes:', error);
                showErrorClasses();
            }
        }

        // 🆕 NEW: Display enrolled classes
        function displayEnrolledClasses(classes) {
            const container = document.getElementById('classesContainer');
            
            if (classes.length === 0) {
                showEmptyClasses();
                return;
            }

            const classesHTML = classes.map(classItem => `
                <div class="class-card">
                    <div class="class-header">
                        <h3 class="class-name">${classItem.className}</h3>
                        <p class="class-subject">📖 ${classItem.classSubject}</p>
                        <p class="class-teacher">👨‍🏫 ${classItem.teacherName}</p>
                    </div>
                    
                    <div class="class-stats">
                        <div class="class-stat">
                            <span class="class-stat-value">${classItem.quizzesTaken || 0}</span>
                            <span class="class-stat-label">Quizzes Taken</span>
                        </div>
                        <div class="class-stat">
                            <span class="class-stat-value">${classItem.averageScore || 0}%</span>
                            <span class="class-stat-label">Average Score</span>
                        </div>
                        <div class="class-stat">
                            <span class="class-stat-value">${classItem.availableQuizzes || 0}</span>
                            <span class="class-stat-label">Available</span>
                        </div>
                    </div>
                    
                    <div class="class-quizzes">
                        <div class="class-quizzes-title">
                            🎯 Available Quizzes
                        </div>
                        <div class="quiz-list" id="quizList-${classItem.classId}">
                            <div class="loading" style="padding: 1rem;">Loading quizzes...</div>
                        </div>
                    </div>
                </div>
            `).join('');

            container.innerHTML = `<div class="classes-grid">${classesHTML}</div>`;

            // Load quizzes for each class
            classes.forEach(classItem => {
                loadClassQuizzes(classItem.classId);
            });
        }

        // 🆕 NEW: Load quizzes for a specific class
        async function loadClassQuizzes(classId) {
            try {
                const response = await fetch(`/api/student/class/${classId}/quizzes`);
                const data = await response.json();
                
                const container = document.getElementById(`quizList-${classId}`);
                
                if (data.success && data.quizzes.length > 0) {
                    const quizzesHTML = data.quizzes.map(quiz => `
                        <div class="quiz-item">
                            <div class="quiz-info">
                                <div class="quiz-title">${quiz.lectureTitle}</div>
                                <div class="quiz-meta">📝 ${quiz.totalQuestions} questions</div>
                            </div>
                            <div class="quiz-action">
                                <button class="btn btn-sm" onclick="takeQuiz('${quiz._id}', '${quiz.lectureTitle}', '${classId}')">
                                    Take Quiz
                                </button>
                            </div>
                        </div>
                    `).join('');
                    
                    container.innerHTML = quizzesHTML;
                } else {
                    container.innerHTML = `
                        <div class="no-quizzes">
                            📚 No quizzes available yet
                        </div>
                    `;
                }
            } catch (error) {
                console.error('❌ Error loading class quizzes:', error);
                const container = document.getElementById(`quizList-${classId}`);
                container.innerHTML = `
                    <div class="no-quizzes">
                        ❌ Error loading quizzes
                    </div>
                `;
            }
        }

        // 🆕 NEW: Update class-related stats
        function updateClassStats(classes) {
            const totalClasses = classes.length;
            const totalAvailableQuizzes = classes.reduce((sum, cls) => sum + (cls.availableQuizzes || 0), 0);
            
            document.getElementById('enrolledClassesCount').textContent = totalClasses;
            document.getElementById('availableQuizzesCount').textContent = totalAvailableQuizzes;
            document.getElementById('enrollmentInfo').textContent = totalClasses === 1 ? '1 course' : `${totalClasses} courses`;
        }

        // Tab navigation
        function showTab(tabName) {
            // Update navigation
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            document.querySelectorAll('.nav-links a').forEach(link => link.classList.remove('active'));
            event.target.classList.add('active');

            // Update content
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            document.getElementById(tabName + 'Tab').classList.add('active');

            // Load data if needed
            if (tabName === 'performance' && !charts.scoreTrendChart) {
                setTimeout(createCharts, 100);
            }
        }

        // Load performance data
        async function loadPerformanceData() {
            try {
                console.log('📊 Loading performance data...');
                const response = await fetch('/api/student/performance-data');
                const data = await response.json();
                
                if (data.success) {
                    performanceData = data.data;
                    updatePerformanceStats();
                    updateRecentResults();
                    updateTopPerformers();
                    console.log('✅ Performance data loaded');
                } else {
                    console.error('❌ Failed to load performance data:', data.message);
                    showErrorState('performance');
                }
            } catch (error) {
                console.error('❌ Error loading performance data:', error);
                showErrorState('performance');
            }
        }

        // Update performance stats
        function updatePerformanceStats() {
            if (!performanceData) return;

            const stats = performanceData.studentStats;
            
            document.getElementById('averageScore').textContent = stats.averageScore + '%';
            document.getElementById('trendIndicator').textContent = stats.trendIndicator;
            document.getElementById('scoreComparison').textContent = `Class avg: ${stats.classAverage}%`;
            document.getElementById('currentRank').textContent = `#${stats.currentRank}`;
            document.getElementById('rankComparison').textContent = `Out of ${stats.totalStudents} students`;
        }

        // Update recent results
        function updateRecentResults() {
            if (!performanceData?.recentResults) return;

            const container = document.getElementById('recentResultsContainer');
            const results = performanceData.recentResults;

            if (results.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <h3>📝 No Quiz Results Yet</h3>
                        <p>Take some quizzes to see your performance history!</p>
                    </div>
                `;
                return;
            }

            const tableHTML = `
                <table class="table">
                    <thead>
                        <tr>
                            <th>Quiz</th>
                            <th>Score</th>
                            <th>Date</th>
                            <th>Time Taken</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${results.map(result => `
                            <tr>
                                <td>${result.quizTitle}</td>
                                <td><strong>${result.score}%</strong></td>
                                <td>${result.submissionDate}</td>
                                <td>${result.timeTaken}</td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            `;

            container.innerHTML = tableHTML;
        }

        // Update top performers
        function updateTopPerformers() {
            if (!performanceData?.top3Performers) return;

            const container = document.getElementById('topPerformersContainer');
            const performers = performanceData.top3Performers;

            if (performers.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <h3>🏆 No Rankings Yet</h3>
                        <p>Be the first to take quizzes and appear on the leaderboard!</p>
                    </div>
                `;
                return;
            }

            const performersHTML = performers.map(performer => `
                <div class="performer-item">
                    <div class="rank-badge rank-${performer.rank}">${performer.rank}</div>
                    <div class="performer-info">
                        <div class="performer-name">${performer.name}</div>
                        <div class="performer-stats">${performer.totalQuizzes} quizzes completed</div>
                    </div>
                    <div class="performer-score">${performer.averageScore}%</div>
                </div>
            `).join('');

            container.innerHTML = performersHTML;
        }

        // Create charts
        function createCharts() {
            if (!performanceData) return;

            createScoreTrendChart();
            createPerformanceBreakdownChart();
        }

        // Create score trend chart
        function createScoreTrendChart() {
            const ctx = document.getElementById('scoreTrendChart');
            if (!ctx || charts.scoreTrendChart) return;

            const trendData = performanceData.trendData || [];
            const classAverage = performanceData.studentStats.classAverage;

            charts.scoreTrendChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: trendData.map(d => d.date),
                    datasets: [{
                        label: 'Your Scores',
                        data: trendData.map(d => d.score),
                        borderColor: '#3b82f6',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        tension: 0.4,
                        fill: true
                    }, {
                        label: 'Class Average',
                        data: trendData.map(() => classAverage),
                        borderColor: '#64748b',
                        backgroundColor: 'transparent',
                        borderDash: [5, 5],
                        tension: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            ticks: {
                                callback: function(value) {
                                    return value + '%';
                                }
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            position: 'top'
                        }
                    }
                }
            });
        }

        // Create performance breakdown chart
        function createPerformanceBreakdownChart() {
            const ctx = document.getElementById('performanceBreakdownChart');
            if (!ctx || charts.performanceBreakdownChart) return;

            const breakdown = performanceData.performanceBreakdown || {};

            charts.performanceBreakdownChart = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: ['Excellent (90%+)', 'Good (70-89%)', 'Average (50-69%)', 'Needs Improvement (<50%)'],
                    datasets: [{
                        data: [
                            breakdown.excellent || 0,
                            breakdown.good || 0,
                            breakdown.average || 0,
                            breakdown.needsImprovement || 0
                        ],
                        backgroundColor: [
                            '#10b981',
                            '#3b82f6',
                            '#f59e0b',
                            '#ef4444'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }

        // 🔄 UPDATED: Quiz function with class context
        function takeQuiz(quizId, quizTitle, classId) {
            console.log(`🎯 Taking quiz: ${quizId} - ${quizTitle} from class ${classId}`);
            
            if (confirm(`Are you ready to take the quiz: "${quizTitle}"?\n\nOnce started, the quiz timer will begin immediately.`)) {
                window.location.href = `/take_quiz/${quizId}?classId=${classId}`;
            }
        }

        // Error states
        function showEmptyClasses() {
            const container = document.getElementById('classesContainer');
            container.innerHTML = `
                <div class="empty-state">
                    <h3>🏫 No Classes Enrolled</h3>
                    <p>You haven't been enrolled in any classes yet. Please contact your teachers to get enrolled.</p>
                    <div class="alert alert-info" style="margin-top: 1rem;">
                        <strong>How to get enrolled:</strong><br>
                        Ask your teacher to add you to their class using your enrollment number.
                    </div>
                </div>
            `;
        }

        function showErrorClasses() {
            const container = document.getElementById('classesContainer');
            container.innerHTML = `
                <div class="empty-state">
                    <h3>❌ Error Loading Classes</h3>
                    <p>There was a problem loading your enrolled classes. Please try refreshing the page.</p>
                    <button class="btn" onclick="loadEnrolledClasses()" style="margin-top: 1rem;">
                        Try Again
                    </button>
                </div>
            `;
        }

        function showErrorState(type) {
            console.error(`❌ Error in ${type} section`);
        }

        // Auto-refresh data every 30 seconds
        setInterval(() => {
            console.log('🔄 Auto-refreshing data...');
            loadEnrolledClasses();
            loadPerformanceData();
        }, 30000);
    </script>
</body>
</html>