<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Dashboard - Quizzie</title>
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        /* Reset and Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f8fafc;
            color: #334155;
            line-height: 1.6;
        }

        /* Header Styles */
        .header {
            background: white;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            padding: 1rem 0;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 1.75rem;
            font-weight: bold;
            color: #3b82f6;
        }

        .nav-links {
            display: flex;
            gap: 2rem;
            list-style: none;
        }

        .nav-links a {
            text-decoration: none;
            color: #64748b;
            font-weight: 500;
            transition: color 0.3s ease;
            cursor: pointer;
        }

        .nav-links a:hover, .nav-links a.active {
            color: #3b82f6;
        }

        .profile-section {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .profile-avatar {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, #3b82f6, #8b5cf6);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 1rem;
        }

        .profile-info h3 {
            font-size: 0.9rem;
            font-weight: 600;
            color: #1e293b;
        }

        .profile-info p {
            font-size: 0.75rem;
            color: #64748b;
        }

        .logout-btn {
            background-color: #ef4444;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s ease, transform 0.1s ease;
            font-size: 0.85rem;
            text-decoration: none;
            margin-left: 1rem;
        }

        .logout-btn:hover {
            background-color: #dc2626;
            transform: translateY(-1px);
        }

        /* Main Content */
        .main-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem 1rem;
        }

        .dashboard-title {
            font-size: 2rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 2rem;
        }

        /* Stats Section - UPDATED */
        .stats-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 3rem;
        }

        .stat-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            position: relative;
        }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }

        .stat-card.blue { border-left: 4px solid #3b82f6; }
        .stat-card.green { border-left: 4px solid #10b981; }
        .stat-card.purple { border-left: 4px solid #8b5cf6; }
        .stat-card.orange { border-left: 4px solid #f59e0b; }

        .stat-value {
            font-size: 2.25rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .stat-card.blue .stat-value { color: #3b82f6; }
        .stat-card.green .stat-value { color: #10b981; }
        .stat-card.purple .stat-value { color: #8b5cf6; }
        .stat-card.orange .stat-value { color: #f59e0b; }

        .stat-label {
            color: #64748b;
            font-size: 0.9rem;
            font-weight: 500;
        }

        .trend-indicator {
            font-size: 1.5rem;
            margin-left: 0.5rem;
        }

        .comparison {
            font-size: 0.8rem;
            color: #64748b;
            margin-top: 0.25rem;
        }

        /* Section Styles */
        .section {
            margin-bottom: 3rem;
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 1.5rem;
        }

        /* UPDATED CLASS CARDS - New Design */
        .classes-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 1.5rem;
        }

        .class-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            border-left: 4px solid #3b82f6;
        }

        .class-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }

        .class-header {
            margin-bottom: 1rem;
        }

        /* NEW: Subject name is now the main title */
        .class-subject {
            font-size: 1.4rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .subject-emoji {
            font-size: 1.6rem;
        }

        /* NEW: Class name is now smaller subtitle */
        .class-name {
            font-size: 1rem;
            color: #3b82f6;
            font-weight: 500;
            margin-bottom: 0.25rem;
        }

        .class-teacher {
            font-size: 0.85rem;
            color: #64748b;
        }

        /* Class stats remain the same */
        .class-stats {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 0.75rem;
            margin: 1rem 0;
            padding: 1rem;
            background: #f8fafc;
            border-radius: 8px;
        }

        .class-stat {
            text-align: center;
        }

        .class-stat-value {
            font-size: 1.1rem;
            font-weight: bold;
            color: #3b82f6;
            display: block;
        }

        .class-stat-label {
            font-size: 0.75rem;
            color: #64748b;
            margin-top: 0.25rem;
        }

        /* UPDATED: Recent Quiz Section */
        .class-recent-quiz {
            margin-top: 1rem;
            padding: 1rem;
            background: white;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
        }

        .recent-quiz-title {
            font-size: 0.9rem;
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 0.75rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .recent-quiz-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.75rem;
        }

        .quiz-info {
            flex: 1;
        }

        .quiz-title {
            font-size: 0.9rem;
            font-weight: 500;
            color: #1e293b;
            margin-bottom: 0.25rem;
        }

        .quiz-meta {
            font-size: 0.75rem;
            color: #64748b;
        }

        .quiz-action {
            margin-left: 1rem;
        }

        /* NEW: Action Buttons Row */
        .class-actions {
            display: flex;
            gap: 0.75rem;
            margin-top: 1rem;
        }

        .btn {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s ease, transform 0.1s ease;
            font-size: 0.8rem;
            text-decoration: none;
            display: inline-block;
            text-align: center;
            flex: 1;
        }

        .btn:hover {
            background: #2563eb;
            transform: translateY(-1px);
        }

        .btn-secondary {
            background: #6b7280;
        }

        .btn-secondary:hover {
            background: #4b5563;
        }

        .btn-sm {
            padding: 0.4rem 0.8rem;
            font-size: 0.75rem;
            flex: none;
        }

        /* No quiz available state */
        .no-recent-quiz {
            text-align: center;
            padding: 1rem;
            color: #64748b;
            font-size: 0.85rem;
            background: #f8fafc;
            border-radius: 6px;
            margin-top: 0.5rem;
        }

        /* Loading States */
        .loading {
            text-align: center;
            padding: 2rem;
            color: #64748b;
        }

        .loading-spinner {
            border: 4px solid #e2e8f0;
            border-top: 4px solid #3b82f6;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Empty States */
        .empty-state {
            text-align: center;
            padding: 3rem;
            color: #64748b;
        }

        .empty-state h3 {
            font-size: 1.25rem;
            margin-bottom: 0.5rem;
            color: #1e293b;
        }

        /* Alerts */
        .alert {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
        }

        .alert-info {
            background-color: #dbeafe;
            color: #1e40af;
            border: 1px solid #93c5fd;
        }

        .alert-warning {
            background-color: #fef3c7;
            color: #92400e;
            border: 1px solid #fcd34d;
        }

        /* Mobile Responsiveness */
        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                gap: 1rem;
            }

            .dashboard-title {
                font-size: 1.5rem;
            }

            .stats-section {
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 1rem;
            }

            .classes-grid {
                grid-template-columns: 1fr;
            }

            .class-stats {
                grid-template-columns: 1fr;
            }

            .recent-quiz-item {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.5rem;
            }

            .quiz-action {
                margin-left: 0;
                width: 100%;
            }

            .class-actions {
                flex-direction: column;
            }

            .btn {
                width: 100%;
                flex: none;
            }
        }

        @media (max-width: 480px) {
            .main-content {
                padding: 1rem 0.5rem;
            }

            .stat-card,
            .class-card {
                padding: 1rem;
            }
        }
    </style>
</head>
<body>
    <!-- Header Section -->
    <header class="header">
        <div class="header-content">
            <div class="logo">Quizzie</div>
            <nav>
                <ul class="nav-links">
                    <li><a class="active">My Classes</a></li>
                </ul>
            </nav>
            <div class="profile-section">
                <div class="profile-avatar" id="profileAvatar"></div>
                <div class="profile-info">
                    <h3>{{userName}}</h3>
                    <p>{{userType}}</p>
                </div>
                <a href="/logout" class="logout-btn">Logout</a>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="main-content">
        <h1 class="dashboard-title" id="dashboardTitle"></h1>

        <!-- UPDATED Stats Section -->
        <section class="stats-section">
            <div class="stat-card blue">
                <div class="stat-value">
                    <span id="enrolledClassesCount">-</span>
                </div>
                <div class="stat-label">Enrolled Classes</div>
                <div class="comparison" id="enrollmentInfo">Your courses</div>
            </div>
            
            <div class="stat-card green">
                <div class="stat-value">
                    <span id="overallAverage">-%</span>
                    <span class="trend-indicator" id="trendIndicator">→</span>
                </div>
                <div class="stat-label">Overall Average</div>
                <div class="comparison" id="averageComparison">All classes combined</div>
            </div>
            
            <div class="stat-card purple">
                <div class="stat-value" id="totalQuizAttempts">-</div>
                <div class="stat-label">Total Quiz Attempts</div>
                <div class="comparison" id="attemptsComparison">Across all classes</div>
            </div>
            
            <div class="stat-card orange">
                <div class="stat-value" id="activeClassesCount">-</div>
                <div class="stat-label">Active Classes</div>
                <div class="comparison">Classes with recent activity</div>
            </div>
        </section>

        <!-- My Classes Section -->
        <section class="section">
            <h2 class="section-title">📚 My Classes</h2>
            <div id="classesContainer">
                <div class="loading">
                    <div class="loading-spinner"></div>
                    <p>🔄 Loading your enrolled classes...</p>
                </div>
            </div>
        </section>
    </main>

    <script>
        // Global variables
        const studentName = '{{{userName}}}';
        let enrolledClasses = [];

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Student dashboard initializing...');
            initializeDashboard();
            loadEnrolledClasses();
        });

        // Initialize dashboard UI
        function initializeDashboard() {
            // Set dynamic greeting
            const hour = new Date().getHours();
            let greeting = 'Good evening';
            if (hour < 12) greeting = 'Good morning';
            else if (hour < 18) greeting = 'Good afternoon';
            
            document.getElementById('dashboardTitle').textContent = `${greeting}, ${studentName}!`;
            
            // Update avatar initials
            const avatar = document.getElementById('profileAvatar');
            const initials = studentName.split(' ').map(name => name.charAt(0)).join('').toUpperCase();
            avatar.textContent = initials;
        }

        // NEW: Get subject emoji based on subject name
        function getSubjectEmoji(subject) {
            const subjectLower = subject.toLowerCase();
            
            if (subjectLower.includes('math')) return '📐';
            if (subjectLower.includes('physic')) return '⚛️';
            if (subjectLower.includes('chemistry') || subjectLower.includes('chem')) return '🧪';
            if (subjectLower.includes('biology') || subjectLower.includes('bio')) return '🧬';
            if (subjectLower.includes('english') || subjectLower.includes('literature')) return '📚';
            if (subjectLower.includes('history')) return '📜';
            if (subjectLower.includes('geography')) return '🌍';
            if (subjectLower.includes('computer') || subjectLower.includes('programming')) return '💻';
            if (subjectLower.includes('art')) return '🎨';
            if (subjectLower.includes('music')) return '🎵';
            if (subjectLower.includes('economics')) return '💰';
            if (subjectLower.includes('psychology')) return '🧠';
            if (subjectLower.includes('philosophy')) return '💭';
            
            return '📖'; // Default emoji
        }

        // Load enrolled classes
        async function loadEnrolledClasses() {
            try {
                console.log('🏫 Loading enrolled classes...');
                const response = await fetch('/api/student/enrolled-classes');
                const data = await response.json();
                
                if (data.success) {
                    enrolledClasses = data.classes;
                    displayEnrolledClasses(data.classes);
                    updateDashboardStats(data.classes, data.overallStats);
                    console.log('✅ Enrolled classes loaded:', data.classes.length);
                } else {
                    console.error('❌ Failed to load enrolled classes:', data.message);
                    showEmptyClasses();
                }
            } catch (error) {
                console.error('❌ Error loading enrolled classes:', error);
                showErrorClasses();
            }
        }

        // UPDATED: Display enrolled classes with new design
        function displayEnrolledClasses(classes) {
            const container = document.getElementById('classesContainer');
            
            if (classes.length === 0) {
                showEmptyClasses();
                return;
            }

            const classesHTML = classes.map(classItem => `
                <div class="class-card">
                    <div class="class-header">
                        <h3 class="class-subject">
                            <span class="subject-emoji">${getSubjectEmoji(classItem.classSubject)}</span>
                            ${classItem.classSubject}
                        </h3>
                        <p class="class-name">${classItem.className}</p>
                        <p class="class-teacher">👨‍🏫 ${classItem.teacherName}</p>
                    </div>
                    
                    <div class="class-stats">
                        <div class="class-stat">
                            <span class="class-stat-value">${classItem.quizzesTaken || 0}</span>
                            <span class="class-stat-label">Quizzes Taken</span>
                        </div>
                        <div class="class-stat">
                            <span class="class-stat-value">${classItem.averageScore || 0}%</span>
                            <span class="class-stat-label">Average Score</span>
                        </div>
                        <div class="class-stat">
                            <span class="class-stat-value">${classItem.availableQuizzes || 0}</span>
                            <span class="class-stat-label">Available</span>
                        </div>
                    </div>
                    
                    <div class="class-recent-quiz">
                        <div class="recent-quiz-title">
                            🎯 Most Recent Quiz
                        </div>
                        <div id="recentQuiz-${classItem.classId}">
                            <div class="loading" style="padding: 0.5rem;">Loading...</div>
                        </div>
                    </div>
                    
                    <div class="class-actions">
                        <button class="btn" onclick="goToClass('${classItem.classId}', '${classItem.className}')">
                            📚 Go to Class
                        </button>
                    </div>
                </div>
            `).join('');

            container.innerHTML = `<div class="classes-grid">${classesHTML}</div>`;

            // Load most recent quiz for each class
            classes.forEach(classItem => {
                loadMostRecentQuiz(classItem.classId);
            });
        }

        // NEW: Load only the most recent quiz for a class
        // NEW: Load only the most recent quiz for a class (UPDATED - No Retake)
        async function loadMostRecentQuiz(classId) {
            try {
                const response = await fetch(`/api/student/class/${classId}/recent-quiz`);
                const data = await response.json();
                
                const container = document.getElementById(`recentQuiz-${classId}`);
                
                if (data.success && data.quiz) {
                    const quiz = data.quiz;
                    container.innerHTML = `
                        <div class="recent-quiz-item">
                            <div class="quiz-info">
                                <div class="quiz-title">${quiz.lectureTitle}</div>
                                <div class="quiz-meta">📝 ${quiz.totalQuestions} questions • ${quiz.timeAgo}</div>
                            </div>
                            <div class="quiz-action">
                                ${quiz.status === 'taken' ? 
                                    `<button class="btn btn-sm btn-secondary" onclick="viewQuizResults('${quiz.resultId}', '${quiz.lectureTitle}', '${classId}')">
                                        📊 View Results
                                    </button>` :
                                    `<button class="btn btn-sm" onclick="takeQuiz('${quiz._id}', '${quiz.lectureTitle}', '${classId}')">
                                        🎯 Take Quiz
                                    </button>`
                                }
                            </div>
                        </div>
                    `;
                } else {
                    container.innerHTML = `
                        <div class="no-recent-quiz">
                            📚 No quizzes available yet
                        </div>
                    `;
                }
            } catch (error) {
                console.error('❌ Error loading recent quiz:', error);
                const container = document.getElementById(`recentQuiz-${classId}`);
                container.innerHTML = `
                    <div class="no-recent-quiz">
                        ❌ Error loading quiz
                    </div>
                `;
            }
        }
        // 🆕 NEW: Function to view detailed quiz results
        function viewQuizResults(resultId, quizTitle, classId) {
            console.log(`📊 Viewing detailed results: ${resultId} - ${quizTitle} from class ${classId}`);
            window.location.href = `/quiz-result/${resultId}/detailed?classId=${classId}`;
        }

        // UPDATED: Calculate and display dashboard stats
        function updateDashboardStats(classes, overallStats) {
            // Use the overallStats from backend if available
            if (overallStats) {
                document.getElementById('enrolledClassesCount').textContent = overallStats.totalClasses;
                document.getElementById('overallAverage').textContent = (overallStats.overallAverage || 0) + '%';
                document.getElementById('totalQuizAttempts').textContent = overallStats.totalQuizAttempts;
                document.getElementById('activeClassesCount').textContent = overallStats.activeClasses;
                
                // Update comparison texts
                document.getElementById('enrollmentInfo').textContent = overallStats.totalClasses === 1 ? '1 course' : `${overallStats.totalClasses} courses`;
                document.getElementById('averageComparison').textContent = overallStats.totalQuizAttempts > 0 ? `Based on ${overallStats.totalQuizAttempts} attempts` : 'No attempts yet';
                document.getElementById('attemptsComparison').textContent = `Across ${overallStats.totalClasses} classes`;
                
                // Update trend indicator
                const trendElement = document.getElementById('trendIndicator');
                const avgScore = parseFloat(overallStats.overallAverage) || 0;
                if (avgScore >= 80) trendElement.textContent = '📈';
                else if (avgScore >= 60) trendElement.textContent = '→';
                else trendElement.textContent = '📉';
            } else {
                // Fallback to local calculation
                const totalClasses = classes.length;
                let totalQuizzes = 0;
                let totalScore = 0;
                let activeClasses = 0;
                
                classes.forEach(cls => {
                    totalQuizzes += cls.quizzesTaken || 0;
                    if (cls.quizzesTaken > 0) {
                        totalScore += (cls.averageScore || 0) * cls.quizzesTaken;
                    }
                    if (cls.availableQuizzes > 0) {
                        activeClasses++;
                    }
                });
                
                const overallAverage = totalQuizzes > 0 ? (totalScore / totalQuizzes).toFixed(1) : 0;
                
                document.getElementById('enrolledClassesCount').textContent = totalClasses;
                document.getElementById('overallAverage').textContent = overallAverage + '%';
                document.getElementById('totalQuizAttempts').textContent = totalQuizzes;
                document.getElementById('activeClassesCount').textContent = activeClasses;
            }
        }

        // NEW: Navigate to class-specific page
        function goToClass(classId, className) {
            console.log(`📚 Navigating to class: ${className} (${classId})`);
            window.location.href = `/student/class/${classId}`;
        }

        
        // 🔄 UPDATED: takeQuiz function (REPLACE EXISTING - REMOVE RETAKE FUNCTIONALITY)
        function takeQuiz(quizId, quizTitle, classId) {
            console.log(`🎯 Taking quiz: ${quizId} - ${quizTitle} from class ${classId}`);
            
            if (confirm(`Are you ready to take the quiz: "${quizTitle}"?\n\nOnce started, the quiz timer will begin immediately.`)) {
                window.location.href = `/take_quiz/${quizId}?classId=${classId}`;
            }
        }

        // Error states
        function showEmptyClasses() {
            const container = document.getElementById('classesContainer');
            container.innerHTML = `
                <div class="empty-state">
                    <h3>🏫 No Classes Enrolled</h3>
                    <p>You haven't been enrolled in any classes yet. Please contact your teachers to get enrolled.</p>
                    <div class="alert alert-info" style="margin-top: 1rem;">
                        <strong>How to get enrolled:</strong><br>
                        Ask your teacher to add you to their class using your enrollment number.
                    </div>
                </div>
            `;
        }

        
        function viewQuizResults(resultId, quizTitle, classId) {
            console.log(`📊 Viewing detailed results: ${resultId} - ${quizTitle} from class ${classId}`);
            window.location.href = `/quiz-result/${resultId}/detailed?classId=${classId}`;
        }

        function showErrorClasses() {
            const container = document.getElementById('classesContainer');
            container.innerHTML = `
                <div class="empty-state">
                    <h3>❌ Error Loading Classes</h3>
                    <p>There was a problem loading your enrolled classes. Please try refreshing the page.</p>
                    <button class="btn" onclick="loadEnrolledClasses()" style="margin-top: 1rem;">
                        Try Again
                    </button>
                </div>
            `;
        }

        // Auto-refresh data every 30 seconds
        setInterval(() => {
            console.log('🔄 Auto-refreshing data...');
            loadEnrolledClasses();
        }, 30000);
    </script>
</body>
</html>