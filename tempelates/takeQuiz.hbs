<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{#if quiz.className}}{{quiz.className}} - {{/if}}{{quiz.lectureTitle}} - Quizzie</title>
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f8fafc;
            color: #334155;
            line-height: 1.6;
        }

        /* Header */
        .quiz-header {
            background: white;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            padding: 1rem 0;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
        }

        /* Security Monitor Badge */
        .security-monitor {
            background: linear-gradient(135deg, #ef4444, #dc2626);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            font-size: 0.85rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            box-shadow: 0 2px 4px rgba(239, 68, 68, 0.2);
            animation: securityPulse 2s infinite;
        }

        @keyframes securityPulse {
            0%, 100% { box-shadow: 0 2px 4px rgba(239, 68, 68, 0.2); }
            50% { box-shadow: 0 2px 8px rgba(239, 68, 68, 0.4); }
        }

        .violation-counter {
            background: rgba(255, 255, 255, 0.2);
            padding: 0.25rem 0.5rem;
            border-radius: 12px;
            font-weight: bold;
        }

        /* Breadcrumb Navigation */
        .breadcrumb {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 1rem;
            font-size: 0.85rem;
            color: #64748b;
        }

        .breadcrumb a {
            color: #3b82f6;
            text-decoration: none;
            transition: color 0.2s ease;
        }

        .breadcrumb a:hover {
            color: #2563eb;
        }

        .breadcrumb-separator {
            color: #94a3b8;
        }

        /* Quiz Header Info */
        .quiz-header-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .quiz-info {
            flex: 1;
        }

        .quiz-info h1 {
            font-size: 1.25rem;
            color: #1e293b;
            margin-bottom: 0.25rem;
        }

        .quiz-meta {
            display: flex;
            align-items: center;
            gap: 1rem;
            font-size: 0.85rem;
            color: #64748b;
            flex-wrap: wrap;
        }

        .class-badge {
            background: #3b82f6;
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 500;
        }

        .subject-badge {
            background: #10b981;
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 500;
        }

        .timer-container {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .timer {
            background: #3b82f6;
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: bold;
            font-size: 1.1rem;
            box-shadow: 0 2px 4px rgba(59, 130, 246, 0.2);
        }

        .timer.warning {
            background: #f59e0b;
            box-shadow: 0 2px 4px rgba(245, 158, 11, 0.2);
        }

        .timer.danger {
            background: #ef4444;
            box-shadow: 0 2px 4px rgba(239, 68, 68, 0.2);
            animation: pulse 1s infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }

        /* Security Alert Banner */
        .security-alert {
            background: linear-gradient(135deg, #fef3c7, #fde68a);
            border: 1px solid #f59e0b;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            animation: slideDown 0.5s ease-out;
        }

        @keyframes slideDown {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .security-alert-icon {
            background: #f59e0b;
            color: white;
            border-radius: 50%;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.875rem;
            flex-shrink: 0;
        }

        .security-alert-text {
            color: #92400e;
            font-weight: 500;
        }

        /* Main Content */
        .main-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem 1rem;
        }

        /* Quiz Container */
        .quiz-container {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
        }

        /* Progress Bar */
        .progress-container {
            margin-bottom: 2rem;
        }

        .progress-bar {
            width: 100%;
            height: 10px;
            background: #e2e8f0;
            border-radius: 5px;
            overflow: hidden;
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(to right, #3b82f6, #1d4ed8);
            border-radius: 5px;
            transition: width 0.3s ease;
        }

        .progress-text {
            margin-top: 0.75rem;
            font-size: 0.9rem;
            color: #64748b;
            text-align: center;
            font-weight: 500;
        }

        /* Question Styles */
        .question-container {
            margin-bottom: 2rem;
        }

        .question-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid #e2e8f0;
        }

        .question-number {
            font-size: 0.9rem;
            color: #64748b;
            font-weight: 500;
        }

        .question-difficulty {
            font-size: 0.8rem;
            padding: 0.25rem 0.5rem;
            border-radius: 6px;
            background: #f1f5f9;
            color: #475569;
        }

        .question-text {
            font-size: 1.1rem;
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 1.5rem;
            line-height: 1.6;
            padding: 1rem;
            background: #f8fafc;
            border-radius: 8px;
            border-left: 4px solid #3b82f6;
        }

        /* Options Styles */
        .options-container {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

        .option {
            background: #f8fafc;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            padding: 1.25rem;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 1rem;
            position: relative;
            overflow: hidden;
        }

        .option:hover {
            border-color: #3b82f6;
            background: #eff6ff;
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(59, 130, 246, 0.1);
        }

        .option.selected {
            border-color: #3b82f6;
            background: #eff6ff;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .option.selected::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: #3b82f6;
        }

        .option-letter {
            background: #3b82f6;
            color: white;
            border-radius: 50%;
            width: 35px;
            height: 35px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 0.95rem;
            flex-shrink: 0;
            box-shadow: 0 2px 4px rgba(59, 130, 246, 0.2);
        }

        .option.selected .option-letter {
            background: #1d4ed8;
            box-shadow: 0 2px 4px rgba(29, 78, 216, 0.3);
        }

        .option-text {
            flex: 1;
            font-size: 0.95rem;
            color: #334155;
            line-height: 1.5;
        }

        /* Navigation Buttons */
        .navigation-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 2rem;
            padding-top: 2rem;
            border-top: 1px solid #e2e8f0;
        }

        .btn {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 0.875rem 1.75rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 0.9rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn:hover {
            background: #2563eb;
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(59, 130, 246, 0.2);
        }

        .btn:disabled {
            background: #94a3b8;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .btn-secondary {
            background: #64748b;
        }

        .btn-secondary:hover {
            background: #475569;
        }

        .btn-success {
            background: #10b981;
        }

        .btn-success:hover {
            background: #059669;
        }

        /* Question Indicators */
        .question-indicators {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            justify-content: center;
            align-items: center;
        }

        .question-dot {
            width: 14px;
            height: 14px;
            border-radius: 50%;
            background: #e2e8f0;
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
        }

        .question-dot:hover {
            transform: scale(1.2);
        }

        .question-dot.current {
            background: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
        }

        .question-dot.answered {
            background: #10b981;
        }

        .question-dot.unanswered {
            background: #e2e8f0;
        }

        /* Warning Modal Styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            animation: fadeIn 0.3s ease-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .warning-modal {
            background: white;
            border-radius: 16px;
            padding: 2rem;
            max-width: 500px;
            width: 90%;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            animation: modalSlideUp 0.3s ease-out;
            position: relative;
        }

        @keyframes modalSlideUp {
            from {
                opacity: 0;
                transform: translateY(20px) scale(0.95);
            }
            to {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }

        .modal-header {
            text-align: center;
            margin-bottom: 1.5rem;
        }

        .modal-icon {
            background: linear-gradient(135deg, #ef4444, #dc2626);
            color: white;
            border-radius: 50%;
            width: 64px;
            height: 64px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            margin: 0 auto 1rem;
            box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
        }

        .modal-title {
            font-size: 1.5rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 0.5rem;
        }

        .modal-subtitle {
            color: #64748b;
            font-size: 0.9rem;
        }

        .modal-content {
            margin-bottom: 2rem;
        }

        .warning-text {
            color: #374151;
            line-height: 1.6;
            margin-bottom: 1rem;
        }

        .violation-status {
            background: #fef2f2;
            border: 1px solid #fecaca;
            border-radius: 8px;
            padding: 1rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .violation-icon {
            background: #ef4444;
            color: white;
            border-radius: 50%;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.875rem;
        }

        .violation-details {
            flex: 1;
        }

        .violation-count-text {
            font-weight: 600;
            color: #dc2626;
            margin-bottom: 0.25rem;
        }

        .violation-warning {
            font-size: 0.85rem;
            color: #7f1d1d;
        }

        .modal-actions {
            display: flex;
            gap: 1rem;
            justify-content: center;
        }

        .modal-btn {
            padding: 0.75rem 2rem;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            border: none;
            font-size: 0.95rem;
        }

        .modal-btn-primary {
            background: #3b82f6;
            color: white;
        }

        .modal-btn-primary:hover {
            background: #2563eb;
            transform: translateY(-1px);
        }

        /* Loading and Result States */
        .loading-container {
            text-align: center;
            padding: 4rem 2rem;
        }

        .loading-spinner {
            border: 4px solid #e2e8f0;
            border-top: 4px solid #3b82f6;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
            margin: 0 auto 1.5rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .result-container {
            text-align: center;
            padding: 3rem 2rem;
            background: white;
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .result-score {
            font-size: 4rem;
            font-weight: bold;
            color: #10b981;
            margin-bottom: 1rem;
            text-shadow: 0 2px 4px rgba(16, 185, 129, 0.2);
        }

        .result-details {
            color: #64748b;
            margin-bottom: 2rem;
            font-size: 1.1rem;
        }

        .result-details p {
            margin-bottom: 0.5rem;
        }

        /* Class Context Alert */
        .class-context {
            background: #eff6ff;
            border: 1px solid #bfdbfe;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .class-context-icon {
            background: #3b82f6;
            color: white;
            border-radius: 50%;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.875rem;
        }

        .class-context-text {
            color: #1e40af;
        }

        /* Mobile Responsiveness */
        @media (max-width: 768px) {
            .header-content {
                padding: 0 0.5rem;
            }

            .quiz-header-info {
                flex-direction: column;
                align-items: flex-start;
            }

            .quiz-meta {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.5rem;
            }

            .timer-container {
                width: 100%;
                justify-content: space-between;
                flex-direction: row-reverse;
            }

            .security-monitor {
                font-size: 0.75rem;
                padding: 0.4rem 0.8rem;
            }

            .main-content {
                padding: 1rem 0.5rem;
            }

            .quiz-container {
                padding: 1.5rem;
            }

            .navigation-container {
                flex-direction: column;
                gap: 1rem;
            }

            .btn {
                width: 100%;
                justify-content: center;
            }

            .question-indicators {
                gap: 0.25rem;
            }

            .question-dot {
                width: 12px;
                height: 12px;
            }

            .breadcrumb {
                font-size: 0.8rem;
            }

            .warning-modal {
                padding: 1.5rem;
                margin: 1rem;
            }

            .modal-actions {
                flex-direction: column;
            }

            .modal-btn {
                width: 100%;
            }
        }

        /* Additional Animations */
        .quiz-container {
            animation: slideUp 0.5s ease-out;
        }

        @keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Status Messages */
        .status-message {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            font-weight: 500;
        }

        .status-message.info {
            background: #eff6ff;
            color: #1e40af;
            border: 1px solid #bfdbfe;
        }

        .status-message.warning {
            background: #fefce8;
            color: #a16207;
            border: 1px solid #fde047;
        }

        .status-message.error {
            background: #fef2f2;
            color: #dc2626;
            border: 1px solid #fecaca;
        }

        /* Security Features */
        .quiz-secured {
            user-select: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
        }

        .no-context-menu {
            pointer-events: none;
        }
    </style>
</head>
<body class="quiz-secured">
    <!-- Header -->
    <header class="quiz-header">
        <div class="header-content">
            <!-- Breadcrumb Navigation -->
            <nav class="breadcrumb">
                <a href="/homeStudent">🏠 Dashboard</a>
                <span class="breadcrumb-separator">›</span>
                {{#if quiz.className}}
                    <a href="/student/class/{{quiz.classId}}">{{quiz.className}}</a>
                    <span class="breadcrumb-separator">›</span>
                {{/if}}
                <span>Quiz</span>
            </nav>

            <!-- Quiz Header Info -->
            <div class="quiz-header-info">
                <div class="quiz-info">
                    <h1 id="quizTitle">Loading Quiz...</h1>
                    <div class="quiz-meta">
                        {{#if quiz.className}}
                            <span class="class-badge">📚 {{quiz.className}}</span>
                        {{/if}}
                        {{#if quiz.classSubject}}
                            <span class="subject-badge">🎯 {{quiz.classSubject}}</span>
                        {{/if}}
                        <span id="questionCount">- questions</span>
                        <span id="durationInfo">- minutes</span>
                        <span>👤 {{userName}}</span>
                    </div>
                </div>
                <div class="timer-container">
                    <!-- Security Monitor Badge -->
                    <div class="security-monitor" id="securityMonitor">
                        🛡️ Monitoring Active
                        <span class="violation-counter" id="violationCounter">0/2</span>
                    </div>
                    <div class="timer" id="timer">--:--</div>
                </div>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="main-content">
        <!-- Security Alert Banner -->
        <div class="security-alert" id="securityAlert">
            <div class="security-alert-icon">⚠️</div>
            <div class="security-alert-text">
                <strong>Enhanced Anti-Cheating System Active:</strong> Tab switching, window switching, and app switching are monitored. You get 1 warning, then auto-submit on 2nd violation.
            </div>
        </div>

        <!-- Class Context Alert -->
        {{#if quiz.className}}
        <div class="class-context">
            <div class="class-context-icon">📚</div>
            <div class="class-context-text">
                <strong>Class Quiz:</strong> This quiz is part of your {{quiz.className}} class. Your results will be tracked for class performance.
            </div>
        </div>
        {{/if}}

        <!-- Loading State -->
        <div id="loadingContainer" class="loading-container">
            <div class="loading-spinner"></div>
            <h3>Loading Quiz Questions...</h3>
            <p>Please wait while we prepare your {{#if quiz.className}}{{quiz.className}} {{/if}}quiz.</p>
        </div>

        <!-- Quiz Container -->
        <div id="quizContainer" class="quiz-container" style="display: none;">
            <!-- Progress Bar -->
            <div class="progress-container">
                <div class="progress-bar">
                    <div class="progress-fill" id="progressFill"></div>
                </div>
                <div class="progress-text" id="progressText">Question 1 of -</div>
            </div>

            <!-- Question -->
            <div class="question-container">
                <div class="question-header">
                    <div class="question-number" id="questionNumber">Question 1</div>
                    <div class="question-difficulty" id="questionDifficulty">Standard</div>
                </div>
                <div class="question-text" id="questionText">Loading question...</div>
            </div>

            <!-- Options -->
            <div class="options-container" id="optionsContainer">
                <!-- Options will be dynamically inserted here -->
            </div>

            <!-- Navigation -->
            <div class="navigation-container">
                <button class="btn btn-secondary" id="prevBtn" onclick="previousQuestion()" disabled>
                    ← Previous
                </button>
                <div class="question-indicators" id="questionIndicators">
                    <!-- Question dots will be inserted here -->
                </div>
                <button class="btn" id="nextBtn" onclick="nextQuestion()">
                    Next →
                </button>
            </div>
        </div>

        <!-- Results Container -->
        <div id="resultsContainer" class="result-container" style="display: none;">
            <div class="result-score" id="resultScore">-</div>
            <div class="result-details" id="resultDetails">
                Processing your results...
            </div>
            <button class="btn" onclick="goToDashboard()">
                View Detailed Results
            </button>
        </div>
    </main>

    <!-- Warning Modal -->
    <div id="warningModal" class="modal-overlay" style="display: none;">
        <div class="warning-modal">
            <div class="modal-header">
                <div class="modal-icon">⚠️</div>
                <h2 class="modal-title">Suspicious Activity Detected!</h2>
                <p class="modal-subtitle">Enhanced Anti-Cheating System Alert</p>
            </div>
            
            <div class="modal-content">
                <p class="warning-text">
                    You switched tabs, windows, or applications. This behavior is monitored to prevent cheating.
                </p>
                
                <div class="violation-status">
                    <div class="violation-icon">🚨</div>
                    <div class="violation-details">
                        <div class="violation-count-text" id="modalViolationText">Violation 1 of 2</div>
                        <div class="violation-warning" id="modalWarningText">Next violation will auto-submit your quiz!</div>
                    </div>
                </div>
            </div>
            
            <div class="modal-actions">
                <button class="modal-btn modal-btn-primary" onclick="closeWarningModal()">
                    I Understand - Continue Quiz
                </button>
            </div>
        </div>
    </div>

    <script>
        // Enhanced Anti-Cheating System Variables
        let violationCount = 0;
        let isTabHidden = false;
        let graceTimer = null;
        let isQuizSubmitted = false;
        const GRACE_PERIOD = 5000; // 5 seconds grace period
        const MAX_VIOLATIONS = 2;
        
        // Enhanced detection variables
        let lastViolationTime = 0;
        let isDetectionActive = true;
        let focusCheckInterval = null;
        let mouseInsideWindow = true;
        let isWindowFocused = true;

        // Quiz Data
        let quizData = null;
        let currentQuestionIndex = 0;
        let studentAnswers = [];
        let startTime = Date.now();
        let timerInterval = null;
        const quizId = window.location.pathname.split('/').pop();
        let QUIZ_TIME_LIMIT = 15 * 60; // Default to 15 minutes in seconds

        // Enhanced Class context data from server
        const classContext = {
            hasClass: {{#if quiz.className}}true{{else}}false{{/if}},
            className: '{{quiz.className}}' || null,
            classSubject: '{{quiz.classSubject}}' || null,
            classId: '{{quiz.classId}}' || null
        };

        // Enhanced navigation context from server
        const navigationContext = {{{json navigationContext}}};

        console.log('🏫 Enhanced class context:', classContext);
        console.log('🧭 Enhanced navigation context:', navigationContext);
        console.log('🛡️ Enhanced Anti-cheating system initialized');

        // Enhanced initialization
        function initializeAntiCheating() {
            console.log('🛡️ Initializing ENHANCED anti-cheating system...');
            
            // Primary: Tab Visibility Detection
            document.addEventListener('visibilitychange', handleVisibilityChange);
            
            // Enhanced: Window Focus Detection (for app switches)
            window.addEventListener('blur', handleWindowBlur);
            window.addEventListener('focus', handleWindowFocus);
            
            // Enhanced: Mouse Leave Detection (for window switches)
            document.addEventListener('mouseleave', handleMouseLeave);
            document.addEventListener('mouseenter', handleMouseEnter);
            
            // Enhanced: Keyboard Focus Detection
            window.addEventListener('keydown', handleKeyboardActivity);
            
            // Enhanced: Page Focus Monitoring (backup detection)
            startFocusMonitoring();
            
            // Disable common cheating methods
            disableCheatingMethods();
            
            console.log('✅ ENHANCED anti-cheating system active - detecting tabs, windows, and apps');
        }

        // Handle tab visibility changes
        function handleVisibilityChange() {
            if (isQuizSubmitted || !isDetectionActive) return;
            
            if (document.hidden) {
                console.log('🔍 TAB SWITCH: Tab became hidden');
                triggerSuspiciousActivity('tab_switch');
            } else {
                console.log('👁️ TAB RETURN: Tab became visible');
                handleActivityReturn();
            }
        }

        // Handle window focus changes (for app switches)
        function handleWindowBlur() {
            if (isQuizSubmitted || !isDetectionActive) return;
            
            isWindowFocused = false;
            
            // Check if it's actually a window switch (not just a tab switch)
            setTimeout(() => {
                if (!isWindowFocused && !document.hidden) {
                    console.log('🔍 WINDOW SWITCH: Browser window lost focus (app switch detected)');
                    triggerSuspiciousActivity('window_blur');
                }
            }, 200); // Small delay to differentiate from tab switches
        }

        function handleWindowFocus() {
            if (isQuizSubmitted || !isDetectionActive) return;
            
            isWindowFocused = true;
            console.log('👁️ WINDOW RETURN: Browser window gained focus');
            handleActivityReturn();
        }

        // Mouse leave detection (when mouse goes outside browser)
        function handleMouseLeave() {
            if (isQuizSubmitted || !isDetectionActive) return;
            mouseInsideWindow = false;
        }

        function handleMouseEnter() {
            mouseInsideWindow = true;
        }

        // Keyboard activity detection
        function handleKeyboardActivity(e) {
            if (isQuizSubmitted || !isDetectionActive) return;
            
            // Detect Alt+Tab (Windows) or Cmd+Tab (Mac) - task switcher
            if ((e.altKey && e.keyCode === 9) || (e.metaKey && e.keyCode === 9)) {
                e.preventDefault(); // Try to prevent it
                console.log('🔍 TASK SWITCHER: Alt+Tab or Cmd+Tab detected');
                triggerSuspiciousActivity('task_switcher');
            }
            
            // Detect Windows key (opens Start menu)
            if (e.keyCode === 91 || e.keyCode === 92) {
                console.log('🔍 WINDOWS KEY: Start menu access detected');
                triggerSuspiciousActivity('windows_key');
            }
        }

        // Continuous focus monitoring (backup detection)
        function startFocusMonitoring() {
            focusCheckInterval = setInterval(() => {
                if (isQuizSubmitted || !isDetectionActive) return;
                
                const hasDocumentFocus = document.hasFocus();
                const hasWindowFocus = document.visibilityState === 'visible';
                
                // If page doesn't have focus and it's not a known tab switch
                if (!hasDocumentFocus && hasWindowFocus && isWindowFocused) {
                    console.log('🔍 FOCUS MONITOR: Document lost focus (possible app switch)');
                    triggerSuspiciousActivity('focus_loss');
                }
            }, 2000); // Check every 2 seconds
        }

        // Unified suspicious activity trigger
        function triggerSuspiciousActivity(activityType) {
            const now = Date.now();
            
            // Prevent duplicate violations within 3 seconds
            if (now - lastViolationTime < 3000) {
                console.log(`⚠️ Duplicate ${activityType} violation prevented (too soon)`);
                return;
            }
            
            console.log(`🔍 SUSPICIOUS ACTIVITY: ${activityType} detected - starting grace timer`);
            isTabHidden = true;
            
            // Start grace period timer
            graceTimer = setTimeout(() => {
                if (isTabHidden && !isQuizSubmitted) {
                    lastViolationTime = Date.now();
                    recordViolation(activityType);
                }
            }, GRACE_PERIOD);
        }

        // Handle return from suspicious activity
        function handleActivityReturn() {
            console.log('👁️ ACTIVITY RETURN: Student returned to quiz');
            isTabHidden = false;
            
            // Clear grace timer if student returned quickly
            if (graceTimer) {
                clearTimeout(graceTimer);
                graceTimer = null;
                console.log('✅ Grace period - no violation recorded');
            }
        }

        // Record violation with activity type
        function recordViolation(activityType = 'unknown') {
            violationCount++;
            console.log(`🚨 VIOLATION DETECTED! Type: ${activityType}, Count: ${violationCount}/${MAX_VIOLATIONS}`);
            
            // Enhanced logging with activity type
            console.log('🔍 Enhanced Debug - Violation details:', {
                violationCount: violationCount,
                maxViolations: MAX_VIOLATIONS,
                activityType: activityType,
                willShowWarning: violationCount === 1,
                willAutoSubmit: violationCount >= MAX_VIOLATIONS,
                isQuizSubmitted: isQuizSubmitted,
                timestamp: new Date().toISOString()
            });
            
            // Update UI
            updateSecurityUI();
            
            if (violationCount === 1) {
                console.log('⚠️ First violation - showing warning modal');
                showWarningModal(activityType);
            } else if (violationCount >= MAX_VIOLATIONS) {
                console.log('🚨 Multiple violations - auto-submitting');
                autoSubmitForViolation();
            }
        }

        // Update security UI
        function updateSecurityUI() {
            const violationCounter = document.getElementById('violationCounter');
            const securityMonitor = document.getElementById('securityMonitor');
            
            violationCounter.textContent = `${violationCount}/${MAX_VIOLATIONS}`;
            
            // Change color based on violation count
            if (violationCount === 1) {
                securityMonitor.style.background = 'linear-gradient(135deg, #f59e0b, #d97706)';
            } else if (violationCount >= MAX_VIOLATIONS) {
                securityMonitor.style.background = 'linear-gradient(135deg, #ef4444, #dc2626)';
            }
        }

        // Show warning modal with activity type
        function showWarningModal(activityType = 'tab switching') {
            const modal = document.getElementById('warningModal');
            const violationText = document.getElementById('modalViolationText');
            const warningText = document.getElementById('modalWarningText');
            
            // Enhanced warning message based on activity type
            const activityMessages = {
                'tab_switch': 'Tab switching detected',
                'window_blur': 'Window/Application switching detected',
                'task_switcher': 'Alt+Tab task switcher usage detected',
                'windows_key': 'Windows key / Start menu access detected',
                'focus_loss': 'Browser focus loss detected',
                'unknown': 'Suspicious activity detected'
            };
            
            const activityMessage = activityMessages[activityType] || activityMessages['unknown'];
            
            violationText.textContent = `${activityMessage} - Violation ${violationCount} of ${MAX_VIOLATIONS}`;
            
            if (violationCount === 1) {
                warningText.textContent = 'Next violation will auto-submit your quiz!';
            } else {
                warningText.textContent = 'This is your final warning!';
            }
            
            modal.style.display = 'flex';
            console.log(`⚠️ Warning modal displayed for ${activityType} - NOT submitting quiz`);
        }

        function closeWarningModal() {
            const modal = document.getElementById('warningModal');
            modal.style.display = 'none';
            console.log('✅ Warning modal closed - student can continue quiz');
        }

        function autoSubmitForViolation() {
            console.log('🚨 AUTO-SUBMITTING due to multiple violations');
            
            // Disable further detection to prevent more violations
            isDetectionActive = false;
            
            // Clean up monitoring
            if (focusCheckInterval) {
                clearInterval(focusCheckInterval);
                focusCheckInterval = null;
            }
            
            // Show alert
            alert('🚨 Multiple suspicious activities detected!\n\nPossible activities: Tab switching, app switching, or task switching.\n\nYour quiz is being submitted automatically due to violation of anti-cheating policy.');
            
            // Force submit quiz
            isQuizSubmitted = true;
            submitQuiz();
        }

        // Enhanced cheating prevention
        function disableCheatingMethods() {
            // Disable right-click context menu
            document.addEventListener('contextmenu', function(e) {
                e.preventDefault();
                console.log('🚫 Right-click disabled');
            });
            
            // Disable common keyboard shortcuts
            document.addEventListener('keydown', function(e) {
                // Disable F12, Ctrl+Shift+I, Ctrl+U, Ctrl+Shift+C
                if (e.keyCode === 123 || // F12
                    (e.ctrlKey && e.shiftKey && e.keyCode === 73) || // Ctrl+Shift+I
                    (e.ctrlKey && e.keyCode === 85) || // Ctrl+U
                    (e.ctrlKey && e.shiftKey && e.keyCode === 67)) { // Ctrl+Shift+C
                    e.preventDefault();
                    console.log('🚫 Developer tools shortcut blocked');
                }
                
                // Disable Ctrl+A (select all), Ctrl+C (copy), Ctrl+V (paste)
                if (e.ctrlKey && (e.keyCode === 65 || e.keyCode === 67 || e.keyCode === 86)) {
                    e.preventDefault();
                    console.log('🚫 Copy/Paste blocked');
                }
            });
            
            // Disable text selection
            document.addEventListener('selectstart', function(e) {
                if (e.target.tagName !== 'INPUT' && e.target.tagName !== 'TEXTAREA') {
                    e.preventDefault();
                }
            });
        }

        // Debug function for testing
        window.debugEnhancedAntiCheat = function() {
            console.log('🔍 Enhanced Anti-cheat debug info:', {
                violationCount: violationCount,
                maxViolations: MAX_VIOLATIONS,
                isQuizSubmitted: isQuizSubmitted,
                isTabHidden: isTabHidden,
                isWindowFocused: isWindowFocused,
                mouseInsideWindow: mouseInsideWindow,
                graceTimer: graceTimer ? 'Active' : 'Inactive',
                focusMonitoring: focusCheckInterval ? 'Active' : 'Inactive',
                detectionActive: isDetectionActive,
                documentHasFocus: document.hasFocus(),
                documentVisibility: document.visibilityState
            });
        };

        // Utility function to format time
        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            const secs = seconds % 60;
            return `${minutes}m ${secs}s`;
        }

        // Initialize quiz when page loads
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🎯 Initializing enhanced anti-cheating quiz with ID:', quizId);
            
            // Initialize anti-cheating system first
            initializeAntiCheating();
            
            // Then load quiz data
            loadQuizData();
        });

        // Load quiz duration first, then quiz data
        async function loadQuizData() {
            try {
                console.log('📡 Fetching quiz duration and data...');
                
                // First get the quiz duration
                const durationResponse = await fetch(`/api/quiz/${quizId}/duration`);
                const durationData = await durationResponse.json();
                
                if (durationData.success) {
                    QUIZ_TIME_LIMIT = durationData.durationSeconds;
                    console.log('⏱️ Quiz duration set to:', durationData.durationMinutes, 'minutes');
                    
                    // Update duration info in header
                    document.getElementById('durationInfo').textContent = `${durationData.durationMinutes} minutes`;
                } else {
                    console.warn('⚠️ Could not fetch quiz duration, using default 30 minutes');
                }
                
                // Then get the quiz questions
                const response = await fetch(`/api/quiz/${quizId}`);
                const data = await response.json();
                
                if (data.success && data.quiz) {
                    quizData = data.quiz;
                    console.log('✅ Quiz loaded:', quizData.lectureTitle);
                    
                    // Update quiz title in header if not already set
                    if (document.getElementById('quizTitle').textContent === 'Loading Quiz...') {
                        document.getElementById('quizTitle').textContent = quizData.lectureTitle;
                    }
                    
                    initializeQuiz();
                } else {
                    console.error('❌ Failed to load quiz:', data.message);
                    showError('Failed to load quiz: ' + (data.message || 'Unknown error'));
                }
            } catch (error) {
                console.error('❌ Error loading quiz:', error);
                showError('Network error while loading quiz. Please check your connection.');
            }
        }

        // Initialize quiz interface
        function initializeQuiz() {
            // Update header information
            document.getElementById('quizTitle').textContent = quizData.lectureTitle;
            document.getElementById('questionCount').textContent = `${quizData.totalQuestions} questions`;
            
            // Initialize student answers array
            studentAnswers = new Array(quizData.totalQuestions).fill(null);
            
            // Hide loading, show quiz
            document.getElementById('loadingContainer').style.display = 'none';
            document.getElementById('quizContainer').style.display = 'block';
            
            // Start timer with dynamic duration
            startTimer();
            
            // Display first question
            displayQuestion(0);
            
            // Create question indicators
            createQuestionIndicators();
            
            console.log('🚀 Enhanced anti-cheating quiz initialized successfully with', QUIZ_TIME_LIMIT / 60, 'minutes duration');
        }

        // Display a specific question
        function displayQuestion(index) {
            if (!quizData || !quizData.questions[index]) {
                console.error('❌ Invalid question index:', index);
                return;
            }

            const question = quizData.questions[index];
            currentQuestionIndex = index;

            // Update question info
            document.getElementById('questionNumber').textContent = `Question ${index + 1}`;
            document.getElementById('questionText').textContent = question.question;
            
            // Update progress
            const progress = ((index + 1) / quizData.totalQuestions) * 100;
            document.getElementById('progressFill').style.width = `${progress}%`;
            document.getElementById('progressText').textContent = `Question ${index + 1} of ${quizData.totalQuestions}`;
            
            // Display options
            const optionsContainer = document.getElementById('optionsContainer');
            optionsContainer.innerHTML = '';
            
            ['A', 'B', 'C', 'D'].forEach(letter => {
                const option = document.createElement('div');
                option.className = 'option';
                option.onclick = () => selectOption(letter);
                
                // Check if this option was previously selected
                if (studentAnswers[index] === letter) {
                    option.classList.add('selected');
                }
                
                option.innerHTML = `
                    <div class="option-letter">${letter}</div>
                    <div class="option-text">${question.options[letter]}</div>
                `;
                
                optionsContainer.appendChild(option);
            });
            
            // Update navigation buttons
            updateNavigationButtons();
            updateQuestionIndicators();
        }

        // Select an option
        function selectOption(letter) {
            // Remove previous selection
            document.querySelectorAll('.option').forEach(opt => {
                opt.classList.remove('selected');
            });
            
            // Add selection to clicked option
            event.target.closest('.option').classList.add('selected');
            
            // Store answer
            studentAnswers[currentQuestionIndex] = letter;
            
            console.log(`📝 Selected ${letter} for question ${currentQuestionIndex + 1}`);
            
            // Update question indicators
            updateQuestionIndicators();
            
            // Auto-advance to next question after a short delay
            setTimeout(() => {
                if (currentQuestionIndex < quizData.totalQuestions - 1) {
                    nextQuestion();
                }
            }, 500);
        }

        // Navigation functions
        function nextQuestion() {
            if (currentQuestionIndex < quizData.totalQuestions - 1) {
                displayQuestion(currentQuestionIndex + 1);
            }
        }

        function previousQuestion() {
            if (currentQuestionIndex > 0) {
                displayQuestion(currentQuestionIndex - 1);
            }
        }

        function updateNavigationButtons() {
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');
            
            // Previous button
            prevBtn.disabled = currentQuestionIndex === 0;
            
            // Next button
            if (currentQuestionIndex === quizData.totalQuestions - 1) {
                nextBtn.textContent = 'Submit Quiz';
                nextBtn.className = 'btn btn-success';
                nextBtn.onclick = submitQuiz;
            } else {
                nextBtn.textContent = 'Next →';
                nextBtn.className = 'btn';
                nextBtn.onclick = nextQuestion;
            }
        }

        // Create question indicators (dots)
        function createQuestionIndicators() {
            const container = document.getElementById('questionIndicators');
            container.innerHTML = '';
            
            for (let i = 0; i < quizData.totalQuestions; i++) {
                const dot = document.createElement('div');
                dot.className = 'question-dot';
                dot.onclick = () => displayQuestion(i);
                dot.title = `Question ${i + 1}`;
                container.appendChild(dot);
            }
        }

        function updateQuestionIndicators() {
            const dots = document.getElementById('questionIndicators').children;
            
            for (let i = 0; i < dots.length; i++) {
                const dot = dots[i];
                dot.className = 'question-dot';
                
                if (i === currentQuestionIndex) {
                    dot.classList.add('current');
                } else if (studentAnswers[i] !== null) {
                    dot.classList.add('answered');
                } else {
                    dot.classList.add('unanswered');
                }
            }
        }

        // Timer functions with dynamic duration
        function startTimer() {
            startTime = Date.now();
            
            timerInterval = setInterval(() => {
                const elapsed = Math.floor((Date.now() - startTime) / 1000);
                const remaining = Math.max(0, QUIZ_TIME_LIMIT - elapsed);
                
                updateTimerDisplay(remaining);
                
                if (remaining <= 0) {
                    clearInterval(timerInterval);
                    alert('⏰ Time is up! Your quiz will be submitted automatically.');
                    isQuizSubmitted = true;
                    submitQuiz();
                }
            }, 1000);
        }

        function updateTimerDisplay(seconds) {
            const minutes = Math.floor(seconds / 60);
            const secs = seconds % 60;
            const timeString = `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
            
            const timerElement = document.getElementById('timer');
            timerElement.textContent = timeString;
            
            // Dynamic warning thresholds based on quiz duration
            const warningThreshold = Math.max(300, QUIZ_TIME_LIMIT * 0.25); // 25% of quiz time or 5 minutes, whichever is larger
            const dangerThreshold = Math.max(120, QUIZ_TIME_LIMIT * 0.1); // 10% of quiz time or 2 minutes, whichever is larger
            
            // Change color based on remaining time
            if (seconds <= dangerThreshold) {
                timerElement.className = 'timer danger';
            } else if (seconds <= warningThreshold) {
                timerElement.className = 'timer warning';
            } else {
                timerElement.className = 'timer';
            }
        }

        // Submit quiz function with anti-cheating context
        async function submitQuiz() {
            console.log('🔍 Enhanced quiz submission check:', {
                quizData: quizData,
                studentAnswers: studentAnswers,
                quizId: quizId,
                classContext: classContext,
                quizDuration: QUIZ_TIME_LIMIT / 60, // in minutes
                violationCount: violationCount // Include violation count
            });

            if (!quizData || !quizData.questions) {
                console.error('❌ Quiz data is missing!');
                alert('Quiz data is missing. Please refresh and try again.');
                return;
            }

            // Mark as submitted to prevent further violations
            isQuizSubmitted = true;

            // Check if all questions are answered
            const unansweredCount = studentAnswers.filter(answer => answer === null).length;
            
            if (unansweredCount > 0 && violationCount === 0) {
                // Only show confirmation if not auto-submitting due to violations
                const confirmMessage = classContext.hasClass 
                    ? `You have ${unansweredCount} unanswered questions.\n\nThis quiz is part of ${classContext.className} class and your results will be recorded for class analytics.\n\nAre you sure you want to submit?`
                    : `You have ${unansweredCount} unanswered questions. Are you sure you want to submit?`;
                    
                if (!confirm(confirmMessage)) {
                    isQuizSubmitted = false; // Allow further interaction
                    return;
                }
            }
            
            // Stop timer
            if (timerInterval) {
                clearInterval(timerInterval);
            }
            
            // Calculate time taken
            const timeTakenSeconds = Math.floor((Date.now() - startTime) / 1000);
            
            // Prepare comprehensive submission data with violation info
            const submissionData = {
                studentAnswers: studentAnswers.map((answer, index) => ({
                    questionIndex: index,
                    question: quizData.questions[index].question,
                    selectedOption: answer
                })).filter(item => item.selectedOption !== null),
                timeTakenSeconds: timeTakenSeconds,
                classContext: classContext, // Enhanced class context
                // Anti-cheating data
                antiCheatData: {
                    violationCount: violationCount,
                    wasAutoSubmitted: violationCount >= MAX_VIOLATIONS,
                    gracePeriodsUsed: violationCount // Track how many times grace period was activated
                },
                // Additional navigation hints for backend
                navigationHints: {
                    fromClassView: !!classContext.classId,
                    preferredReturnUrl: classContext.classId ? `/student/class/${classContext.classId}` : '/homeStudent'
                }
            };
            
            console.log('📤 Submitting enhanced quiz with anti-cheating data:', submissionData);
            
            // Show loading state
            showSubmissionLoading();
            
            try {
                const response = await fetch(`/api/quiz/submit/${quizId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(submissionData)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    console.log('✅ Quiz submitted successfully with anti-cheating data:', result);
                    
                    // Store comprehensive result data with violation info
                    const enhancedResult = {
                        ...result,
                        lectureId: quizData.lectureId || null,
                        classContext: classContext,
                        quizDurationMinutes: QUIZ_TIME_LIMIT / 60, // Store actual quiz duration
                        // Include anti-cheating summary
                        antiCheatSummary: {
                            violationCount: violationCount,
                            wasAutoSubmitted: violationCount >= MAX_VIOLATIONS,
                            securityStatus: violationCount === 0 ? 'Clean' : 
                                          violationCount === 1 ? 'Warning Issued' : 'Auto-Submitted'
                        },
                        // Enhanced navigation context from backend response
                        navigationContext: result.navigationContext || {
                            hasClass: classContext.hasClass,
                            classId: classContext.classId,
                            className: classContext.className,
                            returnToClass: !!classContext.classId
                        },
                        suggestedRedirect: result.suggestedRedirect || {
                            backUrl: classContext.classId ? `/student/class/${classContext.classId}` : '/homeStudent',
                            backLabel: classContext.className ? `Back to ${classContext.className}` : 'Back to Dashboard'
                        }
                    };
                    
                    showResults(enhancedResult);
                } else {
                    console.error('❌ Quiz submission failed:', result.message);
                    alert('Failed to submit quiz: ' + result.message);
                    isQuizSubmitted = false; // Allow retry
                }
            } catch (error) {
                console.error('❌ Error submitting quiz:', error);
                alert('Network error while submitting quiz. Please try again.');
                isQuizSubmitted = false; // Allow retry
            }
        }

        // Show submission loading
        function showSubmissionLoading() {
            document.getElementById('quizContainer').style.display = 'none';
            document.getElementById('loadingContainer').style.display = 'block';
            
            let loadingText = classContext.hasClass 
                ? `Submitting Your ${classContext.className} Quiz...`
                : 'Submitting Your Quiz...';
                
            // Add violation context to loading message
            if (violationCount > 0) {
                loadingText = violationCount >= MAX_VIOLATIONS 
                    ? 'Auto-Submitting Quiz Due to Security Violations...'
                    : loadingText + ' (Security Violations Detected)';
            }
                
            document.getElementById('loadingContainer').innerHTML = `
                <div class="loading-spinner"></div>
                <h3>${loadingText}</h3>
                <p>Please wait while we process your answers and security data.</p>
            `;
        }

        // showResults function with anti-cheating summary
        function showResults(result) {
            document.getElementById('loadingContainer').style.display = 'none';
            document.getElementById('resultsContainer').style.display = 'block';
            
            const percentage = result.percentage.toFixed(1);
            const timeFormatted = formatTime(result.timeTakenSeconds);
            const durationFormatted = formatTime(QUIZ_TIME_LIMIT);
            
            document.getElementById('resultScore').textContent = `${percentage}%`;
            
            let resultDetailsHTML = `
                <p><strong>Score:</strong> ${result.score} out of ${result.totalQuestions} correct</p>
                <p><strong>Time Taken:</strong> ${timeFormatted} out of ${durationFormatted}</p>
                <p><strong>Percentage:</strong> ${percentage}%</p>
            `;
            
            // Add anti-cheating summary
            if (result.antiCheatSummary) {
                const summary = result.antiCheatSummary;
                const statusColor = summary.securityStatus === 'Clean' ? '#10b981' : 
                                  summary.securityStatus === 'Warning Issued' ? '#f59e0b' : '#ef4444';
                
                resultDetailsHTML += `
                    <div style="margin-top: 1rem; padding: 1rem; background: #f8fafc; border-radius: 8px; border-left: 4px solid ${statusColor};">
                        <p><strong>Security Status:</strong> <span style="color: ${statusColor};">${summary.securityStatus}</span></p>
                        ${summary.violationCount > 0 ? `<p style="font-size: 0.85rem; color: #64748b;">Violations detected: ${summary.violationCount}</p>` : ''}
                    </div>
                `;
            }
            
            if (classContext.hasClass) {
                resultDetailsHTML += `
                    <p><strong>Class:</strong> ${classContext.className}</p>
                    <p style="color: #3b82f6; font-weight: 500;">✅ Your result has been recorded for class performance tracking.</p>
                `;
            }
            
            document.getElementById('resultDetails').innerHTML = resultDetailsHTML;

            // Store comprehensive results data with anti-cheating info
            const detailedResults = {
                quizId: quizId,
                lectureId: result.lectureId || quizData.lectureId,
                quizTitle: result.quizTitle || quizData.lectureTitle,
                score: result.score,
                totalQuestions: result.totalQuestions,
                percentage: result.percentage,
                timeTakenSeconds: result.timeTakenSeconds,
                quizDurationSeconds: QUIZ_TIME_LIMIT, // Store actual duration used
                submissionDate: new Date().toISOString(),
                questionDetails: result.questionDetails || prepareQuestionDetails(),
                classContext: classContext,
                // Anti-cheating data for results page
                antiCheatSummary: result.antiCheatSummary,
                // Enhanced navigation context for results page
                navigationContext: result.navigationContext,
                suggestedRedirect: result.suggestedRedirect,
                // Breadcrumb data for results page
                breadcrumbData: {
                    steps: classContext.hasClass ? [
                        { label: 'Dashboard', url: '/homeStudent' },
                        { label: classContext.className, url: `/student/class/${classContext.classId}` },
                        { label: 'Quiz Results', url: null }
                    ] : [
                        { label: 'Dashboard', url: '/homeStudent' },
                        { label: 'Quiz Results', url: null }
                    ]
                }
            };

            // Store comprehensive results in localStorage for the results page
            localStorage.setItem('quizResults', JSON.stringify(detailedResults));
            console.log('📊 Enhanced results data stored with anti-cheating summary:', detailedResults);
        }

        // Prepare detailed question data
        function prepareQuestionDetails() {
            if (!quizData || !quizData.questions) {
                console.error('❌ Quiz data not available for detailed results');
                return [];
            }

            return studentAnswers.map((studentAnswer, index) => {
                const question = quizData.questions[index];
                if (!question) return null;

                return {
                    questionIndex: index,
                    questionText: question.question,
                    options: question.options,
                    studentAnswer: studentAnswer,
                    correctAnswer: question.correct_answer,
                    isCorrect: studentAnswer === question.correct_answer
                };
            }).filter(item => item !== null);
        }

        // goToDashboard function with smart navigation
        function goToDashboard() {
            const storedResults = localStorage.getItem('quizResults');
            if (storedResults) {
                // Redirect to detailed results page
                const resultsData = JSON.parse(storedResults);
                
                // Enhanced: Add navigation hints to results page URL
                let resultsUrl = '/quiz-results';
                if (resultsData.classContext && resultsData.classContext.hasClass) {
                    const params = new URLSearchParams({
                        classId: resultsData.classContext.classId,
                        className: resultsData.classContext.className,
                        returnTo: 'class'
                    });
                    resultsUrl += '?' + params.toString();
                }
                
                window.location.href = resultsUrl;
            } else if (classContext.hasClass) {
                // Redirect to class dashboard if in class context
                window.location.href = `/student/class/${classContext.classId}`;
            } else {
                // Fallback to student dashboard
                window.location.href = '/homeStudent';
            }
        }

        // Error handling with class-aware navigation
        function showError(message) {
            const backButtonText = classContext.hasClass 
                ? `Back to ${classContext.className}`
                : 'Back to Dashboard';
                
            const backUrl = classContext.hasClass 
                ? `/student/class/${classContext.classId}`
                : '/homeStudent';
                
            document.getElementById('loadingContainer').innerHTML = `
                <h3 style="color: #ef4444;">❌ Error</h3>
                <p>${message}</p>
                <button class="btn" onclick="window.location.href='${backUrl}'" style="margin-top: 1rem;">
                    ${backButtonText}
                </button>
            `;
        }

        // Page unload warning with anti-cheating context
        window.addEventListener('beforeunload', function(e) {
            if (quizData && timerInterval && !isQuizSubmitted) {
                const warningMessage = violationCount > 0 
                    ? `WARNING: You have ${violationCount} security violations!\n\nLeaving now may result in additional violations and auto-submission.`
                    : classContext.hasClass 
                        ? `Are you sure you want to leave?\n\nThis is a ${classContext.className} class quiz and your progress will be lost.`
                        : 'Are you sure you want to leave? Your quiz progress will be lost.';
                        
                e.preventDefault();
                e.returnValue = warningMessage;
                return e.returnValue;
            }
        });

        // Console log for debugging
        console.log('🎯 Enhanced takeQuiz.hbs loaded with COMPLETE anti-cheating system:', {
            classContext: classContext,
            quizId: quizId,
            enhancedNavigation: true,
            dynamicDuration: true,
            antiCheatingActive: true,
            maxViolations: MAX_VIOLATIONS,
            gracePeriod: GRACE_PERIOD / 1000 + ' seconds',
            detectionMethods: ['tab_switch', 'window_blur', 'task_switcher', 'windows_key', 'focus_loss']
        });
    </script>
</body>
</html>