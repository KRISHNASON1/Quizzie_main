<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{#if quiz.className}}{{quiz.className}} - {{/if}}{{quiz.lectureTitle}} - QuizzieI</title>
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f8fafc;
            color: #334155;
            line-height: 1.6;
            height: 100vh;
            overflow: hidden;
            display: flex;
        }

        /* Timer - Top Right */
        .timer-container {
            position: fixed;
            top: 2rem;
            right: 2rem;
            z-index: 1000;
        }

        .timer {
            background: #3b82f6;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 12px;
            font-weight: bold;
            font-size: 1.5rem;
            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
            min-width: 120px;
            text-align: center;
        }

        .timer.warning {
            background: #f59e0b;
            box-shadow: 0 4px 12px rgba(245, 158, 11, 0.3);
        }

        .timer.danger {
            background: #ef4444;
            box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
            animation: pulse 1s infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }

        /* Main Content Area */
        .main-content {
            flex: 1;
            padding: 2rem;
            display: flex;
            justify-content: center;
            align-items: center;
            padding-right: 280px; /* Space for navigation panel */
        }

        /* Quiz Container */
        .quiz-container {
            background: white;
            border-radius: 20px;
            padding: 3rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 800px;
            animation: slideUp 0.6s ease-out;
        }

        @keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Question Styles */
        .question-container {
            margin-bottom: 2rem;
        }

        .question-text {
            font-size: 1.3rem;
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 2rem;
            line-height: 1.7;
            padding: 1.5rem;
            background: #f8fafc;
            border-radius: 12px;
            border-left: 5px solid #3b82f6;
        }

        /* Options Styles with Enhanced Animation */
        .options-container {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .option {
            background: #f8fafc;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            padding: 1.5rem;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 1.5rem;
            position: relative;
            overflow: hidden;
            transform: translateZ(0); /* Enable hardware acceleration */
        }

        .option:hover {
            border-color: #3b82f6;
            background: #eff6ff;
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(59, 130, 246, 0.15);
        }

        .option.selected {
            border-color: #3b82f6;
            background: #eff6ff;
            box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.1);
            animation: optionSelect 0.2s ease-out;
        }

        .option.selected::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 5px;
            height: 100%;
            background: #3b82f6;
        }

        /* Toned Down Option Selection Animation */
        @keyframes optionSelect {
            0% {
                transform: scale(1) translateY(0);
                box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.2);
            }
            50% {
                transform: scale(1.01) translateY(-1px);
                box-shadow: 0 0 0 6px rgba(59, 130, 246, 0.1);
            }
            100% {
                transform: scale(1) translateY(-1px);
                box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.1);
            }
        }

        /* Lighter Click Flash Animation */
        .option.click-flash {
            animation: clickFlash 0.2s ease-out;
        }

        @keyframes clickFlash {
            0% {
                background: #eff6ff;
                transform: scale(1);
            }
            50% {
                background: #dbeafe;
                transform: scale(1.005);
            }
            100% {
                background: #eff6ff;
                transform: scale(1);
            }
        }

        .option-letter {
            background: #3b82f6;
            color: white;
            border-radius: 50%;
            width: 45px;
            height: 45px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 1.1rem;
            flex-shrink: 0;
            box-shadow: 0 4px 8px rgba(59, 130, 246, 0.3);
            transition: all 0.2s ease;
        }

        .option.selected .option-letter {
            background: #1d4ed8;
            box-shadow: 0 4px 8px rgba(29, 78, 216, 0.4);
            transform: scale(1.05);
            animation: letterPulse 0.2s ease-out;
        }

        @keyframes letterPulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.08); }
            100% { transform: scale(1.05); }
        }

        .option-text {
            flex: 1;
            font-size: 1.1rem;
            color: #334155;
            line-height: 1.6;
        }

        /* Right Navigation Panel - Enhanced for 3 Columns */
        .navigation-panel {
            position: fixed;
            top: 50%;
            right: 2rem;
            transform: translateY(-50%);
            width: 240px; /* Reduced width for smaller buttons */
            background: white;
            border-radius: 20px;
            padding: 1.5rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            max-height: 80vh;
        }

        /* Navigation Controls */
        .nav-controls {
            display: flex;
            gap: 0.75rem;
            margin-bottom: 1.5rem;
            justify-content: center;
        }

        .nav-btn {
            background: #3b82f6;
            color: white;
            border: none;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.2s ease;
            width: 45px;
            height: 45px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.8rem; /* Increased from 1.3rem for better visibility */
            font-weight: bold; /* Added for better visibility */
        }

        .nav-btn:hover {
            background: #2563eb;
            transform: translateY(-2px);
        }

        .nav-btn:disabled {
            background: #94a3b8;
            cursor: not-allowed;
            transform: none;
        }

        /* Enhanced Question Grid - Always 3 Columns */
        .question-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr); /* Always 3 columns */
            gap: 0.25rem; /* Reduced from 0.5rem to minimize horizontal space */
            overflow-y: auto;
            max-height: calc(80vh - 200px);
            padding-right: 0.25rem;
            padding-bottom: 0.5rem;
            justify-items: center; /* Center items horizontally in each grid cell */
            align-items: center; /* Center items vertically in each grid cell */
        }

        /* Bigger Question Navigation Buttons */
        .question-nav-btn {
            width: 38px; /* Increased from 32px */
            height: 38px; /* Increased from 32px */
            border: 2px solid #e2e8f0;
            background: white;
            color: #64748b;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            font-size: 0.9rem; /* Slightly larger text */
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto; /* Center within grid cell */
        }

        .question-nav-btn:hover {
            border-color: #3b82f6;
            background: #eff6ff;
            transform: scale(1.05);
        }

        .question-nav-btn.current {
            background: #3b82f6;
            color: white;
            border-color: #3b82f6;
            box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
            transform: scale(1.1);
        }

        .question-nav-btn.answered {
            background: rgba(16, 185, 129, 0.1);
            color: #10b981;
            border-color: #10b981;
            border-style: solid;
        }

        .question-nav-btn.answered:hover {
            background: rgba(16, 185, 129, 0.2);
            transform: scale(1.05);
        }

        .question-nav-btn.skipped {
            background: rgba(245, 158, 11, 0.1);
            color: #f59e0b;
            border-color: #f59e0b;
            border-style: solid;
        }

        .question-nav-btn.skipped:hover {
            background: rgba(245, 158, 11, 0.2);
            transform: scale(1.05);
        }

        /* Submit Button */
        .submit-container {
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid #e2e8f0;
        }

        .submit-btn {
            width: 100%;
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
            border: none;
            padding: 0.8rem; /* Slightly smaller padding */
            border-radius: 12px;
            font-weight: bold;
            font-size: 0.9rem; /* Slightly smaller text */
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .submit-btn:hover {
            background: linear-gradient(135deg, #059669, #047857);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(16, 185, 129, 0.3);
        }

        /* Warning Modal Styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 2000;
            animation: fadeIn 0.3s ease-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .warning-modal {
            background: white;
            border-radius: 20px;
            padding: 2.5rem;
            max-width: 500px;
            width: 90%;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            animation: modalSlideUp 0.3s ease-out;
            position: relative;
        }

        @keyframes modalSlideUp {
            from {
                opacity: 0;
                transform: translateY(20px) scale(0.95);
            }
            to {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }

        .modal-header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .modal-icon {
            background: linear-gradient(135deg, #ef4444, #dc2626);
            color: white;
            border-radius: 50%;
            width: 80px;
            height: 80px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem;
            margin: 0 auto 1rem;
            box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
        }

        .modal-title {
            font-size: 1.5rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 0.5rem;
        }

        .modal-subtitle {
            color: #64748b;
            font-size: 1rem;
        }

        .modal-content {
            margin-bottom: 2rem;
        }

        .warning-text {
            color: #374151;
            line-height: 1.6;
            margin-bottom: 1rem;
        }

        .violation-status {
            background: #fef2f2;
            border: 1px solid #fecaca;
            border-radius: 12px;
            padding: 1rem;
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .violation-icon {
            background: #ef4444;
            color: white;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1rem;
        }

        .violation-details {
            flex: 1;
        }

        .violation-count-text {
            font-weight: 600;
            color: #dc2626;
            margin-bottom: 0.25rem;
        }

        .violation-warning {
            font-size: 0.9rem;
            color: #7f1d1d;
        }

        .modal-actions {
            display: flex;
            gap: 1rem;
            justify-content: center;
        }

        .modal-btn {
            padding: 1rem 2.5rem;
            border-radius: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            border: none;
            font-size: 1rem;
        }

        .modal-btn-primary {
            background: #3b82f6;
            color: white;
        }

        .modal-btn-primary:hover {
            background: #2563eb;
            transform: translateY(-1px);
        }

        /* Loading and Result States */
        .loading-container {
            text-align: center;
            padding: 4rem 2rem;
            background: white;
            border-radius: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .loading-spinner {
            border: 4px solid #e2e8f0;
            border-top: 4px solid #3b82f6;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            animation: spin 1s linear infinite;
            margin: 0 auto 2rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .result-container {
            text-align: center;
            padding: 4rem 2rem;
            background: white;
            border-radius: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .result-score {
            font-size: 5rem;
            font-weight: bold;
            color: #10b981;
            margin-bottom: 1rem;
            text-shadow: 0 2px 4px rgba(16, 185, 129, 0.2);
        }

        .result-details {
            color: #64748b;
            margin-bottom: 2rem;
            font-size: 1.2rem;
        }

        .result-details p {
            margin-bottom: 0.5rem;
        }

        /* Mobile Responsiveness */
        @media (max-width: 1024px) {
            .main-content {
                padding-right: 260px;
            }

            .navigation-panel {
                width: 220px;
            }
        }

        @media (max-width: 768px) {
            .main-content {
                padding-right: 0;
                padding-bottom: 180px;
            }

            .navigation-panel {
                position: fixed;
                bottom: 0;
                top: auto;
                right: 0;
                left: 0;
                transform: none;
                width: 100%;
                max-height: 180px;
                border-radius: 20px 20px 0 0;
                padding: 1rem;
            }

            .timer-container {
                top: 1rem;
                right: 1rem;
            }

            .timer {
                padding: 0.4rem 1rem;
                font-size: 1.2rem;
            }

            .question-grid {
                max-height: 80px;
                display: grid;
                grid-template-columns: repeat(6, 1fr); /* More columns on mobile */
                gap: 0.2rem; /* Reduced gap on mobile too */
                overflow-x: auto;
                overflow-y: hidden;
                padding-bottom: 0.5rem;
                justify-items: center; /* Center items on mobile too */
                align-items: center;
            }

            .question-nav-btn {
                width: 32px; /* Slightly bigger on mobile */
                height: 32px;
                font-size: 0.8rem;
                min-width: 32px; /* Prevent shrinking */
                margin: 0 auto; /* Center in mobile grid too */
            }

            .nav-btn {
                width: 40px;
                height: 40px;
                font-size: 1.6rem; /* Slightly smaller on mobile but still visible */
            }

            .submit-btn {
                padding: 0.7rem;
                font-size: 0.85rem;
            }
        }

        /* Security Features */
        .quiz-secured {
            user-select: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
        }

        /* Enhanced Scrollbar Styling */
        .question-grid::-webkit-scrollbar {
            width: 4px;
            height: 4px;
        }

        .question-grid::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 2px;
        }

        .question-grid::-webkit-scrollbar-thumb {
            background: #3b82f6;
            border-radius: 2px;
        }

        .question-grid::-webkit-scrollbar-thumb:hover {
            background: #2563eb;
        }
    </style>
</head>
<body class="quiz-secured">
    <!-- Timer - Top Right -->
    <div class="timer-container">
        <div class="timer" id="timer">--:--</div>
    </div>

    <!-- Main Content -->
    <main class="main-content">
        <!-- Loading State -->
        <div id="loadingContainer" class="loading-container">
            <div class="loading-spinner"></div>
            <h3>Loading Quiz Questions...</h3>
            <p>Please wait while we prepare your quiz.</p>
        </div>

        <!-- Quiz Container -->
        <div id="quizContainer" class="quiz-container" style="display: none;">
            <!-- Question -->
            <div class="question-container">
                <div class="question-text" id="questionText">Loading question...</div>
            </div>

            <!-- Options -->
            <div class="options-container" id="optionsContainer">
                <!-- Options will be dynamically inserted here -->
            </div>
        </div>

        <!-- Results Container -->
        <div id="resultsContainer" class="result-container" style="display: none;">
            <div class="result-score" id="resultScore">-</div>
            <div class="result-details" id="resultDetails">
                Processing your results...
            </div>
            <button class="submit-btn" onclick="goToDashboard()">
                View Detailed Results
            </button>
        </div>
    </main>

    <!-- Right Navigation Panel -->
    <div class="navigation-panel">
        <!-- Navigation Controls -->
        <div class="nav-controls">
            <button class="nav-btn" id="prevBtn" onclick="previousQuestion()" disabled title="Previous Question">
                ‹
            </button>
            <button class="nav-btn" id="nextBtn" onclick="nextQuestion()" title="Next Question">
                ›
            </button>
        </div>

        <!-- Question Grid -->
        <div class="question-grid" id="questionGrid">
            <!-- Question navigation buttons will be inserted here -->
        </div>

        <!-- Submit Button -->
        <div class="submit-container">
            <button class="submit-btn" id="submitBtn" onclick="submitQuiz()" style="display: none;">
                Submit Quiz
            </button>
        </div>
    </div>

    <!-- Warning Modal -->
    <div id="warningModal" class="modal-overlay" style="display: none;">
        <div class="warning-modal">
            <div class="modal-header">
                <div class="modal-icon">⚠️</div>
                <h2 class="modal-title">Suspicious Activity Detected!</h2>
                <p class="modal-subtitle">Enhanced Anti-Cheating System Alert</p>
            </div>
            
            <div class="modal-content">
                <p class="warning-text">
                    You switched tabs, windows, or applications. This behavior is monitored to prevent cheating.
                </p>
                
                <div class="violation-status">
                    <div class="violation-icon">🚨</div>
                    <div class="violation-details">
                        <div class="violation-count-text" id="modalViolationText">Violation 1 of 2</div>
                        <div class="violation-warning" id="modalWarningText">Next violation will auto-submit your quiz!</div>
                    </div>
                </div>
            </div>
            
            <div class="modal-actions">
                <button class="modal-btn modal-btn-primary" onclick="closeWarningModal()">
                    I Understand - Continue Quiz
                </button>
            </div>
        </div>
    </div>

    <script>
        // Enhanced Anti-Cheating System Variables
        let violationCount = 0;
        let isTabHidden = false;
        let graceTimer = null;
        let isQuizSubmitted = false;
        const GRACE_PERIOD = 5000; // 5 seconds grace period
        const MAX_VIOLATIONS = 2;
        
        // Enhanced detection variables
        let lastViolationTime = 0;
        let isDetectionActive = true;
        let focusCheckInterval = null;
        let mouseInsideWindow = true;
        let isWindowFocused = true;

        // Quiz Data
        let quizData = null;
        let currentQuestionIndex = 0;
        let studentAnswers = [];
        let visitedQuestions = []; // Track which questions have been viewed
        let startTime = Date.now();
        let timerInterval = null;
        const quizId = window.location.pathname.split('/').pop();
        let QUIZ_TIME_LIMIT = 30 * 60; // Default 30 minutes, will be updated from API

        // Enhanced Class context data from server
        const classContext = {
            hasClass: {{#if quiz.className}}true{{else}}false{{/if}},
            className: '{{quiz.className}}' || null,
            classSubject: '{{quiz.classSubject}}' || null,
            classId: '{{quiz.classId}}' || null
        };

        // Enhanced navigation context from server
        const navigationContext = {{{json navigationContext}}};

        console.log('🏫 Enhanced class context:', classContext);
        console.log('🧭 Enhanced navigation context:', navigationContext);
        console.log('🛡️ Anti-cheating system initialized');

        // Enhanced initialization
        function initializeAntiCheating() {
            console.log('🛡️ Initializing anti-cheating system...');
            
            // Primary: Tab Visibility Detection
            document.addEventListener('visibilitychange', handleVisibilityChange);
            
            // Enhanced: Window Focus Detection (for app switches)
            window.addEventListener('blur', handleWindowBlur);
            window.addEventListener('focus', handleWindowFocus);
            
            // Enhanced: Mouse Leave Detection (for window switches)
            document.addEventListener('mouseleave', handleMouseLeave);
            document.addEventListener('mouseenter', handleMouseEnter);
            
            // Enhanced: Keyboard Focus Detection
            window.addEventListener('keydown', handleKeyboardActivity);
            
            // Enhanced: Page Focus Monitoring (backup detection)
            startFocusMonitoring();
            
            // Disable common cheating methods
            disableCheatingMethods();
            
            console.log('✅ Anti-cheating system active - detecting tabs, windows, and apps');
        }

        // Handle tab visibility changes
        function handleVisibilityChange() {
            if (isQuizSubmitted || !isDetectionActive) return;
            
            if (document.hidden) {
                console.log('🔍 TAB SWITCH: Tab became hidden');
                triggerSuspiciousActivity('tab_switch');
            } else {
                console.log('👁️ TAB RETURN: Tab became visible');
                handleActivityReturn();
            }
        }

        // Handle window focus changes (for app switches)
        function handleWindowBlur() {
            if (isQuizSubmitted || !isDetectionActive) return;
            
            isWindowFocused = false;
            
            // Check if it's actually a window switch (not just a tab switch)
            setTimeout(() => {
                if (!isWindowFocused && !document.hidden) {
                    console.log('🔍 WINDOW SWITCH: Browser window lost focus (app switch detected)');
                    triggerSuspiciousActivity('window_blur');
                }
            }, 200); // Small delay to differentiate from tab switches
        }

        function handleWindowFocus() {
            if (isQuizSubmitted || !isDetectionActive) return;
            
            isWindowFocused = true;
            console.log('👁️ WINDOW RETURN: Browser window gained focus');
            handleActivityReturn();
        }

        // Mouse leave detection (when mouse goes outside browser)
        function handleMouseLeave() {
            if (isQuizSubmitted || !isDetectionActive) return;
            mouseInsideWindow = false;
        }

        function handleMouseEnter() {
            mouseInsideWindow = true;
        }

        // Keyboard activity detection
        function handleKeyboardActivity(e) {
            if (isQuizSubmitted || !isDetectionActive) return;
            
            // Detect Alt+Tab (Windows) or Cmd+Tab (Mac) - task switcher
            if ((e.altKey && e.keyCode === 9) || (e.metaKey && e.keyCode === 9)) {
                e.preventDefault(); // Try to prevent it
                console.log('🔍 TASK SWITCHER: Alt+Tab or Cmd+Tab detected');
                triggerSuspiciousActivity('task_switcher');
            }
            
            // Detect Windows key (opens Start menu)
            if (e.keyCode === 91 || e.keyCode === 92) {
                console.log('🔍 WINDOWS KEY: Start menu access detected');
                triggerSuspiciousActivity('windows_key');
            }
        }

        // Continuous focus monitoring (backup detection)
        function startFocusMonitoring() {
            focusCheckInterval = setInterval(() => {
                if (isQuizSubmitted || !isDetectionActive) return;
                
                const hasDocumentFocus = document.hasFocus();
                const hasWindowFocus = document.visibilityState === 'visible';
                
                // If page doesn't have focus and it's not a known tab switch
                if (!hasDocumentFocus && hasWindowFocus && isWindowFocused) {
                    console.log('🔍 FOCUS MONITOR: Document lost focus (possible app switch)');
                    triggerSuspiciousActivity('focus_loss');
                }
            }, 2000); // Check every 2 seconds
        }

        // Unified suspicious activity trigger
        function triggerSuspiciousActivity(activityType) {
            const now = Date.now();
            
            // Prevent duplicate violations within 3 seconds
            if (now - lastViolationTime < 3000) {
                console.log(`⚠️ Duplicate ${activityType} violation prevented (too soon)`);
                return;
            }
            
            console.log(`🔍 SUSPICIOUS ACTIVITY: ${activityType} detected - starting grace timer`);
            isTabHidden = true;
            
            // Start grace period timer
            graceTimer = setTimeout(() => {
                if (isTabHidden && !isQuizSubmitted) {
                    lastViolationTime = Date.now();
                    recordViolation(activityType);
                }
            }, GRACE_PERIOD);
        }

        // Handle return from suspicious activity
        function handleActivityReturn() {
            console.log('👁️ ACTIVITY RETURN: Student returned to quiz');
            isTabHidden = false;
            
            // Clear grace timer if student returned quickly
            if (graceTimer) {
                clearTimeout(graceTimer);
                graceTimer = null;
                console.log('✅ Grace period - no violation recorded');
            }
        }

        // Record violation with activity type
        function recordViolation(activityType = 'unknown') {
            violationCount++;
            console.log(`🚨 VIOLATION DETECTED! Type: ${activityType}, Count: ${violationCount}/${MAX_VIOLATIONS}`);
            
            if (violationCount === 1) {
                console.log('⚠️ First violation - showing warning modal');
                showWarningModal(activityType);
            } else if (violationCount >= MAX_VIOLATIONS) {
                console.log('🚨 Multiple violations - auto-submitting');
                autoSubmitForViolation();
            }
        }

        // Show warning modal with activity type
        function showWarningModal(activityType = 'tab switching') {
            const modal = document.getElementById('warningModal');
            const violationText = document.getElementById('modalViolationText');
            const warningText = document.getElementById('modalWarningText');
            
            // Enhanced warning message based on activity type
            const activityMessages = {
                'tab_switch': 'Tab switching detected',
                'window_blur': 'Window/Application switching detected',
                'task_switcher': 'Alt+Tab task switcher usage detected',
                'windows_key': 'Windows key / Start menu access detected',
                'focus_loss': 'Browser focus loss detected',
                'unknown': 'Suspicious activity detected'
            };
            
            const activityMessage = activityMessages[activityType] || activityMessages['unknown'];
            
            violationText.textContent = `${activityMessage} - Violation ${violationCount} of ${MAX_VIOLATIONS}`;
            
            if (violationCount === 1) {
                warningText.textContent = 'Next violation will auto-submit your quiz!';
            } else {
                warningText.textContent = 'This is your final warning!';
            }
            
            modal.style.display = 'flex';
            console.log(`⚠️ Warning modal displayed for ${activityType} - NOT submitting quiz`);
        }

        function closeWarningModal() {
            const modal = document.getElementById('warningModal');
            modal.style.display = 'none';
            console.log('✅ Warning modal closed - student can continue quiz');
        }

        function autoSubmitForViolation() {
            console.log('🚨 AUTO-SUBMITTING due to multiple violations');
            
            // Disable further detection to prevent more violations
            isDetectionActive = false;
            
            // Clean up monitoring
            if (focusCheckInterval) {
                clearInterval(focusCheckInterval);
                focusCheckInterval = null;
            }
            
            // Show alert
            alert('🚨 Multiple suspicious activities detected!\n\nPossible activities: Tab switching, app switching, or task switching.\n\nYour quiz is being submitted automatically due to violation of anti-cheating policy.');
            
            // Force submit quiz
            isQuizSubmitted = true;
            submitQuiz();
        }

        // Enhanced cheating prevention
        function disableCheatingMethods() {
            // Disable right-click context menu
            document.addEventListener('contextmenu', function(e) {
                e.preventDefault();
                console.log('🚫 Right-click disabled');
            });
            
            // Disable common keyboard shortcuts
            document.addEventListener('keydown', function(e) {
                // Disable F12, Ctrl+Shift+I, Ctrl+U, Ctrl+Shift+C
                if (e.keyCode === 123 || // F12
                    (e.ctrlKey && e.shiftKey && e.keyCode === 73) || // Ctrl+Shift+I
                    (e.ctrlKey && e.keyCode === 85) || // Ctrl+U
                    (e.ctrlKey && e.shiftKey && e.keyCode === 67)) { // Ctrl+Shift+C
                    e.preventDefault();
                    console.log('🚫 Developer tools shortcut blocked');
                }
                
                // Disable Ctrl+A (select all), Ctrl+C (copy), Ctrl+V (paste)
                if (e.ctrlKey && (e.keyCode === 65 || e.keyCode === 67 || e.keyCode === 86)) {
                    e.preventDefault();
                    console.log('🚫 Copy/Paste blocked');
                }
            });
            
            // Disable text selection
            document.addEventListener('selectstart', function(e) {
                if (e.target.tagName !== 'INPUT' && e.target.tagName !== 'TEXTAREA') {
                    e.preventDefault();
                }
            });
        }

        // Utility function to format time
        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            const secs = seconds % 60;
            return `${minutes}m ${secs}s`;
        }

        // Initialize quiz when page loads
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🎯 Initializing anti-cheating quiz with ID:', quizId);
            
            // ROBUST CHECK: Ensure user came through proper quiz info flow
            const referrer = document.referrer;
            const hasQuizInfoFlag = sessionStorage.getItem('quiz-info-visited-' + quizId) === 'true';
            const isFromQuizInfo = referrer.includes('/quiz-info/') || hasQuizInfoFlag;
            
            // Additional checks for direct access
            const urlParams = new URLSearchParams(window.location.search);
            const hasDirectAccess = urlParams.get('direct') === 'true'; // This shouldn't exist in normal flow
            
            console.log('🔍 COMPREHENSIVE QUIZ ACCESS CHECK:', {
                referrer: referrer,
                hasQuizInfoFlag: hasQuizInfoFlag,
                isFromQuizInfo: isFromQuizInfo,
                hasDirectAccess: hasDirectAccess,
                quizId: quizId,
                classContext: classContext
            });
            
            // If ANY indication of bypassing quiz info page, redirect back
            if (!isFromQuizInfo || hasDirectAccess) {
                console.log('🚫 UNAUTHORIZED QUIZ ACCESS DETECTED - Enforcing proper flow');
                console.log('📋 Source: Student Dashboard or other direct access point');
                
                // Clear any existing flags
                sessionStorage.removeItem('quiz-info-visited-' + quizId);
                
                // Build proper quiz info URL with class context
                let quizInfoUrl = `/quiz-info/${quizId}`;
                if (classContext.classId) {
                    quizInfoUrl += `?classId=${classContext.classId}`;
                } else {
                    // Check URL params for class context
                    const classIdFromUrl = urlParams.get('classId');
                    if (classIdFromUrl) {
                        quizInfoUrl += `?classId=${classIdFromUrl}`;
                    }
                }
                
                console.log('🔄 ENFORCING QUIZ INFO FLOW - Redirecting to:', quizInfoUrl);
                
                // Show brief message and redirect
                document.getElementById('loadingContainer').innerHTML = `
                    <div class="loading-spinner"></div>
                    <h3>Redirecting to Quiz Information...</h3>
                    <p>Please review quiz details before starting.</p>
                `;
                
                // Redirect after brief delay
                setTimeout(() => {
                    window.location.href = quizInfoUrl;
                }, 1000);
                
                return; // Stop initialization
            }
            
            console.log('✅ PROPER QUIZ FLOW VERIFIED - Continuing with quiz initialization');
            
            // Clear the session storage flag now that we've used it
            sessionStorage.removeItem('quiz-info-visited-' + quizId);
            
            // Initialize anti-cheating system first
            initializeAntiCheating();
            
            // Then load quiz data
            loadQuizData();
        });

        // Load quiz duration first, then quiz data
        async function loadQuizData() {
            try {
                console.log('📡 Fetching quiz duration and data...');
                
                // First get the quiz duration
                const durationResponse = await fetch(`/api/quiz/${quizId}/duration`);
                const durationData = await durationResponse.json();
                
                if (durationData.success) {
                    QUIZ_TIME_LIMIT = durationData.durationSeconds;
                    console.log('⏱️ Quiz duration set to:', durationData.durationMinutes, 'minutes');
                } else {
                    console.warn('⚠️ Could not fetch quiz duration, using default 30 minutes');
                }
                
                // Then get the quiz questions
                const response = await fetch(`/api/quiz/${quizId}`);
                const data = await response.json();
                
                if (data.success && data.quiz) {
                    quizData = data.quiz;
                    console.log('✅ Quiz loaded:', quizData.lectureTitle);
                    
                    initializeQuiz();
                } else {
                    console.error('❌ Failed to load quiz:', data.message);
                    showError('Failed to load quiz: ' + (data.message || 'Unknown error'));
                }
            } catch (error) {
                console.error('❌ Error loading quiz:', error);
                showError('Network error while loading quiz. Please check your connection.');
            }
        }

        // Initialize quiz interface
        function initializeQuiz() {
            // Initialize student answers array
            studentAnswers = new Array(quizData.totalQuestions).fill(null);
            // Initialize visited questions array
            visitedQuestions = new Array(quizData.totalQuestions).fill(false);
            
            // Hide loading, show quiz
            document.getElementById('loadingContainer').style.display = 'none';
            document.getElementById('quizContainer').style.display = 'block';
            
            // Start timer with dynamic duration
            startTimer();
            
            // Display first question
            displayQuestion(0);
            
            // Create question navigation
            createQuestionNavigation();
            
            console.log('🚀 Anti-cheating quiz initialized successfully with', QUIZ_TIME_LIMIT / 60, 'minutes duration');
        }

        // Create question navigation grid (Enhanced for 3 columns)
        function createQuestionNavigation() {
            const grid = document.getElementById('questionGrid');
            grid.innerHTML = '';
            
            // Always use 3 columns layout
            console.log('📋 Creating question navigation with 3 columns for', quizData.totalQuestions, 'questions');
            
            for (let i = 0; i < quizData.totalQuestions; i++) {
                const btn = document.createElement('button');
                btn.className = 'question-nav-btn';
                btn.textContent = i + 1;
                btn.onclick = () => displayQuestion(i);
                btn.title = `Question ${i + 1}`;
                grid.appendChild(btn);
            }
        }

        // Update question navigation with proper visited/skipped logic
        function updateQuestionNavigation() {
            const buttons = document.getElementById('questionGrid').children;
            
            for (let i = 0; i < buttons.length; i++) {
                const btn = buttons[i];
                btn.className = 'question-nav-btn';
                
                if (i === currentQuestionIndex) {
                    // Current question - blue highlight
                    btn.classList.add('current');
                } else if (studentAnswers[i] !== null) {
                    // Answered question - green border
                    btn.classList.add('answered');
                } else if (visitedQuestions[i] === true) {
                    // Visited but not answered - orange border (truly skipped)
                    btn.classList.add('skipped');
                }
                // Unvisited questions stay default gray - no special styling
            }
        }

        // Display a specific question
        function displayQuestion(index) {
            if (!quizData || !quizData.questions[index]) {
                console.error('❌ Invalid question index:', index);
                return;
            }

            const question = quizData.questions[index];
            currentQuestionIndex = index;

            // Mark this question as visited
            visitedQuestions[index] = true;

            // Update question text
            document.getElementById('questionText').textContent = question.question;
            
            // Display options
            const optionsContainer = document.getElementById('optionsContainer');
            optionsContainer.innerHTML = '';
            
            ['A', 'B', 'C', 'D'].forEach(letter => {
                const option = document.createElement('div');
                option.className = 'option';
                option.onclick = (e) => selectOption(letter, e);
                
                // Check if this option was previously selected
                if (studentAnswers[index] === letter) {
                    option.classList.add('selected');
                }
                
                option.innerHTML = `
                    <div class="option-letter">${letter}</div>
                    <div class="option-text">${question.options[letter]}</div>
                `;
                
                optionsContainer.appendChild(option);
            });
            
            // Update navigation buttons
            updateNavigationButtons();
            updateQuestionNavigation();
        }

        // Enhanced select option with toned-down animation
        function selectOption(letter, event) {
            console.log(`📝 Selecting option ${letter} for question ${currentQuestionIndex + 1}`);
            
            // Get the clicked option element
            const clickedOption = event.target.closest('.option');
            
            // Remove previous selection
            document.querySelectorAll('.option').forEach(opt => {
                opt.classList.remove('selected', 'click-flash');
            });
            
            // Add click flash animation first
            clickedOption.classList.add('click-flash');
            
            // Then add selection after a brief delay
            setTimeout(() => {
                clickedOption.classList.remove('click-flash');
                clickedOption.classList.add('selected');
                
                // Store answer
                studentAnswers[currentQuestionIndex] = letter;
                
                // Update question navigation
                updateQuestionNavigation();
                
                console.log('✨ Option selection animation completed');
                
                // Auto-advance to next question after animation
                setTimeout(() => {
                    if (currentQuestionIndex < quizData.totalQuestions - 1) {
                        nextQuestion();
                    }
                }, 300); // Reduced from 400ms to match toned-down animation
                
            }, 100); // Reduced from 150ms for quicker response
        }

        // Navigation functions
        function nextQuestion() {
            if (currentQuestionIndex < quizData.totalQuestions - 1) {
                displayQuestion(currentQuestionIndex + 1);
            }
        }

        function previousQuestion() {
            if (currentQuestionIndex > 0) {
                displayQuestion(currentQuestionIndex - 1);
            }
        }

        function updateNavigationButtons() {
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');
            const submitBtn = document.getElementById('submitBtn');
            
            // Previous button
            prevBtn.disabled = currentQuestionIndex === 0;
            
            // Next/Submit button logic
            if (currentQuestionIndex === quizData.totalQuestions - 1) {
                nextBtn.style.display = 'none';
                submitBtn.style.display = 'block';
            } else {
                nextBtn.style.display = 'block';
                submitBtn.style.display = 'none';
            }
        }

        // Timer functions with dynamic duration
        function startTimer() {
            startTime = Date.now();
            
            timerInterval = setInterval(() => {
                const elapsed = Math.floor((Date.now() - startTime) / 1000);
                const remaining = Math.max(0, QUIZ_TIME_LIMIT - elapsed);
                
                updateTimerDisplay(remaining);
                
                if (remaining <= 0) {
                    clearInterval(timerInterval);
                    alert('⏰ Time is up! Your quiz will be submitted automatically.');
                    isQuizSubmitted = true;
                    submitQuiz();
                }
            }, 1000);
        }

        function updateTimerDisplay(seconds) {
            const minutes = Math.floor(seconds / 60);
            const secs = seconds % 60;
            const timeString = `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
            
            const timerElement = document.getElementById('timer');
            timerElement.textContent = timeString;
            
            // Dynamic warning thresholds based on quiz duration
            const warningThreshold = Math.max(300, QUIZ_TIME_LIMIT * 0.25); // 25% of quiz time or 5 minutes, whichever is larger
            const dangerThreshold = Math.max(120, QUIZ_TIME_LIMIT * 0.1); // 10% of quiz time or 2 minutes, whichever is larger
            
            // Change color based on remaining time
            if (seconds <= dangerThreshold) {
                timerElement.className = 'timer danger';
            } else if (seconds <= warningThreshold) {
                timerElement.className = 'timer warning';
            } else {
                timerElement.className = 'timer';
            }
        }

        // Submit quiz function with anti-cheating context
        async function submitQuiz() {
            console.log('🔍 Enhanced quiz submission check:', {
                quizData: quizData,
                studentAnswers: studentAnswers,
                quizId: quizId,
                classContext: classContext,
                quizDuration: QUIZ_TIME_LIMIT / 60, // in minutes
                violationCount: violationCount // Include violation count
            });

            if (!quizData || !quizData.questions) {
                console.error('❌ Quiz data is missing!');
                alert('Quiz data is missing. Please refresh and try again.');
                return;
            }

            // Mark as submitted to prevent further violations
            isQuizSubmitted = true;

            // Check if all questions are answered
            const unansweredCount = studentAnswers.filter(answer => answer === null).length;
            
            if (unansweredCount > 0 && violationCount === 0) {
                // Only show confirmation if not auto-submitting due to violations
                const confirmMessage = classContext.hasClass 
                    ? `You have ${unansweredCount} unanswered questions.\n\nThis quiz is part of ${classContext.className} class and your results will be recorded for class analytics.\n\nAre you sure you want to submit?`
                    : `You have ${unansweredCount} unanswered questions. Are you sure you want to submit?`;
                    
                if (!confirm(confirmMessage)) {
                    isQuizSubmitted = false; // Allow further interaction
                    return;
                }
            }
            
            // Stop timer
            if (timerInterval) {
                clearInterval(timerInterval);
            }
            
            // Calculate time taken
            const timeTakenSeconds = Math.floor((Date.now() - startTime) / 1000);
            
            // Prepare comprehensive submission data with violation info
            const submissionData = {
                studentAnswers: studentAnswers.map((answer, index) => ({
                    questionIndex: index,
                    question: quizData.questions[index].question,
                    selectedOption: answer
                })).filter(item => item.selectedOption !== null),
                timeTakenSeconds: timeTakenSeconds,
                classContext: classContext, // Enhanced class context
                // Anti-cheating data
                antiCheatData: {
                    violationCount: violationCount,
                    wasAutoSubmitted: violationCount >= MAX_VIOLATIONS,
                    gracePeriodsUsed: violationCount // Track how many times grace period was activated
                },
                // Additional navigation hints for backend
                navigationHints: {
                    fromClassView: !!classContext.classId,
                    preferredReturnUrl: classContext.classId ? `/student/class/${classContext.classId}` : '/homeStudent'
                }
            };
            
            console.log('📤 Submitting enhanced quiz with anti-cheating data:', submissionData);
            
            // Show loading state
            showSubmissionLoading();
            
            try {
                const response = await fetch(`/api/quiz/submit/${quizId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(submissionData)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    console.log('✅ Quiz submitted successfully with anti-cheating data:', result);
                    
                    // Store comprehensive result data with violation info
                    const enhancedResult = {
                        ...result,
                        lectureId: quizData.lectureId || null,
                        classContext: classContext,
                        quizDurationMinutes: QUIZ_TIME_LIMIT / 60, // Store actual quiz duration
                        // Include anti-cheating summary
                        antiCheatSummary: {
                            violationCount: violationCount,
                            wasAutoSubmitted: violationCount >= MAX_VIOLATIONS,
                            securityStatus: violationCount === 0 ? 'Clean' : 
                                          violationCount === 1 ? 'Warning Issued' : 'Auto-Submitted'
                        },
                        // Enhanced navigation context from backend response
                        navigationContext: result.navigationContext || {
                            hasClass: classContext.hasClass,
                            classId: classContext.classId,
                            className: classContext.className,
                            returnToClass: !!classContext.classId
                        },
                        suggestedRedirect: result.suggestedRedirect || {
                            backUrl: classContext.classId ? `/student/class/${classContext.classId}` : '/homeStudent',
                            backLabel: classContext.className ? `Back to ${classContext.className}` : 'Back to Dashboard'
                        }
                    };
                    
                    showResults(enhancedResult);
                } else {
                    console.error('❌ Quiz submission failed:', result.message);
                    alert('Failed to submit quiz: ' + result.message);
                    isQuizSubmitted = false; // Allow retry
                }
            } catch (error) {
                console.error('❌ Error submitting quiz:', error);
                alert('Network error while submitting quiz. Please try again.');
                isQuizSubmitted = false; // Allow retry
            }
        }

        // Show submission loading
        function showSubmissionLoading() {
            document.getElementById('quizContainer').style.display = 'none';
            document.getElementById('loadingContainer').style.display = 'block';
            
            let loadingText = classContext.hasClass 
                ? `Submitting Your ${classContext.className} Quiz...`
                : 'Submitting Your Quiz...';
                
            // Add violation context to loading message
            if (violationCount > 0) {
                loadingText = violationCount >= MAX_VIOLATIONS 
                    ? 'Auto-Submitting Quiz Due to Security Violations...'
                    : loadingText + ' (Security Violations Detected)';
            }
                
            document.getElementById('loadingContainer').innerHTML = `
                <div class="loading-spinner"></div>
                <h3>${loadingText}</h3>
                <p>Please wait while we process your answers and security data.</p>
            `;
        }

        // showResults function with anti-cheating summary
        function showResults(result) {
            document.getElementById('loadingContainer').style.display = 'none';
            document.getElementById('resultsContainer').style.display = 'block';
            
            const percentage = result.percentage.toFixed(1);
            const timeFormatted = formatTime(result.timeTakenSeconds);
            const durationFormatted = formatTime(QUIZ_TIME_LIMIT);
            
            document.getElementById('resultScore').textContent = `${percentage}%`;
            
            let resultDetailsHTML = `
                <p><strong>Score:</strong> ${result.score} out of ${result.totalQuestions} correct</p>
                <p><strong>Time Taken:</strong> ${timeFormatted} out of ${durationFormatted}</p>
                <p><strong>Percentage:</strong> ${percentage}%</p>
            `;
            
            // Add anti-cheating summary
            if (result.antiCheatSummary) {
                const summary = result.antiCheatSummary;
                const statusColor = summary.securityStatus === 'Clean' ? '#10b981' : 
                                  summary.securityStatus === 'Warning Issued' ? '#f59e0b' : '#ef4444';
                
                resultDetailsHTML += `
                    <div style="margin-top: 1rem; padding: 1rem; background: #f8fafc; border-radius: 8px; border-left: 4px solid ${statusColor};">
                        <p><strong>Security Status:</strong> <span style="color: ${statusColor};">${summary.securityStatus}</span></p>
                        ${summary.violationCount > 0 ? `<p style="font-size: 0.85rem; color: #64748b;">Violations detected: ${summary.violationCount}</p>` : ''}
                    </div>
                `;
            }
            
            if (classContext.hasClass) {
                resultDetailsHTML += `
                    <p><strong>Class:</strong> ${classContext.className}</p>
                    <p style="color: #3b82f6; font-weight: 500;">✅ Your result has been recorded for class performance tracking.</p>
                `;
            }
            
            document.getElementById('resultDetails').innerHTML = resultDetailsHTML;

            // Store comprehensive results data with anti-cheating info
            const detailedResults = {
                quizId: quizId,
                lectureId: result.lectureId || quizData.lectureId,
                quizTitle: result.quizTitle || quizData.lectureTitle,
                score: result.score,
                totalQuestions: result.totalQuestions,
                percentage: result.percentage,
                timeTakenSeconds: result.timeTakenSeconds,
                quizDurationSeconds: QUIZ_TIME_LIMIT, // Store actual duration used
                submissionDate: new Date().toISOString(),
                questionDetails: result.questionDetails || prepareQuestionDetails(),
                classContext: classContext,
                // Anti-cheating data for results page
                antiCheatSummary: result.antiCheatSummary,
                // Enhanced navigation context for results page
                navigationContext: result.navigationContext,
                suggestedRedirect: result.suggestedRedirect,
                // Breadcrumb data for results page
                breadcrumbData: {
                    steps: classContext.hasClass ? [
                        { label: 'Dashboard', url: '/homeStudent' },
                        { label: classContext.className, url: `/student/class/${classContext.classId}` },
                        { label: 'Quiz Results', url: null }
                    ] : [
                        { label: 'Dashboard', url: '/homeStudent' },
                        { label: 'Quiz Results', url: null }
                    ]
                }
            };

            // Store comprehensive results in localStorage for the results page
            localStorage.setItem('quizResults', JSON.stringify(detailedResults));
            console.log('📊 Enhanced results data stored with anti-cheating summary:', detailedResults);
        }

        // Prepare detailed question data
        function prepareQuestionDetails() {
            if (!quizData || !quizData.questions) {
                console.error('❌ Quiz data not available for detailed results');
                return [];
            }

            return studentAnswers.map((studentAnswer, index) => {
                const question = quizData.questions[index];
                if (!question) return null;

                return {
                    questionIndex: index,
                    questionText: question.question,
                    options: question.options,
                    studentAnswer: studentAnswer,
                    correctAnswer: question.correct_answer,
                    isCorrect: studentAnswer === question.correct_answer
                };
            }).filter(item => item !== null);
        }

        // goToDashboard function with smart navigation
        function goToDashboard() {
            const storedResults = localStorage.getItem('quizResults');
            if (storedResults) {
                // Redirect to detailed results page
                const resultsData = JSON.parse(storedResults);
                
                // Enhanced: Add navigation hints to results page URL
                let resultsUrl = '/quiz-results';
                if (resultsData.classContext && resultsData.classContext.hasClass) {
                    const params = new URLSearchParams({
                        classId: resultsData.classContext.classId,
                        className: resultsData.classContext.className,
                        returnTo: 'class'
                    });
                    resultsUrl += '?' + params.toString();
                }
                
                window.location.href = resultsUrl;
            } else if (classContext.hasClass) {
                // Redirect to class dashboard if in class context
                window.location.href = `/student/class/${classContext.classId}`;
            } else {
                // Fallback to student dashboard
                window.location.href = '/homeStudent';
            }
        }

        // Error handling with class-aware navigation
        function showError(message) {
            const backButtonText = classContext.hasClass 
                ? `Back to ${classContext.className}`
                : 'Back to Dashboard';
                
            const backUrl = classContext.hasClass 
                ? `/student/class/${classContext.classId}`
                : '/homeStudent';
                
            document.getElementById('loadingContainer').innerHTML = `
                <h3 style="color: #ef4444;">❌ Error</h3>
                <p>${message}</p>
                <button class="submit-btn" onclick="window.location.href='${backUrl}'" style="margin-top: 1rem;">
                    ${backButtonText}
                </button>
            `;
        }

        // Page unload warning with anti-cheating context
        window.addEventListener('beforeunload', function(e) {
            if (quizData && timerInterval && !isQuizSubmitted) {
                const warningMessage = violationCount > 0 
                    ? `WARNING: You have ${violationCount} security violations!\n\nLeaving now may result in additional violations and auto-submission.`
                    : classContext.hasClass 
                        ? `Are you sure you want to leave?\n\nThis is a ${classContext.className} class quiz and your progress will be lost.`
                        : 'Are you sure you want to leave? Your quiz progress will be lost.';
                        
                e.preventDefault();
                e.returnValue = warningMessage;
                return e.returnValue;
            }
        });

        // Console log for debugging
        console.log('🎯 Enhanced takeQuiz.hbs loaded with anti-cheating system:', {
            classContext: classContext,
            quizId: quizId,
            enhancedNavigation: true,
            dynamicDuration: true,
            antiCheatingActive: true,
            maxViolations: MAX_VIOLATIONS,
            gracePeriod: GRACE_PERIOD / 1000 + ' seconds',
            detectionMethods: ['tab_switch', 'window_blur', 'task_switcher', 'windows_key', 'focus_loss'],
            fullscreenMode: false,
            improvedUI: true,
            navigationPanel: '3-column grid, smaller buttons',
            optionAnimation: 'enhanced click animations'
        });
    </script>
</body>
</html>